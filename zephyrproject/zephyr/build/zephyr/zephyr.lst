
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	20000728 	.word	0x20000728
 8000004:	08001131 	.word	0x08001131
 8000008:	08002b6b 	.word	0x08002b6b
 800000c:	0800115d 	.word	0x0800115d
 8000010:	0800115d 	.word	0x0800115d
 8000014:	0800115d 	.word	0x0800115d
 8000018:	0800115d 	.word	0x0800115d
	...
 800002c:	08000fb9 	.word	0x08000fb9
 8000030:	0800115d 	.word	0x0800115d
 8000034:	00000000 	.word	0x00000000
 8000038:	08000f71 	.word	0x08000f71
 800003c:	08000dbd 	.word	0x08000dbd

08000040 <_irq_vector_table>:
 8000040:	08001109 08001109 08001109 08001109     ................
 8000050:	08001109 08001109 08001109 08001109     ................
 8000060:	08001109 08001109 08001109 08001109     ................
 8000070:	08001109 08001109 08001109 08001109     ................
 8000080:	08001109 08001109 08001109 08001109     ................
 8000090:	08001109 08001109 08001109 08001109     ................
 80000a0:	08001109 08001109 08001109 08001109     ................
 80000b0:	08001109 08001109 08001109 08001109     ................
 80000c0:	08001109 08001109 08001109 08001109     ................
 80000d0:	08001109 08001109 08001109 08001109     ................
 80000e0:	08001109 08001109 08001109 08001109     ................
 80000f0:	08001109 08001109 08001109 08001109     ................
 8000100:	08001109 08001109 08001109 08001109     ................
 8000110:	08001109 08001109 08001109 08001109     ................
 8000120:	08001109 08001109 08001109 08001109     ................
 8000130:	08001109 08001109 08001109 08001109     ................
 8000140:	08001109 08001109 08001109 08001109     ................
 8000150:	08001109 08001109 08001109 08001109     ................
 8000160:	08001109 08001109 08001109 08001109     ................
 8000170:	08001109 08001109 08001109 08001109     ................
 8000180:	08001109 08001109                       ........

Disassembly of section text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b96e 	b.w	800047c <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460e      	mov	r6, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468c      	mov	ip, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8081 	bne.w	80002cc <__udivmoddi4+0x114>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d945      	bls.n	800025c <__udivmoddi4+0xa4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa06 f302 	lsl.w	r3, r6, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0c03 	orr.w	ip, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6fe 	udiv	r6, ip, lr
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb0e cc16 	mls	ip, lr, r6, ip
 80001fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80001fe:	fb06 f001 	mul.w	r0, r6, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800020c:	f080 8115 	bcs.w	800043a <__udivmoddi4+0x282>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8112 	bls.w	800043a <__udivmoddi4+0x282>
 8000216:	3e02      	subs	r6, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a1b      	subs	r3, r3, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000222:	fb0e 3310 	mls	r3, lr, r0, r3
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	fb00 f101 	mul.w	r1, r0, r1
 800022e:	42a1      	cmp	r1, r4
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	193c      	adds	r4, r7, r4
 8000234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000238:	f080 8101 	bcs.w	800043e <__udivmoddi4+0x286>
 800023c:	42a1      	cmp	r1, r4
 800023e:	f240 80fe 	bls.w	800043e <__udivmoddi4+0x286>
 8000242:	3802      	subs	r0, #2
 8000244:	443c      	add	r4, r7
 8000246:	1a64      	subs	r4, r4, r1
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	2100      	movs	r1, #0
 800024e:	b11d      	cbz	r5, 8000258 <__udivmoddi4+0xa0>
 8000250:	40d4      	lsrs	r4, r2
 8000252:	2300      	movs	r3, #0
 8000254:	e9c5 4300 	strd	r4, r3, [r5]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	b902      	cbnz	r2, 8000260 <__udivmoddi4+0xa8>
 800025e:	deff      	udf	#255	; 0xff
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	2a00      	cmp	r2, #0
 8000266:	d14f      	bne.n	8000308 <__udivmoddi4+0x150>
 8000268:	1bcb      	subs	r3, r1, r7
 800026a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026e:	fa1f f887 	uxth.w	r8, r7
 8000272:	2101      	movs	r1, #1
 8000274:	fbb3 fcfe 	udiv	ip, r3, lr
 8000278:	0c26      	lsrs	r6, r4, #16
 800027a:	fb0e 331c 	mls	r3, lr, ip, r3
 800027e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8000282:	fb08 f30c 	mul.w	r3, r8, ip
 8000286:	42b3      	cmp	r3, r6
 8000288:	d907      	bls.n	800029a <__udivmoddi4+0xe2>
 800028a:	19be      	adds	r6, r7, r6
 800028c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000290:	d202      	bcs.n	8000298 <__udivmoddi4+0xe0>
 8000292:	42b3      	cmp	r3, r6
 8000294:	f200 80eb 	bhi.w	800046e <__udivmoddi4+0x2b6>
 8000298:	4684      	mov	ip, r0
 800029a:	1af6      	subs	r6, r6, r3
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb6 f0fe 	udiv	r0, r6, lr
 80002a2:	fb0e 6610 	mls	r6, lr, r0, r6
 80002a6:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002aa:	fb08 f800 	mul.w	r8, r8, r0
 80002ae:	45a0      	cmp	r8, r4
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x10a>
 80002b2:	193c      	adds	r4, r7, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x108>
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	f200 80d2 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002c0:	4618      	mov	r0, r3
 80002c2:	eba4 0408 	sub.w	r4, r4, r8
 80002c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ca:	e7c0      	b.n	800024e <__udivmoddi4+0x96>
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x12a>
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	f000 80af 	beq.w	8000434 <__udivmoddi4+0x27c>
 80002d6:	2100      	movs	r1, #0
 80002d8:	e9c5 0600 	strd	r0, r6, [r5]
 80002dc:	4608      	mov	r0, r1
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d149      	bne.n	800037e <__udivmoddi4+0x1c6>
 80002ea:	42b3      	cmp	r3, r6
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0x13c>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80bb 	bhi.w	800046a <__udivmoddi4+0x2b2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb66 0303 	sbc.w	r3, r6, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469c      	mov	ip, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0aa      	beq.n	8000258 <__udivmoddi4+0xa0>
 8000302:	e9c5 4c00 	strd	r4, ip, [r5]
 8000306:	e7a7      	b.n	8000258 <__udivmoddi4+0xa0>
 8000308:	f1c2 0320 	rsb	r3, r2, #32
 800030c:	4097      	lsls	r7, r2
 800030e:	40d8      	lsrs	r0, r3
 8000310:	4091      	lsls	r1, r2
 8000312:	40de      	lsrs	r6, r3
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	4308      	orrs	r0, r1
 800031a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800031e:	fbb6 f1fe 	udiv	r1, r6, lr
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb0e 6611 	mls	r6, lr, r1, r6
 800032a:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 800032e:	fb01 f308 	mul.w	r3, r1, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	fa04 f402 	lsl.w	r4, r4, r2
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x196>
 800033a:	19be      	adds	r6, r7, r6
 800033c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000340:	f080 808e 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 8000344:	42b3      	cmp	r3, r6
 8000346:	f240 808b 	bls.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	3902      	subs	r1, #2
 800034c:	443e      	add	r6, r7
 800034e:	1af3      	subs	r3, r6, r3
 8000350:	b286      	uxth	r6, r0
 8000352:	fbb3 f0fe 	udiv	r0, r3, lr
 8000356:	fb0e 3310 	mls	r3, lr, r0, r3
 800035a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800035e:	fb00 f308 	mul.w	r3, r0, r8
 8000362:	42b3      	cmp	r3, r6
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x1be>
 8000366:	19be      	adds	r6, r7, r6
 8000368:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800036c:	d274      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 800036e:	42b3      	cmp	r3, r6
 8000370:	d972      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000372:	3802      	subs	r0, #2
 8000374:	443e      	add	r6, r7
 8000376:	1af3      	subs	r3, r6, r3
 8000378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037c:	e77a      	b.n	8000274 <__udivmoddi4+0xbc>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	fa03 f401 	lsl.w	r4, r3, r1
 8000386:	fa22 f307 	lsr.w	r3, r2, r7
 800038a:	431c      	orrs	r4, r3
 800038c:	fa20 f907 	lsr.w	r9, r0, r7
 8000390:	fa06 f301 	lsl.w	r3, r6, r1
 8000394:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000398:	40fe      	lsrs	r6, r7
 800039a:	ea49 0903 	orr.w	r9, r9, r3
 800039e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80003a2:	fbb6 fefc 	udiv	lr, r6, ip
 80003a6:	fa1f f884 	uxth.w	r8, r4
 80003aa:	fb0c 661e 	mls	r6, ip, lr, r6
 80003ae:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80003b2:	fb0e fa08 	mul.w	sl, lr, r8
 80003b6:	45b2      	cmp	sl, r6
 80003b8:	fa02 f201 	lsl.w	r2, r2, r1
 80003bc:	fa00 f301 	lsl.w	r3, r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x21c>
 80003c2:	19a6      	adds	r6, r4, r6
 80003c4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80003c8:	d248      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003ca:	45b2      	cmp	sl, r6
 80003cc:	d946      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d2:	4426      	add	r6, r4
 80003d4:	eba6 060a 	sub.w	r6, r6, sl
 80003d8:	fa1f f989 	uxth.w	r9, r9
 80003dc:	fbb6 f0fc 	udiv	r0, r6, ip
 80003e0:	fb0c 6610 	mls	r6, ip, r0, r6
 80003e4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45b0      	cmp	r8, r6
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	19a6      	adds	r6, r4, r6
 80003f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45b0      	cmp	r8, r6
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	4426      	add	r6, r4
 8000400:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000404:	eba6 0608 	sub.w	r6, r6, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454e      	cmp	r6, r9
 800040e:	46c4      	mov	ip, r8
 8000410:	46ce      	mov	lr, r9
 8000412:	d318      	bcc.n	8000446 <__udivmoddi4+0x28e>
 8000414:	d015      	beq.n	8000442 <__udivmoddi4+0x28a>
 8000416:	b375      	cbz	r5, 8000476 <__udivmoddi4+0x2be>
 8000418:	ebb3 020c 	subs.w	r2, r3, ip
 800041c:	eb66 060e 	sbc.w	r6, r6, lr
 8000420:	fa06 f707 	lsl.w	r7, r6, r7
 8000424:	fa22 f301 	lsr.w	r3, r2, r1
 8000428:	40ce      	lsrs	r6, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	e9c5 7600 	strd	r7, r6, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e711      	b.n	8000258 <__udivmoddi4+0xa0>
 8000434:	4629      	mov	r1, r5
 8000436:	4628      	mov	r0, r5
 8000438:	e70e      	b.n	8000258 <__udivmoddi4+0xa0>
 800043a:	4666      	mov	r6, ip
 800043c:	e6ed      	b.n	800021a <__udivmoddi4+0x62>
 800043e:	4618      	mov	r0, r3
 8000440:	e701      	b.n	8000246 <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e7      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000446:	ebb8 0c02 	subs.w	ip, r8, r2
 800044a:	eb69 0404 	sbc.w	r4, r9, r4
 800044e:	3801      	subs	r0, #1
 8000450:	46a6      	mov	lr, r4
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4660      	mov	r0, ip
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78c      	b.n	8000376 <__udivmoddi4+0x1be>
 800045c:	4686      	mov	lr, r0
 800045e:	e7b9      	b.n	80003d4 <__udivmoddi4+0x21c>
 8000460:	4661      	mov	r1, ip
 8000462:	e774      	b.n	800034e <__udivmoddi4+0x196>
 8000464:	3802      	subs	r0, #2
 8000466:	443c      	add	r4, r7
 8000468:	e72b      	b.n	80002c2 <__udivmoddi4+0x10a>
 800046a:	4608      	mov	r0, r1
 800046c:	e747      	b.n	80002fe <__udivmoddi4+0x146>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443e      	add	r6, r7
 8000474:	e711      	b.n	800029a <__udivmoddi4+0xe2>
 8000476:	4629      	mov	r1, r5
 8000478:	e6ee      	b.n	8000258 <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <pwm_pin_set_usec.constprop.0>:
 * @param flags Flags for pin configuration (polarity).
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
 8000480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000484:	4606      	mov	r6, r0
 8000486:	b087      	sub	sp, #28
 8000488:	468a      	mov	sl, r1
 800048a:	4617      	mov	r7, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800048c:	6843      	ldr	r3, [r0, #4]
 800048e:	aa04      	add	r2, sp, #16
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	4798      	blx	r3
				   u32_t period, u32_t pulse,
				   pwm_flags_t flags)
{
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8000494:	9002      	str	r0, [sp, #8]
 8000496:	2800      	cmp	r0, #0
 8000498:	d135      	bne.n	8000506 <pwm_pin_set_usec.constprop.0+0x86>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800049a:	e9dd 4304 	ldrd	r4, r3, [sp, #16]
 800049e:	9303      	str	r3, [sp, #12]
 80004a0:	9a03      	ldr	r2, [sp, #12]
 80004a2:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 80004a6:	fba4 8903 	umull	r8, r9, r4, r3
 80004aa:	fb03 9902 	mla	r9, r3, r2, r9
 80004ae:	4640      	mov	r0, r8
 80004b0:	4a18      	ldr	r2, [pc, #96]	; (8000514 <pwm_pin_set_usec.constprop.0+0x94>)
 80004b2:	2300      	movs	r3, #0
 80004b4:	4649      	mov	r1, r9
 80004b6:	f7ff fe67 	bl	8000188 <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <pwm_pin_set_usec.constprop.0+0x98>)
 80004bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004c0:	454b      	cmp	r3, r9
 80004c2:	bf08      	it	eq
 80004c4:	4542      	cmpeq	r2, r8
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80004c6:	4683      	mov	fp, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
 80004c8:	d320      	bcc.n	800050c <pwm_pin_set_usec.constprop.0+0x8c>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 80004ca:	9b03      	ldr	r3, [sp, #12]
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <pwm_pin_set_usec.constprop.0+0x94>)
 80004ce:	fba7 4504 	umull	r4, r5, r7, r4
 80004d2:	fb07 5503 	mla	r5, r7, r3, r5
 80004d6:	4620      	mov	r0, r4
 80004d8:	2300      	movs	r3, #0
 80004da:	4629      	mov	r1, r5
 80004dc:	f7ff fe54 	bl	8000188 <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <pwm_pin_set_usec.constprop.0+0x98>)
 80004e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004e6:	42aa      	cmp	r2, r5
 80004e8:	bf08      	it	eq
 80004ea:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 80004ec:	4603      	mov	r3, r0
	if (pulse_cycles >= ((u64_t)1 << 32)) {
 80004ee:	d30d      	bcc.n	800050c <pwm_pin_set_usec.constprop.0+0x8c>
	return api->pin_set(dev, pwm, period, pulse, flags);
 80004f0:	6872      	ldr	r2, [r6, #4]
 80004f2:	9902      	ldr	r1, [sp, #8]
 80004f4:	9100      	str	r1, [sp, #0]
 80004f6:	6814      	ldr	r4, [r2, #0]
 80004f8:	4651      	mov	r1, sl
 80004fa:	465a      	mov	r2, fp
 80004fc:	4630      	mov	r0, r6
 80004fe:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (u32_t)period_cycles,
				  (u32_t)pulse_cycles, flags);
}
 8000500:	b007      	add	sp, #28
 8000502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
 8000506:	f06f 0004 	mvn.w	r0, #4
 800050a:	e7f9      	b.n	8000500 <pwm_pin_set_usec.constprop.0+0x80>
		return -ENOTSUP;
 800050c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000510:	e7f6      	b.n	8000500 <pwm_pin_set_usec.constprop.0+0x80>
 8000512:	bf00      	nop
 8000514:	000f4240 	.word	0x000f4240
 8000518:	000f423f 	.word	0x000f423f

0800051c <gpio_init>:
struct device *gpio_engine_dev;
struct device *gpio_sonic_sensor_dev;
struct device *gpio_transceiver_dev;
struct device *pwm2_dev, *pwm3_dev;

uint8_t gpio_init(void){
 800051c:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 800051e:	4810      	ldr	r0, [pc, #64]	; (8000560 <gpio_init+0x44>)
	uint8_t ret = 0;
	gpio_engine_dev = device_get_binding(ENGINE_PORT);
 8000520:	4c10      	ldr	r4, [pc, #64]	; (8000564 <gpio_init+0x48>)
 8000522:	f001 fc49 	bl	8001db8 <z_impl_device_get_binding>
 8000526:	6020      	str	r0, [r4, #0]
	if (gpio_engine_dev == NULL) {
 8000528:	b1c0      	cbz	r0, 800055c <gpio_init+0x40>
		return 1;
	}

	/* Engines IN1 - IN4 pins cofiguration */
	gpio_pin_configure(gpio_engine_dev, IN1_PIN, GPIO_OUTPUT_ACTIVE   | FLAGS);
 800052a:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 800052e:	2105      	movs	r1, #5
 8000530:	f002 f9b6 	bl	80028a0 <gpio_pin_configure>
	gpio_pin_configure(gpio_engine_dev, IN2_PIN, GPIO_OUTPUT_INACTIVE | FLAGS);
 8000534:	f44f 52b0 	mov.w	r2, #5632	; 0x1600
 8000538:	2102      	movs	r1, #2
 800053a:	6820      	ldr	r0, [r4, #0]
 800053c:	f002 f9b0 	bl	80028a0 <gpio_pin_configure>
	gpio_pin_configure(gpio_engine_dev, IN3_PIN, GPIO_OUTPUT_ACTIVE   | FLAGS);
 8000540:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 8000544:	2103      	movs	r1, #3
 8000546:	6820      	ldr	r0, [r4, #0]
 8000548:	f002 f9aa 	bl	80028a0 <gpio_pin_configure>
	gpio_pin_configure(gpio_engine_dev, IN4_PIN, GPIO_OUTPUT_INACTIVE | FLAGS);
 800054c:	6820      	ldr	r0, [r4, #0]
 800054e:	f44f 52b0 	mov.w	r2, #5632	; 0x1600
 8000552:	2104      	movs	r1, #4
 8000554:	f002 f9a4 	bl	80028a0 <gpio_pin_configure>

	return ret;
 8000558:	2000      	movs	r0, #0
}
 800055a:	bd10      	pop	{r4, pc}
		return 1;
 800055c:	2001      	movs	r0, #1
 800055e:	e7fc      	b.n	800055a <gpio_init+0x3e>
 8000560:	080038c6 	.word	0x080038c6
 8000564:	20000008 	.word	0x20000008

08000568 <main>:
	return ret;
}


void main(void)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
	gpio_init();
 800056a:	f7ff ffd7 	bl	800051c <gpio_init>
 800056e:	4813      	ldr	r0, [pc, #76]	; (80005bc <main+0x54>)
	pwm2_dev = device_get_binding(DT_ALIAS_PWM_2_LABEL);
 8000570:	4d13      	ldr	r5, [pc, #76]	; (80005c0 <main+0x58>)
 8000572:	f001 fc21 	bl	8001db8 <z_impl_device_get_binding>
	int fill = 500;
 8000576:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
	pwm2_dev = device_get_binding(DT_ALIAS_PWM_2_LABEL);
 800057a:	6028      	str	r0, [r5, #0]
	
	while (1) {
		pwm_pin_set_usec(pwm2_dev, 1, PERIOD, fill, 0);
 800057c:	4622      	mov	r2, r4
 800057e:	2101      	movs	r1, #1
 8000580:	6828      	ldr	r0, [r5, #0]
 8000582:	f7ff ff7d 	bl	8000480 <pwm_pin_set_usec.constprop.0>
		pwm_pin_set_usec(pwm2_dev, 2, PERIOD, fill, 0);
 8000586:	6828      	ldr	r0, [r5, #0]
 8000588:	4622      	mov	r2, r4
 800058a:	2102      	movs	r1, #2
 800058c:	f7ff ff78 	bl	8000480 <pwm_pin_set_usec.constprop.0>
		if (fill < 2040) {
 8000590:	f5b4 6fff 	cmp.w	r4, #2040	; 0x7f8
 8000594:	da05      	bge.n	80005a2 <main+0x3a>
			fill += STEP;
 8000596:	3401      	adds	r4, #1
		parm0.val = timeout;
		return (s32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000598:	2100      	movs	r1, #0
 800059a:	2014      	movs	r0, #20
 800059c:	f001 ffb6 	bl	800250c <z_impl_k_sleep>
	while (1) {
 80005a0:	e7ec      	b.n	800057c <main+0x14>
		} else {
			pwm_pin_set_usec(pwm2_dev, 1, PERIOD, 0, 0);
 80005a2:	6828      	ldr	r0, [r5, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	f7ff ff6a 	bl	8000480 <pwm_pin_set_usec.constprop.0>
 80005ac:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80005b0:	2100      	movs	r1, #0
 80005b2:	f001 ffab 	bl	800250c <z_impl_k_sleep>
			k_sleep(K_MSEC(800));
			fill = 0;
 80005b6:	2400      	movs	r4, #0
 80005b8:	e7ee      	b.n	8000598 <main+0x30>
 80005ba:	bf00      	nop
 80005bc:	080038cc 	.word	0x080038cc
 80005c0:	2000000c 	.word	0x2000000c

080005c4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80005c4:	680b      	ldr	r3, [r1, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80005ca:	4b01      	ldr	r3, [pc, #4]	; (80005d0 <char_out+0xc>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4718      	bx	r3
 80005d0:	20001068 	.word	0x20001068

080005d4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 80005d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005d8:	b085      	sub	sp, #20
 80005da:	469b      	mov	fp, r3
 80005dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80005de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8000670 <_printk_dec_ulong+0x9c>
 80005e2:	2c01      	cmp	r4, #1
 80005e4:	bfb8      	it	lt
 80005e6:	2401      	movlt	r4, #1
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	bf0c      	ite	eq
 80005ec:	2330      	moveq	r3, #48	; 0x30
 80005ee:	2320      	movne	r3, #32
 80005f0:	4615      	mov	r5, r2
 80005f2:	4606      	mov	r6, r0
 80005f4:	468a      	mov	sl, r1
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	2701      	movs	r7, #1
 80005fa:	f04f 080a 	mov.w	r8, #10
 80005fe:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 8000600:	fbb5 f3f9 	udiv	r3, r5, r9
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	b90a      	cbnz	r2, 800060c <_printk_dec_ulong+0x38>
 8000608:	45a9      	cmp	r9, r5
 800060a:	d81f      	bhi.n	800064c <_printk_dec_ulong+0x78>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 800060c:	9b01      	ldr	r3, [sp, #4]
 800060e:	4651      	mov	r1, sl
 8000610:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000614:	47b0      	blx	r6
			digits++;
 8000616:	3701      	adds	r7, #1
			found_largest_digit = 1;
 8000618:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 800061a:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 800061c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
 8000620:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
 8000624:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
 8000628:	f04f 030a 	mov.w	r3, #10
 800062c:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 8000630:	d1e6      	bne.n	8000600 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
 8000632:	4651      	mov	r1, sl
 8000634:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000638:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
 800063a:	f1bb 0f03 	cmp.w	fp, #3
 800063e:	d102      	bne.n	8000646 <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
 8000640:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
 8000642:	2c00      	cmp	r4, #0
 8000644:	dc0e      	bgt.n	8000664 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
 8000646:	b005      	add	sp, #20
 8000648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 800064c:	4544      	cmp	r4, r8
 800064e:	dbe4      	blt.n	800061a <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
 8000650:	f1bb 0f02 	cmp.w	fp, #2
 8000654:	d8e1      	bhi.n	800061a <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000656:	9802      	ldr	r0, [sp, #8]
 8000658:	9203      	str	r2, [sp, #12]
 800065a:	4651      	mov	r1, sl
 800065c:	47b0      	blx	r6
			digits++;
 800065e:	3701      	adds	r7, #1
 8000660:	9a03      	ldr	r2, [sp, #12]
 8000662:	e7da      	b.n	800061a <_printk_dec_ulong+0x46>
			out(' ', ctx);
 8000664:	4651      	mov	r1, sl
 8000666:	2020      	movs	r0, #32
 8000668:	47b0      	blx	r6
 800066a:	3c01      	subs	r4, #1
 800066c:	e7e9      	b.n	8000642 <_printk_dec_ulong+0x6e>
 800066e:	bf00      	nop
 8000670:	3b9aca00 	.word	0x3b9aca00

08000674 <__printk_hook_install>:
	_char_out = fn;
 8000674:	4b01      	ldr	r3, [pc, #4]	; (800067c <__printk_hook_install+0x8>)
 8000676:	6018      	str	r0, [r3, #0]
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20001068 	.word	0x20001068

08000680 <z_vprintk>:
{
 8000680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000684:	b08d      	sub	sp, #52	; 0x34
 8000686:	461c      	mov	r4, r3
	char length_mod = 0;
 8000688:	2700      	movs	r7, #0
 800068a:	1e53      	subs	r3, r2, #1
{
 800068c:	4605      	mov	r5, r0
 800068e:	468b      	mov	fp, r1
 8000690:	9303      	str	r3, [sp, #12]
	int min_width = -1;
 8000692:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 8000696:	46b8      	mov	r8, r7
			might_format = 0;
 8000698:	2600      	movs	r6, #0
					break;
 800069a:	e005      	b.n	80006a8 <z_vprintk+0x28>
		if (!might_format) {
 800069c:	b96e      	cbnz	r6, 80006ba <z_vprintk+0x3a>
			if (*fmt != '%') {
 800069e:	2825      	cmp	r0, #37	; 0x25
 80006a0:	f000 8171 	beq.w	8000986 <z_vprintk+0x306>
				out((int)*fmt, ctx);
 80006a4:	4659      	mov	r1, fp
 80006a6:	47a8      	blx	r5
	while (*fmt) {
 80006a8:	9b03      	ldr	r3, [sp, #12]
 80006aa:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80006ae:	9303      	str	r3, [sp, #12]
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d1f3      	bne.n	800069c <z_vprintk+0x1c>
}
 80006b4:	b00d      	add	sp, #52	; 0x34
 80006b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 80006ba:	287a      	cmp	r0, #122	; 0x7a
 80006bc:	d80a      	bhi.n	80006d4 <z_vprintk+0x54>
 80006be:	2862      	cmp	r0, #98	; 0x62
 80006c0:	d810      	bhi.n	80006e4 <z_vprintk+0x64>
 80006c2:	2830      	cmp	r0, #48	; 0x30
 80006c4:	d054      	beq.n	8000770 <z_vprintk+0xf0>
 80006c6:	d845      	bhi.n	8000754 <z_vprintk+0xd4>
 80006c8:	2825      	cmp	r0, #37	; 0x25
 80006ca:	f000 815a 	beq.w	8000982 <z_vprintk+0x302>
 80006ce:	282d      	cmp	r0, #45	; 0x2d
 80006d0:	f000 815f 	beq.w	8000992 <z_vprintk+0x312>
					out((int)'%', ctx);
 80006d4:	4659      	mov	r1, fp
 80006d6:	2025      	movs	r0, #37	; 0x25
 80006d8:	47a8      	blx	r5
					out((int)*fmt, ctx);
 80006da:	9b03      	ldr	r3, [sp, #12]
 80006dc:	7818      	ldrb	r0, [r3, #0]
 80006de:	4659      	mov	r1, fp
 80006e0:	47a8      	blx	r5
 80006e2:	e7d9      	b.n	8000698 <z_vprintk+0x18>
 80006e4:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 80006e8:	2b17      	cmp	r3, #23
 80006ea:	d8f3      	bhi.n	80006d4 <z_vprintk+0x54>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <z_vprintk+0x74>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800097b 	.word	0x0800097b
 80006f8:	080007bf 	.word	0x080007bf
 80006fc:	080006d5 	.word	0x080006d5
 8000700:	080006d5 	.word	0x080006d5
 8000704:	080006d5 	.word	0x080006d5
 8000708:	080007a1 	.word	0x080007a1
 800070c:	080007bf 	.word	0x080007bf
 8000710:	080006d5 	.word	0x080006d5
 8000714:	080006d5 	.word	0x080006d5
 8000718:	080007a1 	.word	0x080007a1
 800071c:	080006d5 	.word	0x080006d5
 8000720:	080006d5 	.word	0x080006d5
 8000724:	080006d5 	.word	0x080006d5
 8000728:	08000861 	.word	0x08000861
 800072c:	080006d5 	.word	0x080006d5
 8000730:	080006d5 	.word	0x080006d5
 8000734:	0800094b 	.word	0x0800094b
 8000738:	080006d5 	.word	0x080006d5
 800073c:	0800082f 	.word	0x0800082f
 8000740:	080006d5 	.word	0x080006d5
 8000744:	080006d5 	.word	0x080006d5
 8000748:	0800075d 	.word	0x0800075d
 800074c:	080006d5 	.word	0x080006d5
 8000750:	080007a1 	.word	0x080007a1
			switch (*fmt) {
 8000754:	2839      	cmp	r0, #57	; 0x39
 8000756:	d91a      	bls.n	800078e <z_vprintk+0x10e>
 8000758:	2858      	cmp	r0, #88	; 0x58
 800075a:	d1bb      	bne.n	80006d4 <z_vprintk+0x54>
				if (*fmt == 'p') {
 800075c:	9b03      	ldr	r3, [sp, #12]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b70      	cmp	r3, #112	; 0x70
 8000762:	f040 8088 	bne.w	8000876 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
 8000766:	f854 3b04 	ldr.w	r3, [r4], #4
 800076a:	9306      	str	r3, [sp, #24]
 800076c:	2200      	movs	r2, #0
 800076e:	e090      	b.n	8000892 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
 8000770:	f1b9 0f00 	cmp.w	r9, #0
 8000774:	da0e      	bge.n	8000794 <z_vprintk+0x114>
 8000776:	f1b8 0f00 	cmp.w	r8, #0
 800077a:	f000 810d 	beq.w	8000998 <z_vprintk+0x318>
					min_width = *fmt - '0';
 800077e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8000782:	f1b8 0f00 	cmp.w	r8, #0
 8000786:	bf08      	it	eq
 8000788:	f04f 0802 	moveq.w	r8, #2
 800078c:	e78c      	b.n	80006a8 <z_vprintk+0x28>
				if (min_width < 0) {
 800078e:	f1b9 0f00 	cmp.w	r9, #0
 8000792:	dbf4      	blt.n	800077e <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
 8000794:	230a      	movs	r3, #10
 8000796:	fb03 0909 	mla	r9, r3, r9, r0
 800079a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 800079e:	e7f0      	b.n	8000782 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
 80007a0:	2868      	cmp	r0, #104	; 0x68
 80007a2:	d103      	bne.n	80007ac <z_vprintk+0x12c>
 80007a4:	2f68      	cmp	r7, #104	; 0x68
 80007a6:	d106      	bne.n	80007b6 <z_vprintk+0x136>
					length_mod = 'H';
 80007a8:	2748      	movs	r7, #72	; 0x48
 80007aa:	e77d      	b.n	80006a8 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
 80007ac:	286c      	cmp	r0, #108	; 0x6c
 80007ae:	d102      	bne.n	80007b6 <z_vprintk+0x136>
 80007b0:	2f6c      	cmp	r7, #108	; 0x6c
 80007b2:	f000 80f4 	beq.w	800099e <z_vprintk+0x31e>
				} else if (length_mod == 0) {
 80007b6:	2f00      	cmp	r7, #0
 80007b8:	d18c      	bne.n	80006d4 <z_vprintk+0x54>
 80007ba:	4607      	mov	r7, r0
 80007bc:	e774      	b.n	80006a8 <z_vprintk+0x28>
				if (length_mod == 'z') {
 80007be:	2f7a      	cmp	r7, #122	; 0x7a
 80007c0:	d102      	bne.n	80007c8 <z_vprintk+0x148>
					d = va_arg(ap, int);
 80007c2:	f854 6b04 	ldr.w	r6, [r4], #4
 80007c6:	e021      	b.n	800080c <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
 80007c8:	2f6c      	cmp	r7, #108	; 0x6c
 80007ca:	d0fa      	beq.n	80007c2 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
 80007cc:	2f4c      	cmp	r7, #76	; 0x4c
 80007ce:	d1f8      	bne.n	80007c2 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
 80007d0:	3407      	adds	r4, #7
 80007d2:	f024 0407 	bic.w	r4, r4, #7
 80007d6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80007da:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
 80007de:	9b04      	ldr	r3, [sp, #16]
 80007e0:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
 80007e4:	9b05      	ldr	r3, [sp, #20]
 80007e6:	9108      	str	r1, [sp, #32]
 80007e8:	f143 0100 	adc.w	r1, r3, #0
 80007ec:	9109      	str	r1, [sp, #36]	; 0x24
 80007ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80007f2:	2100      	movs	r1, #0
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007f8:	4299      	cmp	r1, r3
 80007fa:	bf08      	it	eq
 80007fc:	4290      	cmpeq	r0, r2
 80007fe:	d204      	bcs.n	800080a <z_vprintk+0x18a>
						print_err(out, ctx);
 8000800:	4659      	mov	r1, fp
 8000802:	4628      	mov	r0, r5
 8000804:	f002 f85d 	bl	80028c2 <print_err>
						break;
 8000808:	e746      	b.n	8000698 <z_vprintk+0x18>
					d = lld;
 800080a:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
 800080c:	2e00      	cmp	r6, #0
 800080e:	da05      	bge.n	800081c <z_vprintk+0x19c>
					out((int)'-', ctx);
 8000810:	4659      	mov	r1, fp
 8000812:	202d      	movs	r0, #45	; 0x2d
 8000814:	47a8      	blx	r5
					d = -d;
 8000816:	4276      	negs	r6, r6
					min_width--;
 8000818:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 800081c:	f8cd 9000 	str.w	r9, [sp]
 8000820:	4643      	mov	r3, r8
 8000822:	4632      	mov	r2, r6
				_printk_dec_ulong(out, ctx, u, padding,
 8000824:	4659      	mov	r1, fp
 8000826:	4628      	mov	r0, r5
 8000828:	f7ff fed4 	bl	80005d4 <_printk_dec_ulong>
				break;
 800082c:	e734      	b.n	8000698 <z_vprintk+0x18>
				if (length_mod == 'z') {
 800082e:	2f7a      	cmp	r7, #122	; 0x7a
 8000830:	d102      	bne.n	8000838 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
 8000832:	f854 2b04 	ldr.w	r2, [r4], #4
 8000836:	e00f      	b.n	8000858 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
 8000838:	2f6c      	cmp	r7, #108	; 0x6c
 800083a:	d0fa      	beq.n	8000832 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
 800083c:	2f4c      	cmp	r7, #76	; 0x4c
 800083e:	d1f8      	bne.n	8000832 <z_vprintk+0x1b2>
					unsigned long long llu =
 8000840:	3407      	adds	r4, #7
 8000842:	f024 0407 	bic.w	r4, r4, #7
 8000846:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 800084a:	2100      	movs	r1, #0
 800084c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000850:	4299      	cmp	r1, r3
 8000852:	bf08      	it	eq
 8000854:	4290      	cmpeq	r0, r2
 8000856:	d3d3      	bcc.n	8000800 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
 8000858:	f8cd 9000 	str.w	r9, [sp]
 800085c:	4643      	mov	r3, r8
 800085e:	e7e1      	b.n	8000824 <z_vprintk+0x1a4>
				out('0', ctx);
 8000860:	4659      	mov	r1, fp
 8000862:	2030      	movs	r0, #48	; 0x30
 8000864:	47a8      	blx	r5
				out('x', ctx);
 8000866:	4659      	mov	r1, fp
 8000868:	2078      	movs	r0, #120	; 0x78
 800086a:	47a8      	blx	r5
					min_width = 8;
 800086c:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
 8000870:	f04f 0801 	mov.w	r8, #1
 8000874:	e772      	b.n	800075c <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
 8000876:	2f6c      	cmp	r7, #108	; 0x6c
 8000878:	f43f af75 	beq.w	8000766 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
 800087c:	2f4c      	cmp	r7, #76	; 0x4c
 800087e:	f47f af72 	bne.w	8000766 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
 8000882:	1de3      	adds	r3, r4, #7
 8000884:	f023 0307 	bic.w	r3, r3, #7
 8000888:	461c      	mov	r4, r3
 800088a:	f854 2b08 	ldr.w	r2, [r4], #8
 800088e:	9206      	str	r2, [sp, #24]
 8000890:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
 8000892:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 8000894:	2310      	movs	r3, #16
	int digits = 0;
 8000896:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
 8000898:	9107      	str	r1, [sp, #28]
	int shift = sizeof(num) * 8;
 800089a:	f04f 0a40 	mov.w	sl, #64	; 0x40
		shift -= 4;
 800089e:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
 80008a2:	9906      	ldr	r1, [sp, #24]
 80008a4:	f1ca 0e20 	rsb	lr, sl, #32
 80008a8:	f1aa 0c20 	sub.w	ip, sl, #32
 80008ac:	fa21 f00a 	lsr.w	r0, r1, sl
 80008b0:	fa02 fe0e 	lsl.w	lr, r2, lr
 80008b4:	ea40 000e 	orr.w	r0, r0, lr
 80008b8:	fa22 fc0c 	lsr.w	ip, r2, ip
 80008bc:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 80008c0:	f010 000f 	ands.w	r0, r0, #15
 80008c4:	d107      	bne.n	80008d6 <z_vprintk+0x256>
 80008c6:	9907      	ldr	r1, [sp, #28]
 80008c8:	b911      	cbnz	r1, 80008d0 <z_vprintk+0x250>
 80008ca:	f1ba 0f00 	cmp.w	sl, #0
 80008ce:	d125      	bne.n	800091c <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
 80008d0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80008d4:	e005      	b.n	80008e2 <z_vprintk+0x262>
 80008d6:	2809      	cmp	r0, #9
 80008d8:	bf8c      	ite	hi
 80008da:	f04f 0c57 	movhi.w	ip, #87	; 0x57
 80008de:	f04f 0c30 	movls.w	ip, #48	; 0x30
 80008e2:	4460      	add	r0, ip
			out((int)nibble, ctx);
 80008e4:	4659      	mov	r1, fp
 80008e6:	b240      	sxtb	r0, r0
 80008e8:	920a      	str	r2, [sp, #40]	; 0x28
 80008ea:	9307      	str	r3, [sp, #28]
 80008ec:	47a8      	blx	r5
			digits++;
 80008ee:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
 80008f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
 80008f2:	3301      	adds	r3, #1
 80008f4:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
 80008f6:	9b07      	ldr	r3, [sp, #28]
 80008f8:	f1ba 0f00 	cmp.w	sl, #0
 80008fc:	d123      	bne.n	8000946 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
 80008fe:	f1b8 0f03 	cmp.w	r8, #3
 8000902:	f47f aec9 	bne.w	8000698 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
 8000906:	9b04      	ldr	r3, [sp, #16]
 8000908:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
 800090c:	2e00      	cmp	r6, #0
 800090e:	f77f aec3 	ble.w	8000698 <z_vprintk+0x18>
			out(' ', ctx);
 8000912:	4659      	mov	r1, fp
 8000914:	2020      	movs	r0, #32
 8000916:	47a8      	blx	r5
 8000918:	3e01      	subs	r6, #1
 800091a:	e7f7      	b.n	800090c <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
 800091c:	1e59      	subs	r1, r3, #1
 800091e:	4599      	cmp	r9, r3
 8000920:	910a      	str	r1, [sp, #40]	; 0x28
 8000922:	db07      	blt.n	8000934 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
 8000924:	f1b8 0f01 	cmp.w	r8, #1
 8000928:	d106      	bne.n	8000938 <z_vprintk+0x2b8>
 800092a:	920b      	str	r2, [sp, #44]	; 0x2c
				out('0', ctx);
 800092c:	4659      	mov	r1, fp
 800092e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8000930:	47a8      	blx	r5
 8000932:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
 8000934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000936:	e7b2      	b.n	800089e <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
 8000938:	f1b8 0f02 	cmp.w	r8, #2
 800093c:	d1fa      	bne.n	8000934 <z_vprintk+0x2b4>
 800093e:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
 8000940:	4659      	mov	r1, fp
 8000942:	2020      	movs	r0, #32
 8000944:	e7f4      	b.n	8000930 <z_vprintk+0x2b0>
			found_largest_digit = 1;
 8000946:	9607      	str	r6, [sp, #28]
 8000948:	e7a9      	b.n	800089e <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
 800094a:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
 800094e:	46b2      	mov	sl, r6
 8000950:	4653      	mov	r3, sl
 8000952:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8000956:	b968      	cbnz	r0, 8000974 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
 8000958:	f1b8 0f03 	cmp.w	r8, #3
 800095c:	d121      	bne.n	80009a2 <z_vprintk+0x322>
					int remaining = min_width - (s - start);
 800095e:	1b9e      	subs	r6, r3, r6
 8000960:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
 8000964:	2e00      	cmp	r6, #0
 8000966:	f77f ae97 	ble.w	8000698 <z_vprintk+0x18>
						out(' ', ctx);
 800096a:	4659      	mov	r1, fp
 800096c:	2020      	movs	r0, #32
 800096e:	47a8      	blx	r5
 8000970:	3e01      	subs	r6, #1
 8000972:	e7f7      	b.n	8000964 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
 8000974:	4659      	mov	r1, fp
 8000976:	47a8      	blx	r5
 8000978:	e7ea      	b.n	8000950 <z_vprintk+0x2d0>
				out(c, ctx);
 800097a:	f854 0b04 	ldr.w	r0, [r4], #4
 800097e:	4659      	mov	r1, fp
 8000980:	e6ae      	b.n	80006e0 <z_vprintk+0x60>
				out((int)'%', ctx);
 8000982:	4659      	mov	r1, fp
 8000984:	e6ac      	b.n	80006e0 <z_vprintk+0x60>
				length_mod = 0;
 8000986:	4637      	mov	r7, r6
				padding = PAD_NONE;
 8000988:	46b0      	mov	r8, r6
				min_width = -1;
 800098a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
 800098e:	2601      	movs	r6, #1
 8000990:	e68a      	b.n	80006a8 <z_vprintk+0x28>
			switch (*fmt) {
 8000992:	f04f 0803 	mov.w	r8, #3
 8000996:	e687      	b.n	80006a8 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
 8000998:	f04f 0801 	mov.w	r8, #1
 800099c:	e684      	b.n	80006a8 <z_vprintk+0x28>
					length_mod = 'L';
 800099e:	274c      	movs	r7, #76	; 0x4c
 80009a0:	e682      	b.n	80006a8 <z_vprintk+0x28>
			might_format = 0;
 80009a2:	4606      	mov	r6, r0
		++fmt;
 80009a4:	e680      	b.n	80006a8 <z_vprintk+0x28>
 80009a6:	bf00      	nop

080009a8 <vprintk>:
{
 80009a8:	b507      	push	{r0, r1, r2, lr}
 80009aa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80009ac:	2100      	movs	r1, #0
{
 80009ae:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 80009b0:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <vprintk+0x18>)
 80009b4:	a901      	add	r1, sp, #4
 80009b6:	f7ff fe63 	bl	8000680 <z_vprintk>
}
 80009ba:	b003      	add	sp, #12
 80009bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80009c0:	080005c5 	.word	0x080005c5

080009c4 <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 80009c4:	f04f 0210 	mov.w	r2, #16
 80009c8:	f3ef 8311 	mrs	r3, BASEPRI
 80009cc:	f382 8811 	msr	BASEPRI, r2
 80009d0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80009d4:	f383 8811 	msr	BASEPRI, r3
 80009d8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <st_stm32f4_init+0x24>)
 80009de:	4a03      	ldr	r2, [pc, #12]	; (80009ec <st_stm32f4_init+0x28>)
 80009e0:	601a      	str	r2, [r3, #0]

	return 0;
}
 80009e2:	2000      	movs	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20001094 	.word	0x20001094
 80009ec:	00f42400 	.word	0x00f42400

080009f0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 80009f0:	b510      	push	{r4, lr}
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
 80009f4:	4c07      	ldr	r4, [pc, #28]	; (8000a14 <uart_console_init+0x24>)
 80009f6:	f001 f9df 	bl	8001db8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <uart_console_init+0x28>)
 80009fc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 80009fe:	4620      	mov	r0, r4
 8000a00:	f000 fd6a 	bl	80014d8 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8000a04:	4620      	mov	r0, r4
 8000a06:	f7ff fe35 	bl	8000674 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	bd10      	pop	{r4, pc}
 8000a0e:	bf00      	nop
 8000a10:	080038d2 	.word	0x080038d2
 8000a14:	08000a1d 	.word	0x08000a1d
 8000a18:	20000010 	.word	0x20000010

08000a1c <console_out>:
	if ('\n' == c) {
 8000a1c:	280a      	cmp	r0, #10
{
 8000a1e:	b538      	push	{r3, r4, r5, lr}
 8000a20:	4d07      	ldr	r5, [pc, #28]	; (8000a40 <console_out+0x24>)
 8000a22:	4604      	mov	r4, r0
	if ('\n' == c) {
 8000a24:	d104      	bne.n	8000a30 <console_out+0x14>
 8000a26:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
 8000a28:	6843      	ldr	r3, [r0, #4]
 8000a2a:	210d      	movs	r1, #13
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8000a30:	6828      	ldr	r0, [r5, #0]
 8000a32:	6843      	ldr	r3, [r0, #4]
 8000a34:	b2e1      	uxtb	r1, r4
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	4798      	blx	r3
}
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	bd38      	pop	{r3, r4, r5, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000010 	.word	0x20000010

08000a44 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 8000a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8000a48:	6896      	ldr	r6, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000a4a:	4f0d      	ldr	r7, [pc, #52]	; (8000a80 <__stm32_exti_isr+0x3c>)
{
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	460d      	mov	r5, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000a50:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8000a54:	f106 0904 	add.w	r9, r6, #4
	for (line = min; line < max; line++) {
 8000a58:	42ac      	cmp	r4, r5
 8000a5a:	db01      	blt.n	8000a60 <__stm32_exti_isr+0x1c>
		}
	}
}
 8000a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a60:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000a62:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8000a66:	ea33 0202 	bics.w	r2, r3, r2
 8000a6a:	d107      	bne.n	8000a7c <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000a6c:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8000a6e:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8000a72:	b11b      	cbz	r3, 8000a7c <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8000a74:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8000a78:	4620      	mov	r0, r4
 8000a7a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8000a7c:	3401      	adds	r4, #1
 8000a7e:	e7eb      	b.n	8000a58 <__stm32_exti_isr+0x14>
 8000a80:	40013c00 	.word	0x40013c00

08000a84 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8000a86:	2301      	movs	r3, #1
 8000a88:	6811      	ldr	r1, [r2, #0]
 8000a8a:	4083      	lsls	r3, r0
 8000a8c:	430b      	orrs	r3, r1
 8000a8e:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8000a90:	4b02      	ldr	r3, [pc, #8]	; (8000a9c <stm32_exti_enable+0x18>)
 8000a92:	5618      	ldrsb	r0, [r3, r0]
 8000a94:	f000 baa0 	b.w	8000fd8 <arch_irq_enable>
 8000a98:	40013c00 	.word	0x40013c00
 8000a9c:	080038e4 	.word	0x080038e4

08000aa0 <stm32_exti_disable>:
	if (line < 32) {
 8000aa0:	281f      	cmp	r0, #31
 8000aa2:	dc07      	bgt.n	8000ab4 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000aa4:	4904      	ldr	r1, [pc, #16]	; (8000ab8 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	680b      	ldr	r3, [r1, #0]
 8000aaa:	fa02 f000 	lsl.w	r0, r2, r0
 8000aae:	ea23 0000 	bic.w	r0, r3, r0
 8000ab2:	6008      	str	r0, [r1, #0]
}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40013c00 	.word	0x40013c00

08000abc <stm32_exti_trigger>:
	switch (trigger) {
 8000abc:	2903      	cmp	r1, #3
 8000abe:	d80f      	bhi.n	8000ae0 <stm32_exti_trigger+0x24>
 8000ac0:	e8df f001 	tbb	[pc, r1]
 8000ac4:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8000aca:	2201      	movs	r2, #1
 8000acc:	6899      	ldr	r1, [r3, #8]
 8000ace:	fa02 f000 	lsl.w	r0, r2, r0
 8000ad2:	ea21 0100 	bic.w	r1, r1, r0
 8000ad6:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000ade:	60d8      	str	r0, [r3, #12]
}
 8000ae0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <stm32_exti_trigger+0x64>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	4302      	orrs	r2, r0
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	e7f2      	b.n	8000ad8 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8000af2:	2301      	movs	r3, #1
 8000af4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <stm32_exti_trigger+0x64>)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	4302      	orrs	r2, r0
 8000afe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	ea22 0000 	bic.w	r0, r2, r0
 8000b06:	6098      	str	r0, [r3, #8]
}
 8000b08:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <stm32_exti_trigger+0x64>)
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	4302      	orrs	r2, r0
 8000b16:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	4310      	orrs	r0, r2
 8000b1c:	e7df      	b.n	8000ade <stm32_exti_trigger+0x22>
 8000b1e:	bf00      	nop
 8000b20:	40013c00 	.word	0x40013c00

08000b24 <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8000b24:	4603      	mov	r3, r0
 8000b26:	4807      	ldr	r0, [pc, #28]	; (8000b44 <stm32_exti_set_callback+0x20>)
 8000b28:	b530      	push	{r4, r5, lr}
 8000b2a:	6884      	ldr	r4, [r0, #8]
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 8000b2c:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 8000b30:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 8000b34:	b918      	cbnz	r0, 8000b3e <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8000b36:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	data->cb[line].data = arg;
 8000b3a:	606a      	str	r2, [r5, #4]

	return 0;
}
 8000b3c:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8000b3e:	f06f 000f 	mvn.w	r0, #15
 8000b42:	e7fb      	b.n	8000b3c <stm32_exti_set_callback+0x18>
 8000b44:	200010dc 	.word	0x200010dc

08000b48 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	data->cb[line].cb = NULL;
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <stm32_exti_unset_callback+0x14>)
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8000b50:	2300      	movs	r3, #0
 8000b52:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 8000b56:	604b      	str	r3, [r1, #4]
}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200010dc 	.word	0x200010dc

08000b60 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000b60:	680b      	ldr	r3, [r1, #0]
{
 8000b62:	b084      	sub	sp, #16
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d82d      	bhi.n	8000bc4 <stm32_clock_control_on+0x64>
 8000b68:	e8df f003 	tbb	[pc, r3]
 8000b6c:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b70:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8000b72:	684b      	ldr	r3, [r1, #4]
 8000b74:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000b76:	4319      	orrs	r1, r3
 8000b78:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000b80:	9b00      	ldr	r3, [sp, #0]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000b82:	2000      	movs	r0, #0
}
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b88:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8000b8a:	684b      	ldr	r3, [r1, #4]
 8000b8c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000b8e:	4319      	orrs	r1, r3
 8000b90:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b94:	4013      	ands	r3, r2
 8000b96:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000b98:	9b01      	ldr	r3, [sp, #4]
 8000b9a:	e7f2      	b.n	8000b82 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8000b9e:	684b      	ldr	r3, [r1, #4]
 8000ba0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ba2:	4319      	orrs	r1, r3
 8000ba4:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ba6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ba8:	4013      	ands	r3, r2
 8000baa:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000bac:	9b02      	ldr	r3, [sp, #8]
 8000bae:	e7e8      	b.n	8000b82 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8000bb2:	684b      	ldr	r3, [r1, #4]
 8000bb4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000bb6:	4319      	orrs	r1, r3
 8000bb8:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000bc0:	9b03      	ldr	r3, [sp, #12]
 8000bc2:	e7de      	b.n	8000b82 <stm32_clock_control_on+0x22>
	switch (pclken->bus) {
 8000bc4:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000bc8:	e7dc      	b.n	8000b84 <stm32_clock_control_on+0x24>
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000bd0:	680b      	ldr	r3, [r1, #0]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d820      	bhi.n	8000c18 <stm32_clock_control_off+0x48>
 8000bd6:	e8df f003 	tbb	[pc, r3]
 8000bda:	0a02      	.short	0x0a02
 8000bdc:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <stm32_clock_control_off+0x50>)
 8000be0:	6849      	ldr	r1, [r1, #4]
 8000be2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000be4:	ea23 0301 	bic.w	r3, r3, r1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000bea:	2000      	movs	r0, #0
}
 8000bec:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000bee:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <stm32_clock_control_off+0x50>)
 8000bf0:	6849      	ldr	r1, [r1, #4]
 8000bf2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000bf4:	ea23 0301 	bic.w	r3, r3, r1
 8000bf8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bfa:	e7f6      	b.n	8000bea <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <stm32_clock_control_off+0x50>)
 8000bfe:	6849      	ldr	r1, [r1, #4]
 8000c00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c02:	ea23 0301 	bic.w	r3, r3, r1
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	e7ef      	b.n	8000bea <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <stm32_clock_control_off+0x50>)
 8000c0c:	6849      	ldr	r1, [r1, #4]
 8000c0e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000c10:	ea23 0301 	bic.w	r3, r3, r1
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	e7e8      	b.n	8000bea <stm32_clock_control_off+0x1a>
	switch (pclken->bus) {
 8000c18:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <stm32_clock_control_get_subsys_rate>:
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8000c24:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <stm32_clock_control_get_subsys_rate+0x24>)
	switch (pclken->bus) {
 8000c28:	2902      	cmp	r1, #2
	u32_t ahb_clock = SystemCoreClock;
 8000c2a:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 8000c2c:	d005      	beq.n	8000c3a <stm32_clock_control_get_subsys_rate+0x16>
 8000c2e:	d905      	bls.n	8000c3c <stm32_clock_control_get_subsys_rate+0x18>
 8000c30:	2903      	cmp	r1, #3
 8000c32:	d006      	beq.n	8000c42 <stm32_clock_control_get_subsys_rate+0x1e>
 8000c34:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000c38:	4770      	bx	lr
	return clock / prescaler;
 8000c3a:	089b      	lsrs	r3, r3, #2
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8000c3c:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000c3e:	2000      	movs	r0, #0
}
 8000c40:	4770      	bx	lr
	return clock / prescaler;
 8000c42:	085b      	lsrs	r3, r3, #1
 8000c44:	e7fa      	b.n	8000c3c <stm32_clock_control_get_subsys_rate+0x18>
 8000c46:	bf00      	nop
 8000c48:	20001094 	.word	0x20001094

08000c4c <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8000c4c:	b530      	push	{r4, r5, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000c4e:	2100      	movs	r1, #0
{
 8000c50:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000c52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c56:	e9cd 1300 	strd	r1, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 8000c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c5e:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8000c60:	f000 f838 	bl	8000cd4 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8000c64:	a803      	add	r0, sp, #12
 8000c66:	f001 ff6d 	bl	8002b44 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <stm32_clock_control_init+0x80>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8000c6e:	0790      	lsls	r0, r2, #30
 8000c70:	d406      	bmi.n	8000c80 <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	f042 0201 	orr.w	r2, r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000c7a:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8000c7c:	0792      	lsls	r2, r2, #30
 8000c7e:	d5fc      	bpl.n	8000c7a <stm32_clock_control_init+0x2e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c80:	4c12      	ldr	r4, [pc, #72]	; (8000ccc <stm32_clock_control_init+0x80>)
 8000c82:	68a3      	ldr	r3, [r4, #8]
 8000c84:	f023 0303 	bic.w	r3, r3, #3
 8000c88:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c8a:	68a3      	ldr	r3, [r4, #8]
 8000c8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c90:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c92:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8000c94:	f015 050c 	ands.w	r5, r5, #12
 8000c98:	d1fb      	bne.n	8000c92 <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000c9a:	6823      	ldr	r3, [r4, #0]
	} else {
		hse_bypass = LL_UTILS_HSEBYPASS_OFF;
	}

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <stm32_clock_control_init+0x84>)
 8000c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ca2:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8000ca4:	6863      	ldr	r3, [r4, #4]
 8000ca6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000caa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cae:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8000cb0:	aa03      	add	r2, sp, #12
 8000cb2:	466b      	mov	r3, sp
 8000cb4:	4629      	mov	r1, r5
 8000cb6:	f001 f81f 	bl	8001cf8 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8000cc2:	f001 ff47 	bl	8002b54 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	b007      	add	sp, #28
 8000cca:	bd30      	pop	{r4, r5, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	007a1200 	.word	0x007a1200

08000cd4 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <config_enable_default_clocks+0x1c>)
 8000cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ce8:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8000cea:	b002      	add	sp, #8
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8000cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cf6:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8000cf8:	0906      	lsrs	r6, r0, #4
{
 8000cfa:	460d      	mov	r5, r1
	if (!clk) {
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	b912      	cbnz	r2, 8000d06 <z_pinmux_stm32_set+0x12>
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <z_pinmux_stm32_set+0x54>)
 8000d02:	f001 f859 	bl	8001db8 <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8000d06:	2300      	movs	r3, #0
 8000d08:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <z_pinmux_stm32_set+0x58>)
 8000d0c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8000d10:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8000d12:	3301      	adds	r3, #1
 8000d14:	d102      	bne.n	8000d1c <z_pinmux_stm32_set+0x28>
		return -EIO;
 8000d16:	f06f 0004 	mvn.w	r0, #4
 8000d1a:	e012      	b.n	8000d42 <z_pinmux_stm32_set+0x4e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 8000d1c:	6843      	ldr	r3, [r0, #4]
 8000d1e:	4669      	mov	r1, sp
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d1f6      	bne.n	8000d16 <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8000d28:	1120      	asrs	r0, r4, #4
 8000d2a:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 8000d2c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000d30:	f005 030f 	and.w	r3, r5, #15
 8000d34:	462a      	mov	r2, r5
 8000d36:	f004 010f 	and.w	r1, r4, #15
 8000d3a:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8000d3e:	f001 fffa 	bl	8002d36 <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8000d42:	b002      	add	sp, #8
 8000d44:	bd70      	pop	{r4, r5, r6, pc}
 8000d46:	bf00      	nop
 8000d48:	080038fb 	.word	0x080038fb
 8000d4c:	080036e8 	.word	0x080036e8

08000d50 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8000d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d52:	4604      	mov	r4, r0
 8000d54:	460d      	mov	r5, r1
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <stm32_setup_pins+0x2c>)
 8000d58:	f001 f82e 	bl	8001db8 <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	4607      	mov	r7, r0
 8000d60:	42ae      	cmp	r6, r5
 8000d62:	f104 0408 	add.w	r4, r4, #8
 8000d66:	d100      	bne.n	8000d6a <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8000d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8000d6a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000d6e:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8000d72:	463a      	mov	r2, r7
 8000d74:	f7ff ffbe 	bl	8000cf4 <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8000d78:	3601      	adds	r6, #1
 8000d7a:	e7f1      	b.n	8000d60 <stm32_setup_pins+0x10>
 8000d7c:	080038fb 	.word	0x080038fb

08000d80 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static u32_t elapsed(void)
{
	u32_t val1 = SysTick->VAL;	/* A */
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <elapsed+0x30>)
 8000d82:	689a      	ldr	r2, [r3, #8]
	u32_t ctrl = SysTick->CTRL;	/* B */
 8000d84:	6819      	ldr	r1, [r3, #0]
	u32_t val2 = SysTick->VAL;	/* C */
 8000d86:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <elapsed+0x34>)
 8000d8a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 8000d8e:	b510      	push	{r4, lr}
 8000d90:	4909      	ldr	r1, [pc, #36]	; (8000db8 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8000d92:	d101      	bne.n	8000d98 <elapsed+0x18>
	    || (val1 < val2)) {
 8000d94:	4282      	cmp	r2, r0
 8000d96:	d205      	bcs.n	8000da4 <elapsed+0x24>
		overflow_cyc += last_load;
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	680c      	ldr	r4, [r1, #0]
 8000d9c:	4422      	add	r2, r4
 8000d9e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <elapsed+0x30>)
 8000da2:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	680a      	ldr	r2, [r1, #0]
 8000da8:	4413      	add	r3, r2
}
 8000daa:	1a18      	subs	r0, r3, r0
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010
 8000db4:	200000d8 	.word	0x200000d8
 8000db8:	200000d4 	.word	0x200000d4

08000dbc <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8000dbc:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8000dbe:	f7ff ffdf 	bl	8000d80 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <z_clock_isr+0x38>)
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <z_clock_isr+0x3c>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	6811      	ldr	r1, [r2, #0]
 8000dca:	4408      	add	r0, r1
 8000dcc:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <z_clock_isr+0x40>)
 8000dd4:	6811      	ldr	r1, [r2, #0]
 8000dd6:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8000dda:	1a40      	subs	r0, r0, r1
 8000ddc:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8000de0:	fb03 1300 	mla	r3, r3, r0, r1
 8000de4:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 8000de6:	f001 fcdb 	bl	80027a0 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
}
 8000dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8000dee:	f000 ba87 	b.w	8001300 <z_arm_exc_exit>
 8000df2:	bf00      	nop
 8000df4:	200000d8 	.word	0x200000d8
 8000df8:	200000d0 	.word	0x200000d0
 8000dfc:	200000cc 	.word	0x200000cc

08000e00 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <z_clock_driver_init+0x28>)
 8000e02:	2210      	movs	r2, #16
 8000e04:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <z_clock_driver_init+0x2c>)
 8000e0a:	f244 129f 	movw	r2, #16799	; 0x419f
 8000e0e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <z_clock_driver_init+0x30>)
 8000e12:	2000      	movs	r0, #0
 8000e14:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <z_clock_driver_init+0x34>)
 8000e18:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000e1a:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	f042 0207 	orr.w	r2, r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	200000d4 	.word	0x200000d4
 8000e30:	200000d8 	.word	0x200000d8
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	4d2b      	ldr	r5, [pc, #172]	; (8000ee8 <z_clock_set_timeout+0xb0>)
 8000e3c:	4604      	mov	r4, r0
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 8000e3e:	b151      	cbz	r1, 8000e56 <z_clock_set_timeout+0x1e>
	    && ticks == K_TICKS_FOREVER) {
 8000e40:	1c43      	adds	r3, r0, #1
 8000e42:	d10e      	bne.n	8000e62 <z_clock_set_timeout+0x2a>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000e44:	4a29      	ldr	r2, [pc, #164]	; (8000eec <z_clock_set_timeout+0xb4>)
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8000e4e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000e52:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8000e56:	f240 33e5 	movw	r3, #997	; 0x3e5
 8000e5a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8000e5e:	bf08      	it	eq
 8000e60:	461c      	moveq	r4, r3
	__asm__ volatile(
 8000e62:	f04f 0310 	mov.w	r3, #16
 8000e66:	f3ef 8611 	mrs	r6, BASEPRI
 8000e6a:	f383 8811 	msr	BASEPRI, r3
 8000e6e:	f3bf 8f6f 	isb	sy
	u32_t pending = elapsed();
 8000e72:	f7ff ff85 	bl	8000d80 <elapsed>
	cycle_count += pending;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <z_clock_set_timeout+0xb8>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4410      	add	r0, r2
 8000e7c:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <z_clock_set_timeout+0xbc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
	u32_t unannounced = cycle_count - announced_cycles;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <z_clock_set_timeout+0xc0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
	if ((s32_t)unannounced < 0) {
 8000e88:	1ac2      	subs	r2, r0, r3
 8000e8a:	d50d      	bpl.n	8000ea8 <z_clock_set_timeout+0x70>
		last_load = MIN_DELAY;
 8000e8c:	f240 431a 	movw	r3, #1050	; 0x41a
			last_load = MAX_CYCLES;
 8000e90:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8000e92:	682b      	ldr	r3, [r5, #0]
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <z_clock_set_timeout+0xb4>)
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 8000e9e:	f386 8811 	msr	BASEPRI, r6
 8000ea2:	f3bf 8f6f 	isb	sy
 8000ea6:	e7d5      	b.n	8000e54 <z_clock_set_timeout+0x1c>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
 8000ea8:	3c01      	subs	r4, #1
		delay = ticks * CYC_PER_TICK;
 8000eaa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8000eae:	f240 31e5 	movw	r1, #997	; 0x3e5
 8000eb2:	428c      	cmp	r4, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000eb4:	f502 4283 	add.w	r2, r2, #16768	; 0x4180
		delay = ticks * CYC_PER_TICK;
 8000eb8:	bfa8      	it	ge
 8000eba:	460c      	movge	r4, r1
		delay -= unannounced;
 8000ebc:	1a18      	subs	r0, r3, r0
		delay = ticks * CYC_PER_TICK;
 8000ebe:	f244 11a0 	movw	r1, #16800	; 0x41a0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000ec2:	321f      	adds	r2, #31
 8000ec4:	fb01 2404 	mla	r4, r1, r4, r2
		delay = MAX(delay, MIN_DELAY);
 8000ec8:	f240 431a 	movw	r3, #1050	; 0x41a
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000ecc:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
 8000ed0:	fb01 0404 	mla	r4, r1, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8000ed4:	429c      	cmp	r4, r3
 8000ed6:	d904      	bls.n	8000ee2 <z_clock_set_timeout+0xaa>
		if (delay > MAX_CYCLES) {
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <z_clock_set_timeout+0xc4>)
 8000eda:	429c      	cmp	r4, r3
 8000edc:	d8d8      	bhi.n	8000e90 <z_clock_set_timeout+0x58>
			last_load = delay;
 8000ede:	602c      	str	r4, [r5, #0]
 8000ee0:	e7d7      	b.n	8000e92 <z_clock_set_timeout+0x5a>
		delay = MAX(delay, MIN_DELAY);
 8000ee2:	461c      	mov	r4, r3
 8000ee4:	e7fb      	b.n	8000ede <z_clock_set_timeout+0xa6>
 8000ee6:	bf00      	nop
 8000ee8:	200000d4 	.word	0x200000d4
 8000eec:	e000e010 	.word	0xe000e010
 8000ef0:	200000d0 	.word	0x200000d0
 8000ef4:	200000d8 	.word	0x200000d8
 8000ef8:	200000cc 	.word	0x200000cc
 8000efc:	00ff9420 	.word	0x00ff9420

08000f00 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 8000f00:	b510      	push	{r4, lr}
	__asm__ volatile(
 8000f02:	f04f 0310 	mov.w	r3, #16
 8000f06:	f3ef 8411 	mrs	r4, BASEPRI
 8000f0a:	f383 8811 	msr	BASEPRI, r3
 8000f0e:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 8000f12:	f7ff ff35 	bl	8000d80 <elapsed>
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <z_clock_elapsed+0x34>)
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <z_clock_elapsed+0x38>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	4403      	add	r3, r0
	__asm__ volatile(
 8000f22:	f384 8811 	msr	BASEPRI, r4
 8000f26:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8000f2a:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8000f2e:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f32:	bd10      	pop	{r4, pc}
 8000f34:	200000d0 	.word	0x200000d0
 8000f38:	200000cc 	.word	0x200000cc

08000f3c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8000f3c:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f3e:	490a      	ldr	r1, [pc, #40]	; (8000f68 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000f40:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000f46:	4909      	ldr	r1, [pc, #36]	; (8000f6c <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000f48:	66d8      	str	r0, [r3, #108]	; 0x6c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000f4a:	684b      	ldr	r3, [r1, #4]
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	604b      	str	r3, [r1, #4]
 8000f52:	2300      	movs	r3, #0
 8000f54:	f383 8811 	msr	BASEPRI, r3
 8000f58:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000f5c:	6893      	ldr	r3, [r2, #8]
}
 8000f5e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200002e4 	.word	0x200002e4
 8000f68:	080038bc 	.word	0x080038bc
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000f70:	490f      	ldr	r1, [pc, #60]	; (8000fb0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000f72:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000f74:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000f78:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000f7a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000f7e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000f82:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8000f84:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000f88:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000f8c:	4f09      	ldr	r7, [pc, #36]	; (8000fb4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000f8e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000f92:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8000f94:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000f96:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000f98:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
 8000f9a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000f9c:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000f9e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000fa2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000fa6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000faa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 8000fae:	4770      	bx	lr
    ldr r1, =_kernel
 8000fb0:	200002e4 	.word	0x200002e4
    ldr v4, =_SCS_ICSR
 8000fb4:	e000ed04 	.word	0xe000ed04

08000fb8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8000fb8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000fbc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000fbe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000fc2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000fc6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000fc8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000fcc:	2902      	cmp	r1, #2
    beq _oops
 8000fce:	d0ff      	beq.n	8000fd0 <_oops>

08000fd0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000fd0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8000fd2:	f001 fdc6 	bl	8002b62 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8000fd6:	bd01      	pop	{r0, pc}

08000fd8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000fd8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db08      	blt.n	8000ff0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f000 001f 	and.w	r0, r0, #31
 8000fe4:	fa02 f000 	lsl.w	r0, r2, r0
 8000fe8:	095b      	lsrs	r3, r3, #5
 8000fea:	4a02      	ldr	r2, [pc, #8]	; (8000ff4 <arch_irq_enable+0x1c>)
 8000fec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000ff8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	bfa8      	it	ge
 8000ffe:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8001002:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	bfb8      	it	lt
 8001008:	4b06      	ldrlt	r3, [pc, #24]	; (8001024 <z_arm_irq_priority_set+0x2c>)
 800100a:	ea4f 1101 	mov.w	r1, r1, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	bfac      	ite	ge
 8001010:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	f000 000f 	andlt.w	r0, r0, #15
 8001018:	b2c9      	uxtb	r1, r1
 800101a:	bfb4      	ite	lt
 800101c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8001022:	4770      	bx	lr
 8001024:	e000ed14 	.word	0xe000ed14

08001028 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
 8001028:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
 800102c:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
 800102e:	3a20      	subs	r2, #32
 8001030:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 8001034:	4908      	ldr	r1, [pc, #32]	; (8001058 <arch_new_thread+0x30>)
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
 8001036:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
 8001038:	9b00      	ldr	r3, [sp, #0]
 800103a:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 800103c:	9b01      	ldr	r3, [sp, #4]
 800103e:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 8001040:	9b02      	ldr	r3, [sp, #8]
 8001042:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
 8001044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001048:	61d3      	str	r3, [r2, #28]
	pInitCtx->basic.pc &= 0xfffffffe;
 800104a:	f021 0101 	bic.w	r1, r1, #1
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
 800104e:	2300      	movs	r3, #0
	pInitCtx->basic.pc &= 0xfffffffe;
 8001050:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (u32_t)pInitCtx;
 8001052:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8001054:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001056:	4770      	bx	lr
 8001058:	080028f9 	.word	0x080028f9

0800105c <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	4606      	mov	r6, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4617      	mov	r7, r2
 8001064:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8001066:	f000 f98b 	bl	8001380 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
 800106c:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
 800106e:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
 8001072:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001074:	4628      	mov	r0, r5
 8001076:	f384 8809 	msr	PSP, r4
 800107a:	2100      	movs	r1, #0
 800107c:	b663      	cpsie	if
 800107e:	f381 8811 	msr	BASEPRI, r1
 8001082:	f3bf 8f6f 	isb	sy
 8001086:	2200      	movs	r2, #0
 8001088:	2300      	movs	r3, #0
 800108a:	f001 fc35 	bl	80028f8 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 800108e:	bf00      	nop
 8001090:	200002e4 	.word	0x200002e4

08001094 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8001094:	4901      	ldr	r1, [pc, #4]	; (800109c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8001096:	2210      	movs	r2, #16
	str	r2, [r1]
 8001098:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 800109a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 800109c:	e000ed10 	.word	0xe000ed10

080010a0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80010a0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80010a2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80010a4:	f380 8811 	msr	BASEPRI, r0
	isb
 80010a8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 80010ac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 80010b0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80010b2:	b662      	cpsie	i
	isb
 80010b4:	f3bf 8f6f 	isb	sy

	bx	lr
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80010bc:	bf30      	wfi
    b z_SysNmiOnReset
 80010be:	f7ff bffd 	b.w	80010bc <z_SysNmiOnReset>
 80010c2:	bf00      	nop

080010c4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 80010c6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <z_arm_prep_c+0x40>)
 80010ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80010ce:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010d4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 80010d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80010dc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80010e4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80010e8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80010ec:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80010f0:	f000 fe88 	bl	8001e04 <z_bss_zero>
	z_data_copy();
 80010f4:	f000 fe9e 	bl	8001e34 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80010f8:	f000 f910 	bl	800131c <z_arm_interrupt_init>
	z_cstart();
 80010fc:	f000 fee4 	bl	8001ec8 <z_cstart>
 8001100:	08000000 	.word	0x08000000
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001108:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800110a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 800110e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001112:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8001116:	4904      	ldr	r1, [pc, #16]	; (8001128 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001118:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800111a:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 800111c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 800111e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001122:	4902      	ldr	r1, [pc, #8]	; (800112c <_isr_wrapper+0x24>)
	bx r1
 8001124:	4708      	bx	r1
 8001126:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001128:	08003354 	.word	0x08003354
	ldr r1, =z_arm_int_exit
 800112c:	08001301 	.word	0x08001301

08001130 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001130:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001132:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8001136:	4808      	ldr	r0, [pc, #32]	; (8001158 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 8001138:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 800113c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800113e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001142:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8001146:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001148:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800114a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800114e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001152:	f7ff ffb7 	bl	80010c4 <z_arm_prep_c>
 8001156:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001158:	20000868 	.word	0x20000868

0800115c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 800115c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001160:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
 8001164:	4672      	mov	r2, lr

	push {r0, lr}
 8001166:	b501      	push	{r0, lr}

	bl z_arm_fault
 8001168:	f000 f84e 	bl	8001208 <z_arm_fault>

	pop {r0, pc}
 800116c:	bd01      	pop	{r0, pc}
 800116e:	bf00      	nop

08001170 <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <mem_manage_fault.isra.0+0x34>)
 8001172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001178:	0792      	lsls	r2, r2, #30
 800117a:	d508      	bpl.n	800118e <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 800117c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800117e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001180:	0612      	lsls	r2, r2, #24
 8001182:	d504      	bpl.n	800118e <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 8001184:	b118      	cbz	r0, 800118e <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <mem_manage_fault.isra.0+0x34>)
 8001190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8001192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8001194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8001196:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 8001198:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800119a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 80011a0:	7008      	strb	r0, [r1, #0]

	return reason;
}
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <bus_fault.isra.0+0x38>)
 80011aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80011ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80011ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011b0:	0592      	lsls	r2, r2, #22
 80011b2:	d508      	bpl.n	80011c6 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 80011b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80011b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011b8:	0412      	lsls	r2, r2, #16
 80011ba:	d504      	bpl.n	80011c6 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 80011bc:	b118      	cbz	r0, 80011c6 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80011be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <bus_fault.isra.0+0x38>)
 80011c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80011ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011cc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80011ce:	bf58      	it	pl
 80011d0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80011d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 80011d4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80011d6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 80011dc:	7008      	strb	r0, [r1, #0]

	return reason;
}
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <usage_fault.isra.0+0x20>)
 80011e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80011e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80011ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80011ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80011ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 80011f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80011f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011f4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80011f8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 80011fe:	2000      	movs	r0, #0
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
 8001208:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <z_arm_fault+0xdc>)
 800120c:	685b      	ldr	r3, [r3, #4]
{
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001216:	2500      	movs	r5, #0
 8001218:	f385 8811 	msr	BASEPRI, r5
 800121c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001220:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8001224:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8001228:	d111      	bne.n	800124e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800122a:	f002 010c 	and.w	r1, r2, #12
 800122e:	2908      	cmp	r1, #8
 8001230:	d00d      	beq.n	800124e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001232:	0711      	lsls	r1, r2, #28
 8001234:	d401      	bmi.n	800123a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8001236:	4606      	mov	r6, r0
			*nested_exc = true;
 8001238:	2501      	movs	r5, #1
	*recoverable = false;
 800123a:	2200      	movs	r2, #0
 800123c:	3b03      	subs	r3, #3
 800123e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8001242:	2b03      	cmp	r3, #3
 8001244:	d847      	bhi.n	80012d6 <z_arm_fault+0xce>
 8001246:	e8df f003 	tbb	[pc, r3]
 800124a:	3e04      	.short	0x3e04
 800124c:	3b42      	.short	0x3b42
		return NULL;
 800124e:	462e      	mov	r6, r5
 8001250:	e7f3      	b.n	800123a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <z_arm_fault+0xdc>)
 8001254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001256:	0792      	lsls	r2, r2, #30
 8001258:	d43d      	bmi.n	80012d6 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800125a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800125c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001260:	d008      	beq.n	8001274 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
 8001262:	3328      	adds	r3, #40	; 0x28
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b1eb      	cbz	r3, 80012a4 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001268:	f10d 0107 	add.w	r1, sp, #7
 800126c:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800126e:	f7ff ff7f 	bl	8001170 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
 8001272:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8001274:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001278:	b993      	cbnz	r3, 80012a0 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800127a:	2220      	movs	r2, #32
 800127c:	4631      	mov	r1, r6
 800127e:	a802      	add	r0, sp, #8
 8001280:	f001 fc86 	bl	8002b90 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8001284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001286:	b345      	cbz	r5, 80012da <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8001288:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800128c:	b922      	cbnz	r2, 8001298 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800128e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001292:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8001296:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8001298:	a902      	add	r1, sp, #8
 800129a:	4620      	mov	r0, r4
 800129c:	f001 fc5f 	bl	8002b5e <z_arm_fatal_error>
}
 80012a0:	b00a      	add	sp, #40	; 0x28
 80012a2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <z_arm_fault+0xe0>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b12b      	cbz	r3, 80012b6 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
 80012aa:	f10d 0107 	add.w	r1, sp, #7
 80012ae:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80012b0:	f7ff ff7a 	bl	80011a8 <bus_fault.isra.0>
 80012b4:	e7dd      	b.n	8001272 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <z_arm_fault+0xe4>)
 80012b8:	8818      	ldrh	r0, [r3, #0]
 80012ba:	b284      	uxth	r4, r0
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d0d9      	beq.n	8001274 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
 80012c0:	f7ff ff90 	bl	80011e4 <usage_fault.isra.0>
 80012c4:	e7d5      	b.n	8001272 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
 80012c6:	f10d 0107 	add.w	r1, sp, #7
 80012ca:	2000      	movs	r0, #0
 80012cc:	e7cf      	b.n	800126e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 80012ce:	f10d 0107 	add.w	r1, sp, #7
 80012d2:	2000      	movs	r0, #0
 80012d4:	e7ec      	b.n	80012b0 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
 80012d6:	2400      	movs	r4, #0
 80012d8:	e7cc      	b.n	8001274 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80012da:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	e7d8      	b.n	8001296 <z_arm_fault+0x8e>
 80012e4:	e000ed00 	.word	0xe000ed00
 80012e8:	e000ed29 	.word	0xe000ed29
 80012ec:	e000ed2a 	.word	0xe000ed2a

080012f0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80012f0:	4a02      	ldr	r2, [pc, #8]	; (80012fc <z_arm_fault_init+0xc>)
 80012f2:	6953      	ldr	r3, [r2, #20]
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001302:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001304:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 8001306:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001308:	d003      	beq.n	8001312 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800130a:	4903      	ldr	r1, [pc, #12]	; (8001318 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 800130c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001310:	600a      	str	r2, [r1, #0]

08001312 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001312:	4770      	bx	lr
	ldr r3, =_kernel
 8001314:	200002e4 	.word	0x200002e4
	ldr r1, =_SCS_ICSR
 8001318:	e000ed04 	.word	0xe000ed04

0800131c <z_arm_interrupt_init>:
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	2110      	movs	r1, #16
 8001322:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001324:	3301      	adds	r3, #1
 8001326:	2b52      	cmp	r3, #82	; 0x52
 8001328:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 800132c:	d1f9      	bne.n	8001322 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100

08001334 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	4604      	mov	r4, r0
	__asm__ volatile(
 8001338:	f04f 0310 	mov.w	r3, #16
 800133c:	f3ef 8511 	mrs	r5, BASEPRI
 8001340:	f383 8811 	msr	BASEPRI, r3
 8001344:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 8001348:	f000 ffe8 	bl	800231c <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <z_impl_k_thread_abort+0x44>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	42a3      	cmp	r3, r4
 8001352:	d10b      	bne.n	800136c <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <z_impl_k_thread_abort+0x48>)
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800135c:	b912      	cbnz	r2, 8001364 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
 800135e:	4628      	mov	r0, r5
 8001360:	f7ff fdec 	bl	8000f3c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800136a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 800136c:	4628      	mov	r0, r5
}
 800136e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 8001372:	f001 bf1e 	b.w	80031b2 <z_reschedule_irqlock>
 8001376:	bf00      	nop
 8001378:	200002e4 	.word	0x200002e4
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8001380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <z_arm_configure_static_mpu_regions+0x24>)
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <z_arm_configure_static_mpu_regions+0x28>)
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <z_arm_configure_static_mpu_regions+0x2c>)
 800138c:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
 800138e:	ab01      	add	r3, sp, #4
 8001390:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <z_arm_configure_static_mpu_regions+0x30>)
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <z_arm_configure_static_mpu_regions+0x34>)
 8001396:	2101      	movs	r1, #1
 8001398:	4668      	mov	r0, sp
 800139a:	f000 f893 	bl	80014c4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 800139e:	b005      	add	sp, #20
 80013a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80013a4:	20000000 	.word	0x20000000
 80013a8:	00000000 	.word	0x00000000
 80013ac:	060b0000 	.word	0x060b0000
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20020000 	.word	0x20020000

080013b8 <mpu_configure_regions>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 80013b8:	f8df c084 	ldr.w	ip, [pc, #132]	; 8001440 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80013c0:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
 80013c2:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
 80013c4:	428f      	cmp	r7, r1
 80013c6:	db00      	blt.n	80013ca <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
 80013ca:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
 80013ce:	f8de 4004 	ldr.w	r4, [lr, #4]
 80013d2:	b394      	cbz	r4, 800143a <mpu_configure_regions+0x82>
		if (do_sanity_check &&
 80013d4:	b143      	cbz	r3, 80013e8 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
 80013d6:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80013d8:	422c      	tst	r4, r5
 80013da:	d119      	bne.n	8001410 <mpu_configure_regions+0x58>
		&&
 80013dc:	2c1f      	cmp	r4, #31
 80013de:	d917      	bls.n	8001410 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1)) == 0U);
 80013e0:	f8de 2000 	ldr.w	r2, [lr]
		&&
 80013e4:	4215      	tst	r5, r2
 80013e6:	d113      	bne.n	8001410 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80013e8:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
 80013ea:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
 80013ec:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
 80013f0:	f8de 0008 	ldr.w	r0, [lr, #8]
 80013f4:	d90f      	bls.n	8001416 <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 80013f6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80013fa:	d80e      	bhi.n	800141a <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80013fc:	3c01      	subs	r4, #1
 80013fe:	fab4 f484 	clz	r4, r4
 8001402:	f1c4 041f 	rsb	r4, r4, #31
 8001406:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
 8001408:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800140a:	ea44 0400 	orr.w	r4, r4, r0
 800140e:	d906      	bls.n	800141e <mpu_configure_regions+0x66>
			return -EINVAL;
 8001410:	f06f 0015 	mvn.w	r0, #21
 8001414:	e7d8      	b.n	80013c8 <mpu_configure_regions+0x10>
		return REGION_32B;
 8001416:	2408      	movs	r4, #8
 8001418:	e7f6      	b.n	8001408 <mpu_configure_regions+0x50>
		return REGION_4G;
 800141a:	243e      	movs	r4, #62	; 0x3e
 800141c:	e7f4      	b.n	8001408 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800141e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8001422:	4315      	orrs	r5, r2
 8001424:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001428:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 800142c:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
 8001430:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001432:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001436:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
 800143a:	3701      	adds	r7, #1
 800143c:	e7c2      	b.n	80013c4 <mpu_configure_regions+0xc>
 800143e:	bf00      	nop
 8001440:	e000ed90 	.word	0xe000ed90

08001444 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <arm_core_mpu_enable+0x10>)
 8001446:	2205      	movs	r2, #5
 8001448:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800144a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800144e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001452:	4770      	bx	lr
 8001454:	e000ed90 	.word	0xe000ed90

08001458 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001458:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 800145c:	4b01      	ldr	r3, [pc, #4]	; (8001464 <arm_core_mpu_disable+0xc>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
}
 8001462:	4770      	bx	lr
 8001464:	e000ed90 	.word	0xe000ed90

08001468 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8001468:	4913      	ldr	r1, [pc, #76]	; (80014b8 <arm_mpu_init+0x50>)
 800146a:	6808      	ldr	r0, [r1, #0]
 800146c:	2808      	cmp	r0, #8
{
 800146e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8001470:	d81e      	bhi.n	80014b0 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8001472:	f7ff fff1 	bl	8001458 <arm_core_mpu_disable>
	MPU->RNR = index;
 8001476:	4c11      	ldr	r4, [pc, #68]	; (80014bc <arm_mpu_init+0x54>)
 8001478:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800147a:	2200      	movs	r2, #0
 800147c:	4290      	cmp	r0, r2
 800147e:	f101 010c 	add.w	r1, r1, #12
 8001482:	d105      	bne.n	8001490 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <arm_mpu_init+0x58>)
 8001486:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8001488:	f7ff ffdc 	bl	8001444 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 800148c:	2000      	movs	r0, #0
}
 800148e:	bd10      	pop	{r4, pc}
 8001490:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001492:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8001496:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 800149a:	4313      	orrs	r3, r2
 800149c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80014a0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80014a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80014ac:	3201      	adds	r2, #1
 80014ae:	e7e5      	b.n	800147c <arm_mpu_init+0x14>
		return -1;
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b4:	e7eb      	b.n	800148e <arm_mpu_init+0x26>
 80014b6:	bf00      	nop
 80014b8:	08003714 	.word	0x08003714
 80014bc:	e000ed90 	.word	0xe000ed90
 80014c0:	20000320 	.word	0x20000320

080014c4 <arm_core_mpu_configure_static_mpu_regions>:
{
 80014c4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80014c6:	4c03      	ldr	r4, [pc, #12]	; (80014d4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80014c8:	2301      	movs	r3, #1
 80014ca:	7822      	ldrb	r2, [r4, #0]
 80014cc:	f7ff ff74 	bl	80013b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80014d0:	7020      	strb	r0, [r4, #0]
}
 80014d2:	bd10      	pop	{r4, pc}
 80014d4:	20000320 	.word	0x20000320

080014d8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80014d8:	4b01      	ldr	r3, [pc, #4]	; (80014e0 <__stdout_hook_install+0x8>)
 80014da:	6018      	str	r0, [r3, #0]
}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20001080 	.word	0x20001080

080014e4 <pinmux_stm32_init>:
	{STM32_PIN_PB13, STM32F4_PINMUX_FUNC_PB13_CAN2_TX},
#endif	/* CONFIG_CAN_2 */
};

static int pinmux_stm32_init(struct device *port)
{
 80014e4:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <pinmux_stm32_init+0x10>)
 80014e8:	2107      	movs	r1, #7
 80014ea:	f7ff fc31 	bl	8000d50 <stm32_setup_pins>

	return 0;
}
 80014ee:	2000      	movs	r0, #0
 80014f0:	bd08      	pop	{r3, pc}
 80014f2:	bf00      	nop
 80014f4:	08003734 	.word	0x08003734

080014f8 <gpio_stm32_pin_interrupt_configure>:
}

static int gpio_stm32_pin_interrupt_configure(struct device *dev,
		gpio_pin_t pin, enum gpio_int_mode mode,
		enum gpio_int_trig trig)
{
 80014f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80014fc:	461e      	mov	r6, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80014fe:	6803      	ldr	r3, [r0, #0]
	struct gpio_stm32_data *data = dev->driver_data;
 8001500:	6887      	ldr	r7, [r0, #8]
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8001502:	f8d3 8008 	ldr.w	r8, [r3, #8]
#if defined(CONFIG_STM32H7_DUAL_CORE)
	while (LL_HSEM_1StepLock(HSEM, LL_HSEM_ID_1)) {
	}
#endif /* CONFIG_STM32H7_DUAL_CORE */

	if (mode == GPIO_INT_MODE_DISABLED) {
 8001506:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
 800150a:	460c      	mov	r4, r1
	if (mode == GPIO_INT_MODE_DISABLED) {
 800150c:	d12b      	bne.n	8001566 <gpio_stm32_pin_interrupt_configure+0x6e>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800150e:	f001 0303 	and.w	r3, r1, #3
 8001512:	3304      	adds	r3, #4
 8001514:	009a      	lsls	r2, r3, #2
 8001516:	230f      	movs	r3, #15
 8001518:	4093      	lsls	r3, r2
 800151a:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800151e:	b2da      	uxtb	r2, r3
 8001520:	493e      	ldr	r1, [pc, #248]	; (800161c <gpio_stm32_pin_interrupt_configure+0x124>)
 8001522:	3202      	adds	r2, #2
 8001524:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001528:	0c19      	lsrs	r1, r3, #16
 800152a:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001532:	fab2 f282 	clz	r2, r2
 8001536:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001538:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800153c:	429a      	cmp	r2, r3
 800153e:	d110      	bne.n	8001562 <gpio_stm32_pin_interrupt_configure+0x6a>
			stm32_exti_disable(pin);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff faad 	bl	8000aa0 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff fafe 	bl	8000b48 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800154c:	4620      	mov	r0, r4
 800154e:	2100      	movs	r1, #0
 8001550:	f7ff fab4 	bl	8000abc <stm32_exti_trigger>
			data->cb_pins &= ~BIT(pin);
 8001554:	2301      	movs	r3, #1
 8001556:	fa03 f404 	lsl.w	r4, r3, r4
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	ea23 0304 	bic.w	r3, r3, r4
 8001560:	607b      	str	r3, [r7, #4]
	int err = 0;
 8001562:	2500      	movs	r5, #0
 8001564:	e04b      	b.n	80015fe <gpio_stm32_pin_interrupt_configure+0x106>
		/* else: No irq source configured for pin. Nothing to disable */
		goto release_lock;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001566:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800156a:	d050      	beq.n	800160e <gpio_stm32_pin_interrupt_configure+0x116>
		err = -ENOTSUP;
		goto release_lock;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, dev) != 0) {
 800156c:	4602      	mov	r2, r0
 800156e:	492c      	ldr	r1, [pc, #176]	; (8001620 <gpio_stm32_pin_interrupt_configure+0x128>)
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff fad7 	bl	8000b24 <stm32_exti_set_callback>
 8001576:	4605      	mov	r5, r0
 8001578:	2800      	cmp	r0, #0
 800157a:	d14b      	bne.n	8001614 <gpio_stm32_pin_interrupt_configure+0x11c>
		err = -EBUSY;
		goto release_lock;
	}

	data->cb_pins |= BIT(pin);
 800157c:	2301      	movs	r3, #1
 800157e:	fa03 f204 	lsl.w	r2, r3, r4
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4313      	orrs	r3, r2
 8001586:	607b      	str	r3, [r7, #4]

	gpio_stm32_enable_int(cfg->port, pin);
 8001588:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800158c:	4825      	ldr	r0, [pc, #148]	; (8001624 <gpio_stm32_pin_interrupt_configure+0x12c>)
 800158e:	f000 fc13 	bl	8001db8 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 8001592:	4925      	ldr	r1, [pc, #148]	; (8001628 <gpio_stm32_pin_interrupt_configure+0x130>)
 8001594:	4603      	mov	r3, r0
 8001596:	c903      	ldmia	r1, {r0, r1}
 8001598:	466a      	mov	r2, sp
 800159a:	e882 0003 	stmia.w	r2, {r0, r1}
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f8d1 8000 	ldr.w	r8, [r1]
 80015a6:	4611      	mov	r1, r2
 80015a8:	47c0      	blx	r8
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80015aa:	f004 0103 	and.w	r1, r4, #3
 80015ae:	3104      	adds	r1, #4
 80015b0:	008b      	lsls	r3, r1, #2
 80015b2:	210f      	movs	r1, #15
 80015b4:	4099      	lsls	r1, r3
 80015b6:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80015ba:	b2ca      	uxtb	r2, r1
 80015bc:	0092      	lsls	r2, r2, #2
 80015be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015c2:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80015c6:	0c0b      	lsrs	r3, r1, #16
 80015c8:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 80015d6:	409f      	lsls	r7, r3
 80015d8:	430f      	orrs	r7, r1

	switch (trig) {
 80015da:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80015de:	6097      	str	r7, [r2, #8]
 80015e0:	d011      	beq.n	8001606 <gpio_stm32_pin_interrupt_configure+0x10e>
 80015e2:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 80015e6:	d010      	beq.n	800160a <gpio_stm32_pin_interrupt_configure+0x112>
 80015e8:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 80015ec:	bf14      	ite	ne
 80015ee:	2100      	movne	r1, #0
 80015f0:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff fa62 	bl	8000abc <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff fa43 	bl	8000a84 <stm32_exti_enable>
#if defined(CONFIG_STM32H7_DUAL_CORE)
	LL_HSEM_ReleaseLock(HSEM, LL_HSEM_ID_1, 0);
#endif /* CONFIG_STM32H7_DUAL_CORE */

	return err;
}
 80015fe:	4628      	mov	r0, r5
 8001600:	b002      	add	sp, #8
 8001602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8001606:	2101      	movs	r1, #1
 8001608:	e7f3      	b.n	80015f2 <gpio_stm32_pin_interrupt_configure+0xfa>
		edge = STM32_EXTI_TRIG_BOTH;
 800160a:	2103      	movs	r1, #3
 800160c:	e7f1      	b.n	80015f2 <gpio_stm32_pin_interrupt_configure+0xfa>
		err = -ENOTSUP;
 800160e:	f06f 0522 	mvn.w	r5, #34	; 0x22
 8001612:	e7f4      	b.n	80015fe <gpio_stm32_pin_interrupt_configure+0x106>
		err = -EBUSY;
 8001614:	f06f 050f 	mvn.w	r5, #15
	return err;
 8001618:	e7f1      	b.n	80015fe <gpio_stm32_pin_interrupt_configure+0x106>
 800161a:	bf00      	nop
 800161c:	40013800 	.word	0x40013800
 8001620:	08002c33 	.word	0x08002c33
 8001624:	080038fb 	.word	0x080038fb
 8001628:	080036e0 	.word	0x080036e0

0800162c <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 800162c:	6803      	ldr	r3, [r0, #0]
{
 800162e:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8001630:	689c      	ldr	r4, [r3, #8]
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <gpio_stm32_init+0x20>)
 8001634:	f000 fbc0 	bl	8001db8 <z_impl_device_get_binding>
 8001638:	6843      	ldr	r3, [r0, #4]
 800163a:	f104 010c 	add.w	r1, r4, #12
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8001642:	2800      	cmp	r0, #0
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8001644:	bf18      	it	ne
 8001646:	f06f 0004 	mvnne.w	r0, #4
 800164a:	bd10      	pop	{r4, pc}
 800164c:	080038fb 	.word	0x080038fb

08001650 <pwm_stm32_pin_set>:
 * return 0, or negative errno code
 */
static int pwm_stm32_pin_set(struct device *dev, u32_t pwm,
			     u32_t period_cycles, u32_t pulse_cycles,
			     pwm_flags_t flags)
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	461f      	mov	r7, r3
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8001656:	6886      	ldr	r6, [r0, #8]
{
 8001658:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	TIM_HandleTypeDef *TimerHandle = &data->hpwm;
	TIM_OC_InitTypeDef sConfig;
	u32_t channel;
	bool counter_32b;

	if (period_cycles == 0U || pulse_cycles > period_cycles) {
 800165c:	b392      	cbz	r2, 80016c4 <pwm_stm32_pin_set+0x74>
 800165e:	42ba      	cmp	r2, r7
 8001660:	d330      	bcc.n	80016c4 <pwm_stm32_pin_set+0x74>
		return -EINVAL;
	}

	if (flags) {
 8001662:	bb63      	cbnz	r3, 80016be <pwm_stm32_pin_set+0x6e>
	}

	/* configure channel */
	channel = (pwm - 1)*CHANNEL_LENGTH;

	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8001664:	6803      	ldr	r3, [r0, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
	channel = (pwm - 1)*CHANNEL_LENGTH;
 8001668:	3901      	subs	r1, #1
 800166a:	008c      	lsls	r4, r1, #2
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	4b32      	ldr	r3, [pc, #200]	; (8001738 <pwm_stm32_pin_set+0xe8>)
 8001670:	4299      	cmp	r1, r3
 8001672:	d05e      	beq.n	8001732 <pwm_stm32_pin_set+0xe2>
 8001674:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8001678:	d027      	beq.n	80016ca <pwm_stm32_pin_set+0x7a>
 800167a:	4830      	ldr	r0, [pc, #192]	; (800173c <pwm_stm32_pin_set+0xec>)
 800167c:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8001680:	4283      	cmp	r3, r0
 8001682:	d053      	beq.n	800172c <pwm_stm32_pin_set+0xdc>
 8001684:	f421 5580 	bic.w	r5, r1, #4096	; 0x1000
 8001688:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800168c:	4285      	cmp	r5, r0
 800168e:	d04d      	beq.n	800172c <pwm_stm32_pin_set+0xdc>
 8001690:	f421 6580 	bic.w	r5, r1, #1024	; 0x400
 8001694:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8001698:	4285      	cmp	r5, r0
 800169a:	d047      	beq.n	800172c <pwm_stm32_pin_set+0xdc>
 800169c:	f421 4580 	bic.w	r5, r1, #16384	; 0x4000
 80016a0:	f500 4074 	add.w	r0, r0, #62464	; 0xf400
 80016a4:	4285      	cmp	r5, r0
 80016a6:	d041      	beq.n	800172c <pwm_stm32_pin_set+0xdc>
 80016a8:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 80016ac:	4283      	cmp	r3, r0
 80016ae:	d03d      	beq.n	800172c <pwm_stm32_pin_set+0xdc>
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <pwm_stm32_pin_set+0xf0>)
 80016b2:	4299      	cmp	r1, r3
 80016b4:	d03d      	beq.n	8001732 <pwm_stm32_pin_set+0xe2>
 80016b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016ba:	4299      	cmp	r1, r3
 80016bc:	d039      	beq.n	8001732 <pwm_stm32_pin_set+0xe2>
		return -ENOTSUP;
 80016be:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80016c2:	e031      	b.n	8001728 <pwm_stm32_pin_set+0xd8>
		return -EINVAL;
 80016c4:	f06f 0015 	mvn.w	r0, #21
 80016c8:	e02e      	b.n	8001728 <pwm_stm32_pin_set+0xd8>
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80016ca:	b184      	cbz	r4, 80016ee <pwm_stm32_pin_set+0x9e>
		!IS_TIM_CHANNELS(channel)) {
 80016cc:	f024 0308 	bic.w	r3, r4, #8
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d003      	beq.n	80016dc <pwm_stm32_pin_set+0x8c>
 80016d4:	2c08      	cmp	r4, #8
 80016d6:	d001      	beq.n	80016dc <pwm_stm32_pin_set+0x8c>
 80016d8:	2c3c      	cmp	r4, #60	; 0x3c
 80016da:	d1f0      	bne.n	80016be <pwm_stm32_pin_set+0x6e>
	/* FIXME: IS_TIM_32B_COUNTER_INSTANCE not available on
	 * SMT32F1 Cube HAL since all timer counters are 16 bits
	 */
	counter_32b = 0;
#else
	counter_32b = IS_TIM_32B_COUNTER_INSTANCE(PWM_STRUCT(dev));
 80016dc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80016e0:	d005      	beq.n	80016ee <pwm_stm32_pin_set+0x9e>

	/*
	 * The timer counts from 0 up to the value in the ARR register (16-bit).
	 * Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!counter_32b && (period_cycles > 0x10000)) {
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <pwm_stm32_pin_set+0xf4>)
 80016e4:	4299      	cmp	r1, r3
 80016e6:	d002      	beq.n	80016ee <pwm_stm32_pin_set+0x9e>
 80016e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80016ec:	d8e7      	bhi.n	80016be <pwm_stm32_pin_set+0x6e>
	}

	/* Configure Timer IP */
	TimerHandle->Instance = PWM_STRUCT(dev);
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
	TimerHandle->Init.ClockDivision = 0;
 80016ee:	2500      	movs	r5, #0
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 80016f0:	6c33      	ldr	r3, [r6, #64]	; 0x40
	TimerHandle->Instance = PWM_STRUCT(dev);
 80016f2:	6031      	str	r1, [r6, #0]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
	TimerHandle->Init.RepetitionCounter = 0;

	/* Set period value */
	TimerHandle->Init.Period = period_cycles - 1;
 80016f4:	3a01      	subs	r2, #1
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 80016f6:	6073      	str	r3, [r6, #4]
	TimerHandle->Init.Period = period_cycles - 1;
 80016f8:	60f2      	str	r2, [r6, #12]
	TimerHandle->Init.ClockDivision = 0;
 80016fa:	6135      	str	r5, [r6, #16]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	60b5      	str	r5, [r6, #8]
	TimerHandle->Init.RepetitionCounter = 0;
 80016fe:	6175      	str	r5, [r6, #20]

	HAL_TIM_PWM_Init(TimerHandle);
 8001700:	4630      	mov	r0, r6
 8001702:	f001 fc9a 	bl	800303a <HAL_TIM_PWM_Init>

	/* Configure PWM channel */
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	; 0x60
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;

	/* Set the pulse value */
	sConfig.Pulse = pulse_cycles;

	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 8001708:	a901      	add	r1, sp, #4
 800170a:	4622      	mov	r2, r4
 800170c:	4630      	mov	r0, r6
	sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800170e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8001712:	e9cd 5506 	strd	r5, r5, [sp, #24]
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 8001716:	9301      	str	r3, [sp, #4]
	sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8001718:	9503      	str	r5, [sp, #12]
	sConfig.Pulse = pulse_cycles;
 800171a:	9702      	str	r7, [sp, #8]
	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 800171c:	f001 fca7 	bl	800306e <HAL_TIM_PWM_ConfigChannel>

	return HAL_TIM_PWM_Start(TimerHandle, channel);
 8001720:	4621      	mov	r1, r4
 8001722:	4630      	mov	r0, r6
 8001724:	f001 fd11 	bl	800314a <HAL_TIM_PWM_Start>
}
 8001728:	b009      	add	sp, #36	; 0x24
 800172a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 800172c:	2c00      	cmp	r4, #0
 800172e:	d1cd      	bne.n	80016cc <pwm_stm32_pin_set+0x7c>
 8001730:	e7d7      	b.n	80016e2 <pwm_stm32_pin_set+0x92>
 8001732:	2c00      	cmp	r4, #0
 8001734:	d1ca      	bne.n	80016cc <pwm_stm32_pin_set+0x7c>
 8001736:	e7d7      	b.n	80016e8 <pwm_stm32_pin_set+0x98>
 8001738:	40010000 	.word	0x40010000
 800173c:	40000400 	.word	0x40000400
 8001740:	40001c00 	.word	0x40001c00
 8001744:	40000c00 	.word	0x40000c00

08001748 <pwm_stm32_init>:
	data->clock = clk;
}


static int pwm_stm32_init(struct device *dev)
{
 8001748:	b538      	push	{r3, r4, r5, lr}
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 800174a:	6803      	ldr	r3, [r0, #0]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 800174c:	6885      	ldr	r5, [r0, #8]
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 800174e:	689c      	ldr	r4, [r3, #8]
 8001750:	4806      	ldr	r0, [pc, #24]	; (800176c <pwm_stm32_init+0x24>)
 8001752:	f000 fb31 	bl	8001db8 <z_impl_device_get_binding>
 8001756:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8001758:	6468      	str	r0, [r5, #68]	; 0x44
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	1d21      	adds	r1, r4, #4
 800175e:	4798      	blx	r3

	__pwm_stm32_get_clock(dev);

	/* enable clock */
	if (clock_control_on(data->clock,
 8001760:	2800      	cmp	r0, #0
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
	}

	return 0;
}
 8001762:	bf18      	it	ne
 8001764:	f06f 0004 	mvnne.w	r0, #4
 8001768:	bd38      	pop	{r3, r4, r5, pc}
 800176a:	bf00      	nop
 800176c:	080038fb 	.word	0x080038fb

08001770 <uart_stm32_configure>:
	return UART_CFG_FLOW_CTRL_NONE;
}

static int uart_stm32_configure(struct device *dev,
				const struct uart_config *cfg)
{
 8001770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct uart_stm32_data *data = DEV_DATA(dev);
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001774:	6803      	ldr	r3, [r0, #0]
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001776:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001778:	689b      	ldr	r3, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800177a:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800177c:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 800177e:	2a01      	cmp	r2, #1
{
 8001780:	460d      	mov	r5, r1
	switch (parity) {
 8001782:	d075      	beq.n	8001870 <uart_stm32_configure+0x100>
		return LL_USART_PARITY_NONE;
 8001784:	2a02      	cmp	r2, #2
 8001786:	bf0c      	ite	eq
 8001788:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800178c:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800178e:	f895 8005 	ldrb.w	r8, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8001792:	f895 9006 	ldrb.w	r9, [r5, #6]
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001796:	79ef      	ldrb	r7, [r5, #7]
 8001798:	f1b8 0f02 	cmp.w	r8, #2
 800179c:	bf96      	itet	ls
 800179e:	4b37      	ldrls	r3, [pc, #220]	; (800187c <uart_stm32_configure+0x10c>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80017a0:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 80017a4:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
		return LL_USART_DATAWIDTH_8B;
 80017a8:	f1b9 0f04 	cmp.w	r9, #4
 80017ac:	bf0c      	ite	eq
 80017ae:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80017b2:	2300      	movne	r3, #0

	/* Hardware doesn't support mark or space parity */
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80017b4:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 80017b6:	2f01      	cmp	r7, #1
 80017b8:	bf14      	ite	ne
 80017ba:	f04f 0c00 	movne.w	ip, #0
 80017be:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80017c2:	2a01      	cmp	r2, #1
 80017c4:	d957      	bls.n	8001876 <uart_stm32_configure+0x106>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
		return -ENOTSUP;
	}
#else
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 80017c6:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 80017ca:	d054      	beq.n	8001876 <uart_stm32_configure+0x106>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 80017cc:	f1b9 0f02 	cmp.w	r9, #2
 80017d0:	d951      	bls.n	8001876 <uart_stm32_configure+0x106>
		) {
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 80017d2:	b187      	cbz	r7, 80017f6 <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80017d4:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <uart_stm32_configure+0x110>)
 80017d6:	4294      	cmp	r4, r2
 80017d8:	d00b      	beq.n	80017f2 <uart_stm32_configure+0x82>
 80017da:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80017de:	4294      	cmp	r4, r2
 80017e0:	d007      	beq.n	80017f2 <uart_stm32_configure+0x82>
 80017e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017e6:	4294      	cmp	r4, r2
 80017e8:	d003      	beq.n	80017f2 <uart_stm32_configure+0x82>
 80017ea:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 80017ee:	4294      	cmp	r4, r2
 80017f0:	d141      	bne.n	8001876 <uart_stm32_configure+0x106>
 80017f2:	2f01      	cmp	r7, #1
 80017f4:	d13f      	bne.n	8001876 <uart_stm32_configure+0x106>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80017f6:	68e2      	ldr	r2, [r4, #12]
 80017f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017fc:	60e2      	str	r2, [r4, #12]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80017fe:	68e2      	ldr	r2, [r4, #12]
 8001800:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8001804:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001806:	bf1f      	itttt	ne
 8001808:	68e7      	ldrne	r7, [r4, #12]
 800180a:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 800180e:	430f      	orrne	r7, r1
 8001810:	60e7      	strne	r7, [r4, #12]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001812:	6922      	ldr	r2, [r4, #16]
 8001814:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001818:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800181a:	bf1f      	itttt	ne
 800181c:	6921      	ldrne	r1, [r4, #16]
 800181e:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8001822:	ea41 010e 	orrne.w	r1, r1, lr
 8001826:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001828:	68e2      	ldr	r2, [r4, #12]

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 800182a:	6829      	ldr	r1, [r5, #0]
 800182c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8001830:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001832:	bf1f      	itttt	ne
 8001834:	68e2      	ldrne	r2, [r4, #12]
 8001836:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 800183a:	431a      	orrne	r2, r3
 800183c:	60e2      	strne	r2, [r4, #12]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800183e:	6963      	ldr	r3, [r4, #20]
 8001840:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001844:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001846:	bf1f      	itttt	ne
 8001848:	6963      	ldrne	r3, [r4, #20]
 800184a:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 800184e:	ea43 030c 	orrne.w	r3, r3, ip
 8001852:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 8001854:	6833      	ldr	r3, [r6, #0]
 8001856:	4299      	cmp	r1, r3
 8001858:	d003      	beq.n	8001862 <uart_stm32_configure+0xf2>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800185a:	f001 fb92 	bl	8002f82 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800185e:	682b      	ldr	r3, [r5, #0]
 8001860:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001862:	68e3      	ldr	r3, [r4, #12]
 8001864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001868:	60e3      	str	r3, [r4, #12]
	}

	LL_USART_Enable(UartInstance);
	return 0;
 800186a:	2000      	movs	r0, #0
};
 800186c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (parity) {
 8001870:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001874:	e78b      	b.n	800178e <uart_stm32_configure+0x1e>
		return -ENOTSUP;
 8001876:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800187a:	e7f7      	b.n	800186c <uart_stm32_configure+0xfc>
 800187c:	080038c0 	.word	0x080038c0
 8001880:	40011000 	.word	0x40011000

08001884 <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8001884:	6803      	ldr	r3, [r0, #0]
{
 8001886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 800188a:	f8d3 8008 	ldr.w	r8, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800188e:	6887      	ldr	r7, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001890:	4646      	mov	r6, r8
{
 8001892:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001894:	f856 4b08 	ldr.w	r4, [r6], #8
 8001898:	4818      	ldr	r0, [pc, #96]	; (80018fc <uart_stm32_init+0x78>)
 800189a:	f000 fa8d 	bl	8001db8 <z_impl_device_get_binding>
 800189e:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	4631      	mov	r1, r6
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 80018a8:	4606      	mov	r6, r0
 80018aa:	bb20      	cbnz	r0, 80018f6 <uart_stm32_init+0x72>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80018ac:	68e3      	ldr	r3, [r4, #12]
 80018ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018b2:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80018b4:	68e3      	ldr	r3, [r4, #12]
 80018b6:	f043 030c 	orr.w	r3, r3, #12
 80018ba:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80018bc:	68e3      	ldr	r3, [r4, #12]
 80018be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018c2:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80018c4:	6923      	ldr	r3, [r4, #16]
 80018c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ca:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80018cc:	f898 3010 	ldrb.w	r3, [r8, #16]
 80018d0:	b133      	cbz	r3, 80018e0 <uart_stm32_init+0x5c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80018d2:	682b      	ldr	r3, [r5, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80018d8:	6953      	ldr	r3, [r2, #20]
 80018da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018de:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	4628      	mov	r0, r5
 80018e4:	f001 fb4d 	bl	8002f82 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018e8:	68e3      	ldr	r3, [r4, #12]
 80018ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ee:	60e3      	str	r3, [r4, #12]

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
}
 80018f0:	4630      	mov	r0, r6
 80018f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 80018f6:	f06f 0604 	mvn.w	r6, #4
 80018fa:	e7f9      	b.n	80018f0 <uart_stm32_init+0x6c>
 80018fc:	080038fb 	.word	0x080038fb

08001900 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001900:	6a03      	ldr	r3, [r0, #32]
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001908:	6a03      	ldr	r3, [r0, #32]
{
 800190a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800190c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800190e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001910:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001912:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001916:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001918:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800191a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800191e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001920:	4d0e      	ldr	r5, [pc, #56]	; (800195c <TIM_OC1_SetConfig+0x5c>)
 8001922:	42a8      	cmp	r0, r5
 8001924:	d002      	beq.n	800192c <TIM_OC1_SetConfig+0x2c>
 8001926:	4e0e      	ldr	r6, [pc, #56]	; (8001960 <TIM_OC1_SetConfig+0x60>)
 8001928:	42b0      	cmp	r0, r6
 800192a:	d110      	bne.n	800194e <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800192c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800192e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001932:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001934:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001936:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800193a:	d002      	beq.n	8001942 <TIM_OC1_SetConfig+0x42>
 800193c:	4d08      	ldr	r5, [pc, #32]	; (8001960 <TIM_OC1_SetConfig+0x60>)
 800193e:	42a8      	cmp	r0, r5
 8001940:	d105      	bne.n	800194e <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001942:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001946:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800194a:	4335      	orrs	r5, r6
 800194c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800194e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001950:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001952:	684a      	ldr	r2, [r1, #4]
 8001954:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001956:	6203      	str	r3, [r0, #32]
}
 8001958:	bd70      	pop	{r4, r5, r6, pc}
 800195a:	bf00      	nop
 800195c:	40010000 	.word	0x40010000
 8001960:	40010400 	.word	0x40010400

08001964 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001964:	6a03      	ldr	r3, [r0, #32]
 8001966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800196a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800196c:	6a03      	ldr	r3, [r0, #32]
{
 800196e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001970:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001972:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001974:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001976:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800197a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800197c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800197e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001982:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001986:	4d11      	ldr	r5, [pc, #68]	; (80019cc <TIM_OC3_SetConfig+0x68>)
 8001988:	42a8      	cmp	r0, r5
 800198a:	d003      	beq.n	8001994 <TIM_OC3_SetConfig+0x30>
 800198c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001990:	42a8      	cmp	r0, r5
 8001992:	d114      	bne.n	80019be <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001994:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800199a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800199e:	4d0b      	ldr	r5, [pc, #44]	; (80019cc <TIM_OC3_SetConfig+0x68>)
 80019a0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80019a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019a6:	d003      	beq.n	80019b0 <TIM_OC3_SetConfig+0x4c>
 80019a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019ac:	42a8      	cmp	r0, r5
 80019ae:	d106      	bne.n	80019be <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019b0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80019b4:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019b8:	4335      	orrs	r5, r6
 80019ba:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019be:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80019c0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80019c2:	684a      	ldr	r2, [r1, #4]
 80019c4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019c6:	6203      	str	r3, [r0, #32]
}
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
 80019ca:	bf00      	nop
 80019cc:	40010000 	.word	0x40010000

080019d0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80019d0:	6a03      	ldr	r3, [r0, #32]
 80019d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019d6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019d8:	6a03      	ldr	r3, [r0, #32]
{
 80019da:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019de:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80019e2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80019ea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80019ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80019f0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019f4:	4d08      	ldr	r5, [pc, #32]	; (8001a18 <TIM_OC4_SetConfig+0x48>)
 80019f6:	42a8      	cmp	r0, r5
 80019f8:	d003      	beq.n	8001a02 <TIM_OC4_SetConfig+0x32>
 80019fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019fe:	42a8      	cmp	r0, r5
 8001a00:	d104      	bne.n	8001a0c <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a02:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a04:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a08:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a0e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001a10:	684a      	ldr	r2, [r1, #4]
 8001a12:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a14:	6203      	str	r3, [r0, #32]
}
 8001a16:	bd30      	pop	{r4, r5, pc}
 8001a18:	40010000 	.word	0x40010000

08001a1c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a1c:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001a1e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a20:	4290      	cmp	r0, r2
 8001a22:	d012      	beq.n	8001a4a <TIM_Base_SetConfig+0x2e>
 8001a24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a28:	d00f      	beq.n	8001a4a <TIM_Base_SetConfig+0x2e>
 8001a2a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a2e:	4290      	cmp	r0, r2
 8001a30:	d00b      	beq.n	8001a4a <TIM_Base_SetConfig+0x2e>
 8001a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a36:	4290      	cmp	r0, r2
 8001a38:	d007      	beq.n	8001a4a <TIM_Base_SetConfig+0x2e>
 8001a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a3e:	4290      	cmp	r0, r2
 8001a40:	d003      	beq.n	8001a4a <TIM_Base_SetConfig+0x2e>
 8001a42:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a46:	4290      	cmp	r0, r2
 8001a48:	d119      	bne.n	8001a7e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8001a4a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a50:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a52:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <TIM_Base_SetConfig+0xc4>)
 8001a54:	4290      	cmp	r0, r2
 8001a56:	d029      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a5c:	d026      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a5e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a62:	4290      	cmp	r0, r2
 8001a64:	d022      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a6a:	4290      	cmp	r0, r2
 8001a6c:	d01e      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a72:	4290      	cmp	r0, r2
 8001a74:	d01a      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a76:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a7a:	4290      	cmp	r0, r2
 8001a7c:	d016      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <TIM_Base_SetConfig+0xc8>)
 8001a80:	4290      	cmp	r0, r2
 8001a82:	d013      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a88:	4290      	cmp	r0, r2
 8001a8a:	d00f      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a90:	4290      	cmp	r0, r2
 8001a92:	d00b      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a94:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a98:	4290      	cmp	r0, r2
 8001a9a:	d007      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001a9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aa0:	4290      	cmp	r0, r2
 8001aa2:	d003      	beq.n	8001aac <TIM_Base_SetConfig+0x90>
 8001aa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aa8:	4290      	cmp	r0, r2
 8001aaa:	d103      	bne.n	8001ab4 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001aac:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ab2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ab4:	694a      	ldr	r2, [r1, #20]
 8001ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001abc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001abe:	688b      	ldr	r3, [r1, #8]
 8001ac0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001ac2:	680b      	ldr	r3, [r1, #0]
 8001ac4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <TIM_Base_SetConfig+0xc4>)
 8001ac8:	4298      	cmp	r0, r3
 8001aca:	d003      	beq.n	8001ad4 <TIM_Base_SetConfig+0xb8>
 8001acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ad0:	4298      	cmp	r0, r3
 8001ad2:	d101      	bne.n	8001ad8 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001ad4:	690b      	ldr	r3, [r1, #16]
 8001ad6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	6143      	str	r3, [r0, #20]
}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40014000 	.word	0x40014000

08001ae8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ae8:	6a03      	ldr	r3, [r0, #32]
 8001aea:	f023 0310 	bic.w	r3, r3, #16
 8001aee:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001af0:	6a03      	ldr	r3, [r0, #32]
{
 8001af2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001af4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001af6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001af8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001afa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001afe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b02:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001b04:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b08:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b0c:	4d10      	ldr	r5, [pc, #64]	; (8001b50 <TIM_OC2_SetConfig+0x68>)
 8001b0e:	42a8      	cmp	r0, r5
 8001b10:	d003      	beq.n	8001b1a <TIM_OC2_SetConfig+0x32>
 8001b12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b16:	42a8      	cmp	r0, r5
 8001b18:	d114      	bne.n	8001b44 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b1a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b24:	4d0a      	ldr	r5, [pc, #40]	; (8001b50 <TIM_OC2_SetConfig+0x68>)
 8001b26:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b2c:	d003      	beq.n	8001b36 <TIM_OC2_SetConfig+0x4e>
 8001b2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b32:	42a8      	cmp	r0, r5
 8001b34:	d106      	bne.n	8001b44 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b36:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b3a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b3e:	4335      	orrs	r5, r6
 8001b40:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001b44:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b46:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b48:	684a      	ldr	r2, [r1, #4]
 8001b4a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001b4c:	6203      	str	r3, [r0, #32]
}
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
 8001b50:	40010000 	.word	0x40010000

08001b54 <HAL_TIM_OC_Start>:
{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	6800      	ldr	r0, [r0, #0]
 8001b5c:	f001 fae7 	bl	800312e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_TIM_OC_Start+0x3c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d003      	beq.n	8001b70 <HAL_TIM_OC_Start+0x1c>
 8001b68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d103      	bne.n	8001b78 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b76:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7e:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001b80:	bf1e      	ittt	ne
 8001b82:	681a      	ldrne	r2, [r3, #0]
 8001b84:	f042 0201 	orrne.w	r2, r2, #1
 8001b88:	601a      	strne	r2, [r3, #0]
}
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	bf00      	nop
 8001b90:	40010000 	.word	0x40010000

08001b94 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <UTILS_PLL_IsBusy+0x18>)
 8001b96:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001b98:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001b9a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8001ba2:	4313      	orrs	r3, r2
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8001ba4:	bf14      	ite	ne
 8001ba6:	2001      	movne	r0, #1
 8001ba8:	2000      	moveq	r0, #0
 8001baa:	4770      	bx	lr
 8001bac:	40023800 	.word	0x40023800

08001bb0 <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <UTILS_SetFlashLatency.part.0+0x88>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001bb4:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8001bb8:	d01b      	beq.n	8001bf2 <UTILS_SetFlashLatency.part.0+0x42>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <UTILS_SetFlashLatency.part.0+0x8c>)
 8001bbc:	4298      	cmp	r0, r3
 8001bbe:	d809      	bhi.n	8001bd4 <UTILS_SetFlashLatency.part.0+0x24>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <UTILS_SetFlashLatency.part.0+0x90>)
 8001bc2:	4298      	cmp	r0, r3
 8001bc4:	d901      	bls.n	8001bca <UTILS_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_4;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e005      	b.n	8001bd6 <UTILS_SetFlashLatency.part.0+0x26>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <UTILS_SetFlashLatency.part.0+0x94>)
 8001bcc:	4298      	cmp	r0, r3
 8001bce:	d906      	bls.n	8001bde <UTILS_SetFlashLatency.part.0+0x2e>
        latency = LL_FLASH_LATENCY_3;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e000      	b.n	8001bd6 <UTILS_SetFlashLatency.part.0+0x26>
        latency = LL_FLASH_LATENCY_5;
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	bf38      	it	cc
 8001bda:	2301      	movcc	r3, #1
 8001bdc:	e009      	b.n	8001bf2 <UTILS_SetFlashLatency.part.0+0x42>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <UTILS_SetFlashLatency.part.0+0x98>)
 8001be0:	4298      	cmp	r0, r3
 8001be2:	d901      	bls.n	8001be8 <UTILS_SetFlashLatency.part.0+0x38>
        latency = LL_FLASH_LATENCY_2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	e004      	b.n	8001bf2 <UTILS_SetFlashLatency.part.0+0x42>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <UTILS_SetFlashLatency.part.0+0x9c>)
 8001bea:	4298      	cmp	r0, r3
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8001bec:	f04f 0300 	mov.w	r3, #0
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001bf0:	d8f1      	bhi.n	8001bd6 <UTILS_SetFlashLatency.part.0+0x26>
 8001bf2:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <UTILS_SetFlashLatency.part.0+0x88>)
 8001bf4:	6812      	ldr	r2, [r2, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001bf6:	0452      	lsls	r2, r2, #17
 8001bf8:	d411      	bmi.n	8001c1e <UTILS_SetFlashLatency.part.0+0x6e>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001bfa:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <UTILS_SetFlashLatency.part.0+0xa0>)
 8001bfc:	4290      	cmp	r0, r2
 8001bfe:	d908      	bls.n	8001c12 <UTILS_SetFlashLatency.part.0+0x62>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c00:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <UTILS_SetFlashLatency.part.0+0x94>)
        latency = LL_FLASH_LATENCY_4;
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf08      	it	eq
 8001c06:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c08:	4290      	cmp	r0, r2
 8001c0a:	d805      	bhi.n	8001c18 <UTILS_SetFlashLatency.part.0+0x68>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <UTILS_SetFlashLatency.part.0+0x98>)
 8001c0e:	4290      	cmp	r0, r2
 8001c10:	d802      	bhi.n	8001c18 <UTILS_SetFlashLatency.part.0+0x68>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <UTILS_SetFlashLatency.part.0+0x9c>)
 8001c14:	4290      	cmp	r0, r2
 8001c16:	d902      	bls.n	8001c1e <UTILS_SetFlashLatency.part.0+0x6e>
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	bf38      	it	cc
 8001c1c:	2301      	movcc	r3, #1
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c1e:	490d      	ldr	r1, [pc, #52]	; (8001c54 <UTILS_SetFlashLatency.part.0+0xa4>)
 8001c20:	680a      	ldr	r2, [r1, #0]
 8001c22:	f022 020f 	bic.w	r2, r2, #15
 8001c26:	431a      	orrs	r2, r3
 8001c28:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c2a:	6808      	ldr	r0, [r1, #0]
 8001c2c:	f000 000f 	and.w	r0, r0, #15
  return status;
 8001c30:	1ac0      	subs	r0, r0, r3
 8001c32:	bf18      	it	ne
 8001c34:	2001      	movne	r0, #1
}
 8001c36:	4770      	bx	lr
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	08f0d180 	.word	0x08f0d180
 8001c40:	07270e00 	.word	0x07270e00
 8001c44:	055d4a80 	.word	0x055d4a80
 8001c48:	03938700 	.word	0x03938700
 8001c4c:	01c9c380 	.word	0x01c9c380
 8001c50:	00b71b00 	.word	0x00b71b00
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001c58:	680b      	ldr	r3, [r1, #0]
 8001c5a:	4a24      	ldr	r2, [pc, #144]	; (8001cec <UTILS_EnablePLLAndSwitchSystem+0x94>)
 8001c5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001c62:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8001c64:	4e22      	ldr	r6, [pc, #136]	; (8001cf0 <UTILS_EnablePLLAndSwitchSystem+0x98>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001c66:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8001c6a:	6833      	ldr	r3, [r6, #0]
 8001c6c:	42a3      	cmp	r3, r4
{
 8001c6e:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8001c70:	d327      	bcc.n	8001cc2 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c7a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001c7c:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8001c7e:	0192      	lsls	r2, r2, #6
 8001c80:	d5fc      	bpl.n	8001c7c <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	6829      	ldr	r1, [r5, #0]
 8001c86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	f022 0203 	bic.w	r2, r2, #3
 8001c94:	f042 0202 	orr.w	r2, r2, #2
 8001c98:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001ca2:	2a08      	cmp	r2, #8
 8001ca4:	d1fa      	bne.n	8001c9c <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	6869      	ldr	r1, [r5, #4]
 8001caa:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	68a9      	ldr	r1, [r5, #8]
 8001cb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	609a      	str	r2, [r3, #8]
}
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	e005      	b.n	8001cce <UTILS_EnablePLLAndSwitchSystem+0x76>
  if(HCLK_Frequency == 0U)
 8001cc2:	b174      	cbz	r4, 8001ce2 <UTILS_EnablePLLAndSwitchSystem+0x8a>
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff ff73 	bl	8001bb0 <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d0d1      	beq.n	8001c72 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8001cce:	6833      	ldr	r3, [r6, #0]
 8001cd0:	42a3      	cmp	r3, r4
 8001cd2:	d903      	bls.n	8001cdc <UTILS_EnablePLLAndSwitchSystem+0x84>
  if(HCLK_Frequency == 0U)
 8001cd4:	b13c      	cbz	r4, 8001ce6 <UTILS_EnablePLLAndSwitchSystem+0x8e>
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7ff ff6a 	bl	8001bb0 <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8001cdc:	b900      	cbnz	r0, 8001ce0 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 8001cde:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
    status = ERROR;
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	e7f3      	b.n	8001cce <UTILS_EnablePLLAndSwitchSystem+0x76>
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e7fa      	b.n	8001ce0 <UTILS_EnablePLLAndSwitchSystem+0x88>
 8001cea:	bf00      	nop
 8001cec:	0800395a 	.word	0x0800395a
 8001cf0:	20001094 	.word	0x20001094
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <LL_PLL_ConfigSystemClock_HSE>:
{
 8001cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfc:	460d      	mov	r5, r1
 8001cfe:	4604      	mov	r4, r0
 8001d00:	4690      	mov	r8, r2
 8001d02:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8001d04:	f7ff ff46 	bl	8001b94 <UTILS_PLL_IsBusy>
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d138      	bne.n	8001d7e <LL_PLL_ConfigSystemClock_HSE+0x86>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001d0c:	f8d8 6000 	ldr.w	r6, [r8]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001d10:	f8d8 7004 	ldr.w	r7, [r8, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d14:	f8d8 3008 	ldr.w	r3, [r8, #8]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001d18:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8001d1c:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001d20:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8001d24:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d26:	0c18      	lsrs	r0, r3, #16
 8001d28:	3001      	adds	r0, #1
 8001d2a:	0040      	lsls	r0, r0, #1
 8001d2c:	fbb4 f0f0 	udiv	r0, r4, r0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001d30:	4c14      	ldr	r4, [pc, #80]	; (8001d84 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8001d32:	6822      	ldr	r2, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8001d34:	0392      	lsls	r2, r2, #14
 8001d36:	d40f      	bmi.n	8001d58 <LL_PLL_ConfigSystemClock_HSE+0x60>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d38:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8001d3a:	2d01      	cmp	r5, #1
 8001d3c:	bf0c      	ite	eq
 8001d3e:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d42:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8001d46:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001d48:	6822      	ldr	r2, [r4, #0]
 8001d4a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d4e:	6022      	str	r2, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001d50:	4c0c      	ldr	r4, [pc, #48]	; (8001d84 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8001d52:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8001d54:	0392      	lsls	r2, r2, #14
 8001d56:	d5fc      	bpl.n	8001d52 <LL_PLL_ConfigSystemClock_HSE+0x5a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001d58:	4c0a      	ldr	r4, [pc, #40]	; (8001d84 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LL_PLL_ConfigSystemClock_HSE+0x90>)
 8001d5c:	6865      	ldr	r5, [r4, #4]
 8001d5e:	402a      	ands	r2, r5
 8001d60:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8001d64:	4332      	orrs	r2, r6
 8001d66:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d6a:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001d6c:	6862      	ldr	r2, [r4, #4]
 8001d6e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001d72:	431a      	orrs	r2, r3
 8001d74:	6062      	str	r2, [r4, #4]
}
 8001d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001d7a:	f7ff bf6d 	b.w	8001c58 <UTILS_EnablePLLAndSwitchSystem>
}
 8001d7e:	2001      	movs	r0, #1
 8001d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	ffbf8000 	.word	0xffbf8000

08001d8c <z_sys_device_do_config_level>:
#endif
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <z_sys_device_do_config_level+0x28>)
{
 8001d8e:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 8001d90:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001d94:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 8001d96:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8001d98:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8001d9c:	42a5      	cmp	r5, r4
 8001d9e:	d800      	bhi.n	8001da2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	4620      	mov	r0, r4
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4798      	blx	r3
		if (retval != 0) {
 8001daa:	b100      	cbz	r0, 8001dae <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
 8001dac:	6066      	str	r6, [r4, #4]
								info++) {
 8001dae:	340c      	adds	r4, #12
 8001db0:	e7f4      	b.n	8001d9c <z_sys_device_do_config_level+0x10>
 8001db2:	bf00      	nop
 8001db4:	080038a8 	.word	0x080038a8

08001db8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <z_impl_device_get_binding+0x44>)
{
 8001dba:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 8001dbc:	4c10      	ldr	r4, [pc, #64]	; (8001e00 <z_impl_device_get_binding+0x48>)
{
 8001dbe:	4605      	mov	r5, r0
 8001dc0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 8001dc2:	429c      	cmp	r4, r3
 8001dc4:	d104      	bne.n	8001dd0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 8001dc6:	4c0e      	ldr	r4, [pc, #56]	; (8001e00 <z_impl_device_get_binding+0x48>)
 8001dc8:	42b4      	cmp	r4, r6
 8001dca:	d109      	bne.n	8001de0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 8001dcc:	2400      	movs	r4, #0
 8001dce:	e012      	b.n	8001df6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 8001dd0:	6862      	ldr	r2, [r4, #4]
 8001dd2:	b11a      	cbz	r2, 8001ddc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 8001dd4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	42aa      	cmp	r2, r5
 8001dda:	d00c      	beq.n	8001df6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8001ddc:	340c      	adds	r4, #12
 8001dde:	e7f0      	b.n	8001dc2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 8001de0:	6863      	ldr	r3, [r4, #4]
 8001de2:	b90b      	cbnz	r3, 8001de8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8001de4:	340c      	adds	r4, #12
 8001de6:	e7ef      	b.n	8001dc8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	4628      	mov	r0, r5
 8001dec:	6819      	ldr	r1, [r3, #0]
 8001dee:	f000 fec3 	bl	8002b78 <strcmp>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d1f6      	bne.n	8001de4 <z_impl_device_get_binding+0x2c>
}
 8001df6:	4620      	mov	r0, r4
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000119c 	.word	0x2000119c
 8001e00:	200010a0 	.word	0x200010a0

08001e04 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
 8001e04:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8001e06:	4807      	ldr	r0, [pc, #28]	; (8001e24 <z_bss_zero+0x20>)
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <z_bss_zero+0x24>)
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	1a12      	subs	r2, r2, r0
 8001e0e:	f000 feea 	bl	8002be6 <memset>
#ifdef DT_CCM_BASE_ADDRESS
	(void)memset(&__ccm_bss_start, 0,
 8001e12:	4806      	ldr	r0, [pc, #24]	; (8001e2c <z_bss_zero+0x28>)
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <z_bss_zero+0x2c>)
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((u32_t) &__gcov_bss_end - (u32_t) &__gcov_bss_start));
#endif
}
 8001e16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memset(&__ccm_bss_start, 0,
 8001e1a:	1a12      	subs	r2, r2, r0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f000 bee2 	b.w	8002be6 <memset>
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000324 	.word	0x20000324
 8001e2c:	10000000 	.word	0x10000000
 8001e30:	10000000 	.word	0x10000000

08001e34 <z_data_copy>:
 * @return N/A
 */
void z_data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8001e34:	4809      	ldr	r0, [pc, #36]	; (8001e5c <z_data_copy+0x28>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <z_data_copy+0x2c>)
 8001e38:	490a      	ldr	r1, [pc, #40]	; (8001e64 <z_data_copy+0x30>)
{
 8001e3a:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8001e3c:	1a12      	subs	r2, r2, r0
 8001e3e:	f000 fea7 	bl	8002b90 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <z_data_copy+0x34>)
 8001e44:	4909      	ldr	r1, [pc, #36]	; (8001e6c <z_data_copy+0x38>)
 8001e46:	480a      	ldr	r0, [pc, #40]	; (8001e70 <z_data_copy+0x3c>)
 8001e48:	f000 fea2 	bl	8002b90 <memcpy>
		 (uintptr_t) &_ramfunc_ram_size);
#endif /* CONFIG_ARCH_HAS_RAMFUNC_SUPPORT */
#ifdef DT_CCM_BASE_ADDRESS
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		 __ccm_data_end - __ccm_data_start);
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <z_data_copy+0x40>)
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <z_data_copy+0x44>)
 8001e50:	490a      	ldr	r1, [pc, #40]	; (8001e7c <z_data_copy+0x48>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8001e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 8001e56:	1a12      	subs	r2, r2, r0
 8001e58:	f000 be9a 	b.w	8002b90 <memcpy>
 8001e5c:	20001068 	.word	0x20001068
 8001e60:	200011b0 	.word	0x200011b0
 8001e64:	080039a4 	.word	0x080039a4
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	080039a4 	.word	0x080039a4
 8001e70:	20000000 	.word	0x20000000
 8001e74:	10000000 	.word	0x10000000
 8001e78:	10000000 	.word	0x10000000
 8001e7c:	08003aec 	.word	0x08003aec

08001e80 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8001e80:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <bg_thread_main+0x34>)
 8001e84:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001e86:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8001e88:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001e8a:	f7ff ff7f 	bl	8001d8c <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <bg_thread_main+0x38>)
 8001e90:	490a      	ldr	r1, [pc, #40]	; (8001ebc <bg_thread_main+0x3c>)
 8001e92:	480b      	ldr	r0, [pc, #44]	; (8001ec0 <bg_thread_main+0x40>)
 8001e94:	f000 fd23 	bl	80028de <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f7ff ff77 	bl	8001d8c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8001e9e:	f000 fb81 	bl	80025a4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8001ea2:	f7fe fb61 	bl	8000568 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001ea6:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <bg_thread_main+0x44>)
 8001ea8:	7b13      	ldrb	r3, [r2, #12]
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001eb0:	bd08      	pop	{r3, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000321 	.word	0x20000321
 8001eb8:	08003999 	.word	0x08003999
 8001ebc:	0800396a 	.word	0x0800396a
 8001ec0:	08003971 	.word	0x08003971
 8001ec4:	20000270 	.word	0x20000270

08001ec8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8001ec8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
 8001ecc:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8001fcc <z_cstart+0x104>
 8001ed0:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001ed2:	f38a 8808 	msr	MSP, sl
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8001ed6:	4d35      	ldr	r5, [pc, #212]	; (8001fac <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
 8001ed8:	4e35      	ldr	r6, [pc, #212]	; (8001fb0 <z_cstart+0xe8>)
 8001eda:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8001edc:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8001fd0 <z_cstart+0x108>
 8001ee0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8001fd4 <z_cstart+0x10c>
	z_setup_new_thread(thread, stack,
 8001ee4:	4f33      	ldr	r7, [pc, #204]	; (8001fb4 <z_cstart+0xec>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	2400      	movs	r4, #0
 8001eec:	616b      	str	r3, [r5, #20]
 8001eee:	23f0      	movs	r3, #240	; 0xf0
 8001ef0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8001ef4:	77ec      	strb	r4, [r5, #31]
 8001ef6:	762c      	strb	r4, [r5, #24]
 8001ef8:	766c      	strb	r4, [r5, #25]
 8001efa:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8001efc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001efe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001f02:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8001f04:	f7ff f9f4 	bl	80012f0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8001f08:	f7ff f8c4 	bl	8001094 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f10:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8001f12:	62eb      	str	r3, [r5, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
 8001f14:	ab07      	add	r3, sp, #28
 8001f16:	2274      	movs	r2, #116	; 0x74
 8001f18:	4621      	mov	r1, r4
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fe63 	bl	8002be6 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current_cpu->current = &dummy_thread;
 8001f20:	4d25      	ldr	r5, [pc, #148]	; (8001fb8 <z_cstart+0xf0>)
	struct k_thread dummy_thread = {
 8001f22:	f04f 0801 	mov.w	r8, #1
	_current_cpu->current = &dummy_thread;
 8001f26:	60a8      	str	r0, [r5, #8]
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8001f28:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
 8001f2a:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8001f2e:	f7ff ff2d 	bl	8001d8c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001f32:	4640      	mov	r0, r8
 8001f34:	f7ff ff2a 	bl	8001d8c <z_sys_device_do_config_level>
	z_sched_init();
 8001f38:	f000 fa8e 	bl	8002458 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
 8001f3e:	622e      	str	r6, [r5, #32]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8001f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f44:	4649      	mov	r1, r9
 8001f46:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	465b      	mov	r3, fp
 8001f4e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001f52:	e9cd 4400 	strd	r4, r4, [sp]
 8001f56:	f000 faff 	bl	8002558 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001f5a:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
 8001f5c:	4630      	mov	r0, r6
 8001f5e:	f023 0304 	bic.w	r3, r3, #4
 8001f62:	7373      	strb	r3, [r6, #13]
 8001f64:	f001 f945 	bl	80031f2 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <z_cstart+0xf8>)
 8001f6a:	4916      	ldr	r1, [pc, #88]	; (8001fc4 <z_cstart+0xfc>)
 8001f6c:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8001f70:	230f      	movs	r3, #15
 8001f72:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8001f76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <z_cstart+0x100>)
 8001f7c:	4638      	mov	r0, r7
 8001f7e:	e9cd 4400 	strd	r4, r4, [sp]
 8001f82:	f000 fae9 	bl	8002558 <z_setup_new_thread>
 8001f86:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8001f88:	60ef      	str	r7, [r5, #12]
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8001f90:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
 8001f94:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
 8001f98:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
 8001f9a:	f8c5 a004 	str.w	sl, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
 8001f9e:	465b      	mov	r3, fp
 8001fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	4630      	mov	r0, r6
 8001fa8:	f7ff f858 	bl	800105c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8001fac:	e000ed00 	.word	0xe000ed00
 8001fb0:	20000270 	.word	0x20000270
 8001fb4:	200001fc 	.word	0x200001fc
 8001fb8:	200002e4 	.word	0x200002e4
 8001fbc:	0800399a 	.word	0x0800399a
 8001fc0:	0800399f 	.word	0x0800399f
 8001fc4:	20000728 	.word	0x20000728
 8001fc8:	08003311 	.word	0x08003311
 8001fcc:	20001068 	.word	0x20001068
 8001fd0:	08001e81 	.word	0x08001e81
 8001fd4:	20000328 	.word	0x20000328

08001fd8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8001fd8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8001fda:	4c08      	ldr	r4, [pc, #32]	; (8001ffc <z_reset_time_slice+0x24>)
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	b15b      	cbz	r3, 8001ff8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8001fe0:	f7fe ff8e 	bl	8000f00 <z_clock_elapsed>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	6820      	ldr	r0, [r4, #0]
 8001fe8:	4a05      	ldr	r2, [pc, #20]	; (8002000 <z_reset_time_slice+0x28>)
 8001fea:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8001fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8001ff0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f001 b96e 	b.w	80032d4 <z_set_timeout_expiry>
}
 8001ff8:	bd10      	pop	{r4, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000318 	.word	0x20000318
 8002000:	200002e4 	.word	0x200002e4

08002004 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
 8002004:	b510      	push	{r4, lr}
 8002006:	f04f 0310 	mov.w	r3, #16
 800200a:	f3ef 8411 	mrs	r4, BASEPRI
 800200e:	f383 8811 	msr	BASEPRI, r3
 8002012:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <k_sched_time_slice_set+0x34>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((u32_t)t) * (to_hz / from_hz);
 800201c:	230a      	movs	r3, #10
 800201e:	4358      	muls	r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <k_sched_time_slice_set+0x38>)
 8002022:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <k_sched_time_slice_set+0x3c>)
 8002026:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8002028:	f7ff ffd6 	bl	8001fd8 <z_reset_time_slice>
	__asm__ volatile(
 800202c:	f384 8811 	msr	BASEPRI, r4
 8002030:	f3bf 8f6f 	isb	sy
	}
}
 8002034:	bd10      	pop	{r4, pc}
 8002036:	bf00      	nop
 8002038:	200002e4 	.word	0x200002e4
 800203c:	20000318 	.word	0x20000318
 8002040:	20000314 	.word	0x20000314

08002044 <k_sched_lock>:
	__asm__ volatile(
 8002044:	f04f 0310 	mov.w	r3, #16
 8002048:	f3ef 8111 	mrs	r1, BASEPRI
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <k_sched_lock+0x24>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	7bd3      	ldrb	r3, [r2, #15]
 800205a:	3b01      	subs	r3, #1
 800205c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800205e:	f381 8811 	msr	BASEPRI, r1
 8002062:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 8002066:	4770      	bx	lr
 8002068:	200002e4 	.word	0x200002e4

0800206c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <z_priq_dumb_remove+0x28>)
 800206e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002072:	4282      	cmp	r2, r0
 8002074:	d105      	bne.n	8002082 <z_priq_dumb_remove+0x16>
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	428b      	cmp	r3, r1
 800207a:	d102      	bne.n	8002082 <z_priq_dumb_remove+0x16>
 800207c:	7b4b      	ldrb	r3, [r1, #13]
 800207e:	06db      	lsls	r3, r3, #27
 8002080:	d106      	bne.n	8002090 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8002082:	e9d1 3200 	ldrd	r3, r2, [r1]
 8002086:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8002088:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800208a:	2300      	movs	r3, #0
	node->prev = NULL;
 800208c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	200002e4 	.word	0x200002e4

08002098 <update_cache>:
{
 8002098:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 800209a:	4c10      	ldr	r4, [pc, #64]	; (80020dc <update_cache+0x44>)
{
 800209c:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 800209e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80020a2:	f001 f89c 	bl	80031de <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
 80020a6:	68a3      	ldr	r3, [r4, #8]
 80020a8:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 80020aa:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 80020ac:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
 80020ae:	bf44      	itt	mi
 80020b0:	f041 0108 	orrmi.w	r1, r1, #8
 80020b4:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
 80020b6:	b905      	cbnz	r5, 80020ba <update_cache+0x22>
 80020b8:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 80020ba:	b94e      	cbnz	r6, 80020d0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
 80020bc:	7b5a      	ldrb	r2, [r3, #13]
 80020be:	06d2      	lsls	r2, r2, #27
 80020c0:	d106      	bne.n	80020d0 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80020c2:	69aa      	ldr	r2, [r5, #24]
 80020c4:	b922      	cbnz	r2, 80020d0 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
 80020c6:	89da      	ldrh	r2, [r3, #14]
 80020c8:	2a7f      	cmp	r2, #127	; 0x7f
 80020ca:	d901      	bls.n	80020d0 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
 80020cc:	6223      	str	r3, [r4, #32]
}
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
 80020d0:	42ab      	cmp	r3, r5
 80020d2:	d001      	beq.n	80020d8 <update_cache+0x40>
			z_reset_time_slice();
 80020d4:	f7ff ff80 	bl	8001fd8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 80020d8:	6225      	str	r5, [r4, #32]
}
 80020da:	e7f8      	b.n	80020ce <update_cache+0x36>
 80020dc:	200002e4 	.word	0x200002e4

080020e0 <k_sched_unlock>:
{
 80020e0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80020e2:	f04f 0310 	mov.w	r3, #16
 80020e6:	f3ef 8411 	mrs	r4, BASEPRI
 80020ea:	f383 8811 	msr	BASEPRI, r3
 80020ee:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <k_sched_unlock+0x34>)
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	7bd3      	ldrb	r3, [r2, #15]
 80020f8:	3301      	adds	r3, #1
 80020fa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff ffcb 	bl	8002098 <update_cache>
	__asm__ volatile(
 8002102:	f384 8811 	msr	BASEPRI, r4
 8002106:	f3bf 8f6f 	isb	sy
}
 800210a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 800210e:	f001 b85c 	b.w	80031ca <z_reschedule_unlocked>
 8002112:	bf00      	nop
 8002114:	200002e4 	.word	0x200002e4

08002118 <ready_thread>:
{
 8002118:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 800211a:	7b43      	ldrb	r3, [r0, #13]
 800211c:	06db      	lsls	r3, r3, #27
 800211e:	d12a      	bne.n	8002176 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
 8002120:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
 8002122:	bb43      	cbnz	r3, 8002176 <ready_thread+0x5e>
	return list->head == list;
 8002124:	4a15      	ldr	r2, [pc, #84]	; (800217c <ready_thread+0x64>)
 8002126:	4611      	mov	r1, r2
 8002128:	f851 4f24 	ldr.w	r4, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800212c:	428c      	cmp	r4, r1
 800212e:	bf18      	it	ne
 8002130:	4623      	movne	r3, r4
 8002132:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002134:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8002136:	bf38      	it	cc
 8002138:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800213a:	b1b3      	cbz	r3, 800216a <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
 800213c:	f990 600e 	ldrsb.w	r6, [r0, #14]
 8002140:	f993 500e 	ldrsb.w	r5, [r3, #14]
 8002144:	42ae      	cmp	r6, r5
 8002146:	db03      	blt.n	8002150 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
 8002148:	42a3      	cmp	r3, r4
 800214a:	d00e      	beq.n	800216a <ready_thread+0x52>
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e7f4      	b.n	800213a <ready_thread+0x22>
	node->prev = successor->prev;
 8002150:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8002152:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 8002156:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8002158:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 800215a:	7b43      	ldrb	r3, [r0, #13]
 800215c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002160:	7343      	strb	r3, [r0, #13]
}
 8002162:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff bf97 	b.w	8002098 <update_cache>
	node->prev = list->tail;
 800216a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
 800216e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002170:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8002172:	6290      	str	r0, [r2, #40]	; 0x28
}
 8002174:	e7f1      	b.n	800215a <ready_thread+0x42>
}
 8002176:	bc70      	pop	{r4, r5, r6}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	200002e4 	.word	0x200002e4

08002180 <z_sched_start>:
{
 8002180:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002182:	f04f 0210 	mov.w	r2, #16
 8002186:	f3ef 8411 	mrs	r4, BASEPRI
 800218a:	f382 8811 	msr	BASEPRI, r2
 800218e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
 8002192:	7b42      	ldrb	r2, [r0, #13]
 8002194:	0751      	lsls	r1, r2, #29
 8002196:	d404      	bmi.n	80021a2 <z_sched_start+0x22>
	__asm__ volatile(
 8002198:	f384 8811 	msr	BASEPRI, r4
 800219c:	f3bf 8f6f 	isb	sy
}
 80021a0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80021a2:	f022 0204 	bic.w	r2, r2, #4
 80021a6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80021a8:	f7ff ffb6 	bl	8002118 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80021ac:	4621      	mov	r1, r4
 80021ae:	4802      	ldr	r0, [pc, #8]	; (80021b8 <z_sched_start+0x38>)
}
 80021b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80021b4:	f000 bff2 	b.w	800319c <z_reschedule>
 80021b8:	20000322 	.word	0x20000322

080021bc <z_move_thread_to_end_of_prio_q>:
{
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	4601      	mov	r1, r0
	__asm__ volatile(
 80021c0:	f04f 0310 	mov.w	r3, #16
 80021c4:	f3ef 8411 	mrs	r4, BASEPRI
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80021d0:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da02      	bge.n	80021de <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80021d8:	4819      	ldr	r0, [pc, #100]	; (8002240 <z_move_thread_to_end_of_prio_q+0x84>)
 80021da:	f7ff ff47 	bl	800206c <z_priq_dumb_remove>
	return list->head == list;
 80021de:	4a19      	ldr	r2, [pc, #100]	; (8002244 <z_move_thread_to_end_of_prio_q+0x88>)
 80021e0:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80021e2:	6a95      	ldr	r5, [r2, #40]	; 0x28
	return list->head == list;
 80021e4:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80021e8:	4283      	cmp	r3, r0
 80021ea:	bf08      	it	eq
 80021ec:	2300      	moveq	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf38      	it	cc
 80021f2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80021f4:	b1eb      	cbz	r3, 8002232 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
 80021f6:	f991 700e 	ldrsb.w	r7, [r1, #14]
 80021fa:	f993 600e 	ldrsb.w	r6, [r3, #14]
 80021fe:	42b7      	cmp	r7, r6
 8002200:	db03      	blt.n	800220a <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8002202:	429d      	cmp	r5, r3
 8002204:	d015      	beq.n	8002232 <z_move_thread_to_end_of_prio_q+0x76>
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	e7f4      	b.n	80021f4 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
 800220a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 800220c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
 8002210:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8002212:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
 8002214:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
 8002216:	6890      	ldr	r0, [r2, #8]
 8002218:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800221c:	734b      	strb	r3, [r1, #13]
 800221e:	1a43      	subs	r3, r0, r1
 8002220:	4258      	negs	r0, r3
 8002222:	4158      	adcs	r0, r3
 8002224:	f7ff ff38 	bl	8002098 <update_cache>
	__asm__ volatile(
 8002228:	f384 8811 	msr	BASEPRI, r4
 800222c:	f3bf 8f6f 	isb	sy
}
 8002230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
 8002232:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
 8002236:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002238:	6019      	str	r1, [r3, #0]
	list->tail = node;
 800223a:	6291      	str	r1, [r2, #40]	; 0x28
}
 800223c:	e7ea      	b.n	8002214 <z_move_thread_to_end_of_prio_q+0x58>
 800223e:	bf00      	nop
 8002240:	20000308 	.word	0x20000308
 8002244:	200002e4 	.word	0x200002e4

08002248 <z_time_slice>:
{
 8002248:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <z_time_slice+0x58>)
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <z_time_slice+0x5c>)
 800224e:	6814      	ldr	r4, [r2, #0]
{
 8002250:	4601      	mov	r1, r0
	if (pending_current == _current) {
 8002252:	6898      	ldr	r0, [r3, #8]
 8002254:	42a0      	cmp	r0, r4
 8002256:	461c      	mov	r4, r3
 8002258:	d103      	bne.n	8002262 <z_time_slice+0x1a>
}
 800225a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
 800225e:	f7ff bebb 	b.w	8001fd8 <z_reset_time_slice>
	pending_current = NULL;
 8002262:	2500      	movs	r5, #0
 8002264:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8002266:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <z_time_slice+0x60>)
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	b1b2      	cbz	r2, 800229a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 800226c:	89c2      	ldrh	r2, [r0, #14]
 800226e:	2a7f      	cmp	r2, #127	; 0x7f
 8002270:	d813      	bhi.n	800229a <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <z_time_slice+0x64>)
 8002274:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4295      	cmp	r5, r2
 800227c:	db0d      	blt.n	800229a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <z_time_slice+0x68>)
 8002280:	4290      	cmp	r0, r2
 8002282:	d00a      	beq.n	800229a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 8002284:	6982      	ldr	r2, [r0, #24]
 8002286:	b942      	cbnz	r2, 800229a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	428a      	cmp	r2, r1
 800228c:	dc02      	bgt.n	8002294 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 800228e:	f7ff ff95 	bl	80021bc <z_move_thread_to_end_of_prio_q>
 8002292:	e7e2      	b.n	800225a <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
 8002294:	1a52      	subs	r2, r2, r1
 8002296:	611a      	str	r2, [r3, #16]
}
 8002298:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	6123      	str	r3, [r4, #16]
 800229e:	e7fb      	b.n	8002298 <z_time_slice+0x50>
 80022a0:	20000310 	.word	0x20000310
 80022a4:	200002e4 	.word	0x200002e4
 80022a8:	20000318 	.word	0x20000318
 80022ac:	20000314 	.word	0x20000314
 80022b0:	200001fc 	.word	0x200001fc

080022b4 <z_impl_k_thread_suspend>:
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80022b8:	3018      	adds	r0, #24
 80022ba:	f000 ffe5 	bl	8003288 <z_abort_timeout>
	__asm__ volatile(
 80022be:	f04f 0310 	mov.w	r3, #16
 80022c2:	f3ef 8611 	mrs	r6, BASEPRI
 80022c6:	f383 8811 	msr	BASEPRI, r3
 80022ca:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80022ce:	f994 300d 	ldrsb.w	r3, [r4, #13]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da07      	bge.n	80022e6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80022d6:	480f      	ldr	r0, [pc, #60]	; (8002314 <z_impl_k_thread_suspend+0x60>)
 80022d8:	4621      	mov	r1, r4
 80022da:	f7ff fec7 	bl	800206c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80022de:	7b63      	ldrb	r3, [r4, #13]
 80022e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 80022e6:	4d0c      	ldr	r5, [pc, #48]	; (8002318 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80022e8:	7b63      	ldrb	r3, [r4, #13]
 80022ea:	68a8      	ldr	r0, [r5, #8]
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	7363      	strb	r3, [r4, #13]
 80022f2:	1b03      	subs	r3, r0, r4
 80022f4:	4258      	negs	r0, r3
 80022f6:	4158      	adcs	r0, r3
 80022f8:	f7ff fece 	bl	8002098 <update_cache>
	__asm__ volatile(
 80022fc:	f386 8811 	msr	BASEPRI, r6
 8002300:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8002304:	68ab      	ldr	r3, [r5, #8]
 8002306:	42a3      	cmp	r3, r4
 8002308:	d103      	bne.n	8002312 <z_impl_k_thread_suspend+0x5e>
}
 800230a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 800230e:	f000 bf5c 	b.w	80031ca <z_reschedule_unlocked>
}
 8002312:	bd70      	pop	{r4, r5, r6, pc}
 8002314:	20000308 	.word	0x20000308
 8002318:	200002e4 	.word	0x200002e4

0800231c <z_thread_single_abort>:
{
 800231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (thread->fn_abort != NULL) {
 800231e:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
 8002320:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8002322:	b103      	cbz	r3, 8002326 <z_thread_single_abort+0xa>
		thread->fn_abort();
 8002324:	4798      	blx	r3
 8002326:	f104 0018 	add.w	r0, r4, #24
 800232a:	f000 ffad 	bl	8003288 <z_abort_timeout>
	__asm__ volatile(
 800232e:	f04f 0310 	mov.w	r3, #16
 8002332:	f3ef 8511 	mrs	r5, BASEPRI
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 800233e:	7b63      	ldrb	r3, [r4, #13]
 8002340:	06d8      	lsls	r0, r3, #27
 8002342:	d122      	bne.n	800238a <z_thread_single_abort+0x6e>
		if (z_is_thread_ready(thread)) {
 8002344:	69a2      	ldr	r2, [r4, #24]
 8002346:	bb02      	cbnz	r2, 800238a <z_thread_single_abort+0x6e>
			if (z_is_thread_queued(thread)) {
 8002348:	0619      	lsls	r1, r3, #24
 800234a:	d507      	bpl.n	800235c <z_thread_single_abort+0x40>
				_priq_run_remove(&_kernel.ready_q.runq,
 800234c:	481c      	ldr	r0, [pc, #112]	; (80023c0 <z_thread_single_abort+0xa4>)
 800234e:	4621      	mov	r1, r4
 8002350:	f7ff fe8c 	bl	800206c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8002354:	7b63      	ldrb	r3, [r4, #13]
 8002356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800235a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <z_thread_single_abort+0xa8>)
 800235e:	6898      	ldr	r0, [r3, #8]
 8002360:	1b02      	subs	r2, r0, r4
 8002362:	4250      	negs	r0, r2
 8002364:	4150      	adcs	r0, r2
 8002366:	f7ff fe97 	bl	8002098 <update_cache>
		thread->base.thread_state |= mask;
 800236a:	7b63      	ldrb	r3, [r4, #13]
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002372:	f104 0728 	add.w	r7, r4, #40	; 0x28
			waiter->base.pended_on = NULL;
 8002376:	2600      	movs	r6, #0
	return list->head == list;
 8002378:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800237a:	42b9      	cmp	r1, r7
 800237c:	d000      	beq.n	8002380 <z_thread_single_abort+0x64>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 800237e:	b989      	cbnz	r1, 80023a4 <z_thread_single_abort+0x88>
	__asm__ volatile(
 8002380:	f385 8811 	msr	BASEPRI, r5
 8002384:	f3bf 8f6f 	isb	sy
}
 8002388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (z_is_thread_pending(thread)) {
 800238a:	079b      	lsls	r3, r3, #30
 800238c:	d5ed      	bpl.n	800236a <z_thread_single_abort+0x4e>
				_priq_wait_remove(&pended_on(thread)->waitq,
 800238e:	68a0      	ldr	r0, [r4, #8]
 8002390:	4621      	mov	r1, r4
 8002392:	f7ff fe6b 	bl	800206c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8002396:	7b63      	ldrb	r3, [r4, #13]
 8002398:	f023 0302 	bic.w	r3, r3, #2
 800239c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	60a3      	str	r3, [r4, #8]
 80023a2:	e7e2      	b.n	800236a <z_thread_single_abort+0x4e>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 80023a4:	6888      	ldr	r0, [r1, #8]
 80023a6:	f7ff fe61 	bl	800206c <z_priq_dumb_remove>
 80023aa:	7b4b      	ldrb	r3, [r1, #13]
			waiter->base.pended_on = NULL;
 80023ac:	608e      	str	r6, [r1, #8]
 80023ae:	f023 0302 	bic.w	r3, r3, #2
 80023b2:	734b      	strb	r3, [r1, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80023b4:	670e      	str	r6, [r1, #112]	; 0x70
			ready_thread(waiter);
 80023b6:	4608      	mov	r0, r1
 80023b8:	f7ff feae 	bl	8002118 <ready_thread>
 80023bc:	e7dc      	b.n	8002378 <z_thread_single_abort+0x5c>
 80023be:	bf00      	nop
 80023c0:	20000308 	.word	0x20000308
 80023c4:	200002e4 	.word	0x200002e4

080023c8 <unready_thread>:
{
 80023c8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 80023ca:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80023ce:	2b00      	cmp	r3, #0
{
 80023d0:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80023d2:	da06      	bge.n	80023e2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 80023d4:	4807      	ldr	r0, [pc, #28]	; (80023f4 <unready_thread+0x2c>)
 80023d6:	f7ff fe49 	bl	800206c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80023da:	7b4b      	ldrb	r3, [r1, #13]
 80023dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023e0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <unready_thread+0x30>)
 80023e4:	6898      	ldr	r0, [r3, #8]
 80023e6:	1a43      	subs	r3, r0, r1
 80023e8:	4258      	negs	r0, r3
 80023ea:	4158      	adcs	r0, r3
}
 80023ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 80023f0:	f7ff be52 	b.w	8002098 <update_cache>
 80023f4:	20000308 	.word	0x20000308
 80023f8:	200002e4 	.word	0x200002e4

080023fc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
 8002400:	f000 ff82 	bl	8003308 <z_tick_get_32>
 8002404:	182c      	adds	r4, r5, r0
	__asm__ volatile(
 8002406:	f04f 0310 	mov.w	r3, #16
 800240a:	f3ef 8711 	mrs	r7, BASEPRI
 800240e:	f383 8811 	msr	BASEPRI, r3
 8002412:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8002416:	4e0d      	ldr	r6, [pc, #52]	; (800244c <z_tick_sleep.part.0+0x50>)
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <z_tick_sleep.part.0+0x54>)
 800241a:	68b0      	ldr	r0, [r6, #8]
 800241c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 800241e:	f000 ff23 	bl	8003268 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
 8002422:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8002424:	490b      	ldr	r1, [pc, #44]	; (8002454 <z_tick_sleep.part.0+0x58>)
 8002426:	462a      	mov	r2, r5
 8002428:	17eb      	asrs	r3, r5, #31
 800242a:	3018      	adds	r0, #24
 800242c:	f000 f93e 	bl	80026ac <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8002430:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002432:	7b53      	ldrb	r3, [r2, #13]
 8002434:	f043 0310 	orr.w	r3, r3, #16
 8002438:	7353      	strb	r3, [r2, #13]
 800243a:	4638      	mov	r0, r7
 800243c:	f7fe fd7e 	bl	8000f3c <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8002440:	f000 ff62 	bl	8003308 <z_tick_get_32>
 8002444:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8002446:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800244a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800244c:	200002e4 	.word	0x200002e4
 8002450:	20000310 	.word	0x20000310
 8002454:	08003213 	.word	0x08003213

08002458 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800245a:	2100      	movs	r1, #0
 800245c:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8002460:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8002464:	4608      	mov	r0, r1
 8002466:	f7ff bdcd 	b.w	8002004 <k_sched_time_slice_set>
 800246a:	bf00      	nop
 800246c:	200002e4 	.word	0x200002e4

08002470 <z_impl_k_yield>:
{
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 8002472:	4c24      	ldr	r4, [pc, #144]	; (8002504 <z_impl_k_yield+0x94>)
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <z_impl_k_yield+0x98>)
 8002476:	68a2      	ldr	r2, [r4, #8]
 8002478:	429a      	cmp	r2, r3
 800247a:	d030      	beq.n	80024de <z_impl_k_yield+0x6e>
 800247c:	f04f 0310 	mov.w	r3, #16
 8002480:	f3ef 8511 	mrs	r5, BASEPRI
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 800248c:	68a1      	ldr	r1, [r4, #8]
 800248e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002492:	f7ff fdeb 	bl	800206c <z_priq_dumb_remove>
	return list->head == list;
 8002496:	6a63      	ldr	r3, [r4, #36]	; 0x24
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8002498:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800249a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800249c:	4283      	cmp	r3, r0
 800249e:	bf08      	it	eq
 80024a0:	2300      	moveq	r3, #0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf38      	it	cc
 80024a6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80024a8:	b32b      	cbz	r3, 80024f6 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
 80024aa:	f992 700e 	ldrsb.w	r7, [r2, #14]
 80024ae:	f993 600e 	ldrsb.w	r6, [r3, #14]
 80024b2:	42b7      	cmp	r7, r6
 80024b4:	db03      	blt.n	80024be <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
 80024b6:	428b      	cmp	r3, r1
 80024b8:	d01d      	beq.n	80024f6 <z_impl_k_yield+0x86>
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	e7f4      	b.n	80024a8 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
 80024be:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 80024c0:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 80024c4:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 80024c6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
 80024c8:	7b53      	ldrb	r3, [r2, #13]
 80024ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ce:	7353      	strb	r3, [r2, #13]
			update_cache(1);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7ff fde1 	bl	8002098 <update_cache>
	__asm__ volatile(
 80024d6:	f385 8811 	msr	BASEPRI, r5
 80024da:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80024de:	f04f 0310 	mov.w	r3, #16
 80024e2:	f3ef 8011 	mrs	r0, BASEPRI
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
}
 80024ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80024f2:	f7fe bd23 	b.w	8000f3c <arch_swap>
	node->prev = list->tail;
 80024f6:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
 80024fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024fc:	601a      	str	r2, [r3, #0]
	list->tail = node;
 80024fe:	62a2      	str	r2, [r4, #40]	; 0x28
}
 8002500:	e7e2      	b.n	80024c8 <z_impl_k_yield+0x58>
 8002502:	bf00      	nop
 8002504:	200002e4 	.word	0x200002e4
 8002508:	200001fc 	.word	0x200001fc

0800250c <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
 800250c:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800250e:	3301      	adds	r3, #1
 8002510:	bf08      	it	eq
 8002512:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8002516:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002518:	d106      	bne.n	8002528 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <z_impl_k_sleep+0x3c>)
 800251c:	6898      	ldr	r0, [r3, #8]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 800251e:	f7ff fec9 	bl	80022b4 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
 8002522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
 8002526:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
 8002528:	4604      	mov	r4, r0
	if (ticks == 0) {
 800252a:	b940      	cbnz	r0, 800253e <z_impl_k_sleep+0x32>
	z_impl_k_yield();
 800252c:	f7ff ffa0 	bl	8002470 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 8002530:	220a      	movs	r2, #10
 8002532:	2300      	movs	r3, #0
 8002534:	4620      	mov	r0, r4
 8002536:	17e1      	asrs	r1, r4, #31
 8002538:	f7fd fe26 	bl	8000188 <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(ticks);
 800253c:	e7f3      	b.n	8002526 <z_impl_k_sleep+0x1a>
 800253e:	f7ff ff5d 	bl	80023fc <z_tick_sleep.part.0>
 8002542:	4604      	mov	r4, r0
 8002544:	e7f4      	b.n	8002530 <z_impl_k_sleep+0x24>
 8002546:	bf00      	nop
 8002548:	200002e4 	.word	0x200002e4

0800254c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800254c:	4b01      	ldr	r3, [pc, #4]	; (8002554 <z_impl_k_current_get+0x8>)
 800254e:	6898      	ldr	r0, [r3, #8]
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	200002e4 	.word	0x200002e4

08002558 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	b087      	sub	sp, #28
 800255c:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
 8002560:	f100 0528 	add.w	r5, r0, #40	; 0x28
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002564:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
 8002568:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800256a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800256c:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
 800256e:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
 8002572:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002574:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (u8_t)initial_state;
 8002576:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002578:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (u8_t)initial_state;
 800257a:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
 800257c:	2500      	movs	r5, #0
	node->prev = NULL;
 800257e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (u8_t)options;
 8002582:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
 8002584:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002586:	9600      	str	r6, [sp, #0]
{
 8002588:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800258a:	f7fe fd4d 	bl	8001028 <arch_new_thread>
	if (!_current) {
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <z_setup_new_thread+0x48>)
 8002590:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
 8002592:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
 8002596:	b103      	cbz	r3, 800259a <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
 8002598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800259a:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800259c:	b007      	add	sp, #28
 800259e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a0:	200002e4 	.word	0x200002e4

080025a4 <z_init_static_threads>:
{
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 80025a6:	4f21      	ldr	r7, [pc, #132]	; (800262c <z_init_static_threads+0x88>)
 80025a8:	4d21      	ldr	r5, [pc, #132]	; (8002630 <z_init_static_threads+0x8c>)
{
 80025aa:	b087      	sub	sp, #28
 80025ac:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 80025ae:	42bd      	cmp	r5, r7
 80025b0:	f105 0430 	add.w	r4, r5, #48	; 0x30
 80025b4:	d30b      	bcc.n	80025ce <z_init_static_threads+0x2a>
	k_sched_lock();
 80025b6:	f7ff fd45 	bl	8002044 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80025ba:	4c1d      	ldr	r4, [pc, #116]	; (8002630 <z_init_static_threads+0x8c>)
 80025bc:	4f1d      	ldr	r7, [pc, #116]	; (8002634 <z_init_static_threads+0x90>)
			return ((u32_t)t) * (to_hz / from_hz);
 80025be:	250a      	movs	r5, #10
 80025c0:	42b4      	cmp	r4, r6
 80025c2:	d321      	bcc.n	8002608 <z_init_static_threads+0x64>
}
 80025c4:	b007      	add	sp, #28
 80025c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80025ca:	f7ff bd89 	b.w	80020e0 <k_sched_unlock>
		z_setup_new_thread(
 80025ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80025d2:	9305      	str	r3, [sp, #20]
 80025d4:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80025d8:	9304      	str	r3, [sp, #16]
 80025da:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80025de:	9303      	str	r3, [sp, #12]
 80025e0:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80025e4:	9302      	str	r3, [sp, #8]
 80025e6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80025f6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80025fa:	f7ff ffad 	bl	8002558 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80025fe:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8002602:	655d      	str	r5, [r3, #84]	; 0x54
 8002604:	4625      	mov	r5, r4
 8002606:	e7d2      	b.n	80025ae <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002608:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800260a:	1c53      	adds	r3, r2, #1
 800260c:	d006      	beq.n	800261c <z_init_static_threads+0x78>
					    K_MSEC(thread_data->init_delay));
 800260e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002612:	436a      	muls	r2, r5
			schedule_new_thread(thread_data->init_thread,
 8002614:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002616:	d103      	bne.n	8002620 <z_init_static_threads+0x7c>
	z_sched_start(thread);
 8002618:	f7ff fdb2 	bl	8002180 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800261c:	3430      	adds	r4, #48	; 0x30
 800261e:	e7cf      	b.n	80025c0 <z_init_static_threads+0x1c>
 8002620:	2300      	movs	r3, #0
 8002622:	4639      	mov	r1, r7
 8002624:	3018      	adds	r0, #24
 8002626:	f000 f841 	bl	80026ac <z_add_timeout>
 800262a:	e7f7      	b.n	800261c <z_init_static_threads+0x78>
 800262c:	2000119c 	.word	0x2000119c
 8002630:	2000119c 	.word	0x2000119c
 8002634:	08003213 	.word	0x08003213

08002638 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <elapsed+0x10>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b90b      	cbnz	r3, 8002642 <elapsed+0xa>
 800263e:	f7fe bc5f 	b.w	8000f00 <z_clock_elapsed>
}
 8002642:	2000      	movs	r0, #0
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	2000031c 	.word	0x2000031c

0800264c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800264c:	6803      	ldr	r3, [r0, #0]
 800264e:	b140      	cbz	r0, 8002662 <remove_timeout+0x16>
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 8002652:	6852      	ldr	r2, [r2, #4]
 8002654:	4290      	cmp	r0, r2
 8002656:	d004      	beq.n	8002662 <remove_timeout+0x16>
	if (next(t) != NULL) {
 8002658:	b11b      	cbz	r3, 8002662 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	6881      	ldr	r1, [r0, #8]
 800265e:	440a      	add	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 8002662:	6842      	ldr	r2, [r0, #4]
 8002664:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8002666:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002668:	2300      	movs	r3, #0
	node->prev = NULL;
 800266a:	e9c0 3300 	strd	r3, r3, [r0]
}
 800266e:	4770      	bx	lr
 8002670:	20001098 	.word	0x20001098

08002674 <next_timeout>:
	return list->head == list;
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
 8002676:	b510      	push	{r4, lr}
 8002678:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800267a:	429c      	cmp	r4, r3
 800267c:	bf08      	it	eq
 800267e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
 8002680:	f7ff ffda 	bl	8002638 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8002684:	b154      	cbz	r4, 800269c <next_timeout+0x28>
 8002686:	68a3      	ldr	r3, [r4, #8]
 8002688:	1a18      	subs	r0, r3, r0
 800268a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <next_timeout+0x34>)
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	b113      	cbz	r3, 800269a <next_timeout+0x26>
 8002694:	4298      	cmp	r0, r3
 8002696:	bfa8      	it	ge
 8002698:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800269a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 800269c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80026a0:	e7f5      	b.n	800268e <next_timeout+0x1a>
 80026a2:	bf00      	nop
 80026a4:	20001098 	.word	0x20001098
 80026a8:	200002e4 	.word	0x200002e4

080026ac <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 80026ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b0:	9101      	str	r1, [sp, #4]
 80026b2:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80026b4:	1c4b      	adds	r3, r1, #1
 80026b6:	bf08      	it	eq
 80026b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80026bc:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80026be:	d061      	beq.n	8002784 <z_add_timeout+0xd8>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
 80026c0:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 80026c2:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
 80026c6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 80026ca:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80026ce:	ebb3 0804 	subs.w	r8, r3, r4
 80026d2:	eb6b 0905 	sbc.w	r9, fp, r5
 80026d6:	f1b8 0f00 	cmp.w	r8, #0
 80026da:	f179 0300 	sbcs.w	r3, r9, #0
 80026de:	db0f      	blt.n	8002700 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 80026e0:	f7ff ffaa 	bl	8002638 <elapsed>
 80026e4:	4a2c      	ldr	r2, [pc, #176]	; (8002798 <z_add_timeout+0xec>)
 80026e6:	e9d2 1c00 	ldrd	r1, ip, [r2]
 80026ea:	f06f 0301 	mvn.w	r3, #1
 80026ee:	1a5b      	subs	r3, r3, r1
 80026f0:	eb6b 020c 	sbc.w	r2, fp, ip
 80026f4:	1b1e      	subs	r6, r3, r4
 80026f6:	eb62 0705 	sbc.w	r7, r2, r5
 80026fa:	1a34      	subs	r4, r6, r0
 80026fc:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002700:	9b01      	ldr	r3, [sp, #4]
 8002702:	f8ca 300c 	str.w	r3, [sl, #12]
 8002706:	f04f 0310 	mov.w	r3, #16
 800270a:	f3ef 8611 	mrs	r6, BASEPRI
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8002716:	f7ff ff8f 	bl	8002638 <elapsed>
	ticks = MAX(1, ticks);
 800271a:	2c01      	cmp	r4, #1
 800271c:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <z_add_timeout+0xf0>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	bfb8      	it	lt
 8002726:	2401      	movlt	r4, #1
		to->dticks = ticks + elapsed();
 8002728:	4404      	add	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800272a:	429a      	cmp	r2, r3
 800272c:	f8ca 4008 	str.w	r4, [sl, #8]
 8002730:	d001      	beq.n	8002736 <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002732:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8002734:	b952      	cbnz	r2, 800274c <z_add_timeout+0xa0>
	node->prev = list->tail;
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
 800273c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800273e:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
 8002742:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
 8002746:	f8c3 a004 	str.w	sl, [r3, #4]
}
 800274a:	e00d      	b.n	8002768 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 800274c:	6890      	ldr	r0, [r2, #8]
 800274e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8002752:	4288      	cmp	r0, r1
 8002754:	dd19      	ble.n	800278a <z_add_timeout+0xde>
				t->dticks -= to->dticks;
 8002756:	1a41      	subs	r1, r0, r1
 8002758:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 800275a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 800275c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
 8002760:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
 8002764:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
 8002768:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800276a:	429a      	cmp	r2, r3
 800276c:	d006      	beq.n	800277c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800276e:	4592      	cmp	sl, r2
 8002770:	d104      	bne.n	800277c <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
 8002772:	f7ff ff7f 	bl	8002674 <next_timeout>
 8002776:	2100      	movs	r1, #0
 8002778:	f7fe fb5e 	bl	8000e38 <z_clock_set_timeout>
	__asm__ volatile(
 800277c:	f386 8811 	msr	BASEPRI, r6
 8002780:	f3bf 8f6f 	isb	sy
		}
	}
}
 8002784:	b003      	add	sp, #12
 8002786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
 800278a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 800278c:	4294      	cmp	r4, r2
 800278e:	f8ca 1008 	str.w	r1, [sl, #8]
 8002792:	d0d0      	beq.n	8002736 <z_add_timeout+0x8a>
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	e7cd      	b.n	8002734 <z_add_timeout+0x88>
 8002798:	20000000 	.word	0x20000000
 800279c:	20001098 	.word	0x20001098

080027a0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 80027a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80027a6:	f7ff fd4f 	bl	8002248 <z_time_slice>
	__asm__ volatile(
 80027aa:	f04f 0310 	mov.w	r3, #16
 80027ae:	f3ef 8411 	mrs	r4, BASEPRI
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80027ba:	4d20      	ldr	r5, [pc, #128]	; (800283c <z_clock_announce+0x9c>)
 80027bc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002840 <z_clock_announce+0xa0>
	return list->head == list;
 80027c0:	f8df a080 	ldr.w	sl, [pc, #128]	; 8002844 <z_clock_announce+0xa4>
 80027c4:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 80027c6:	46c1      	mov	r9, r8
 80027c8:	f8da 0000 	ldr.w	r0, [sl]
 80027cc:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027ce:	4550      	cmp	r0, sl
 80027d0:	e9d8 6700 	ldrd	r6, r7, [r8]
 80027d4:	d005      	beq.n	80027e2 <z_clock_announce+0x42>
 80027d6:	b120      	cbz	r0, 80027e2 <z_clock_announce+0x42>
 80027d8:	6883      	ldr	r3, [r0, #8]
 80027da:	4293      	cmp	r3, r2
 80027dc:	dd13      	ble.n	8002806 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
 80027e2:	18b6      	adds	r6, r6, r2
 80027e4:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
 80027e8:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
 80027ec:	2600      	movs	r6, #0
 80027ee:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
 80027f0:	f7ff ff40 	bl	8002674 <next_timeout>
 80027f4:	4631      	mov	r1, r6
 80027f6:	f7fe fb1f 	bl	8000e38 <z_clock_set_timeout>
	__asm__ volatile(
 80027fa:	f384 8811 	msr	BASEPRI, r4
 80027fe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8002802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
 8002806:	18f6      	adds	r6, r6, r3
 8002808:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
 8002814:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
 8002818:	f7ff ff18 	bl	800264c <remove_timeout>
 800281c:	f384 8811 	msr	BASEPRI, r4
 8002820:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002824:	68c3      	ldr	r3, [r0, #12]
 8002826:	4798      	blx	r3
	__asm__ volatile(
 8002828:	f04f 0310 	mov.w	r3, #16
 800282c:	f3ef 8411 	mrs	r4, BASEPRI
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8002838:	e7c6      	b.n	80027c8 <z_clock_announce+0x28>
 800283a:	bf00      	nop
 800283c:	2000031c 	.word	0x2000031c
 8002840:	20000000 	.word	0x20000000
 8002844:	20001098 	.word	0x20001098

08002848 <z_tick_get>:

s64_t z_tick_get(void)
{
 8002848:	b510      	push	{r4, lr}
 800284a:	f04f 0310 	mov.w	r3, #16
 800284e:	f3ef 8411 	mrs	r4, BASEPRI
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 800285a:	f7fe fb51 	bl	8000f00 <z_clock_elapsed>
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <z_tick_get+0x30>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	1812      	adds	r2, r2, r0
 8002866:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 800286a:	f384 8811 	msr	BASEPRI, r4
 800286e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	bd10      	pop	{r4, pc}
 8002878:	20000000 	.word	0x20000000

0800287c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
 800287c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 800287e:	4c06      	ldr	r4, [pc, #24]	; (8002898 <statics_init+0x1c>)
 8002880:	4d06      	ldr	r5, [pc, #24]	; (800289c <statics_init+0x20>)
 8002882:	42ac      	cmp	r4, r5
 8002884:	d301      	bcc.n	800288a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 8002886:	2000      	movs	r0, #0
 8002888:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800288a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800288e:	4620      	mov	r0, r4
 8002890:	f000 fd52 	bl	8003338 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8002894:	3414      	adds	r4, #20
 8002896:	e7f4      	b.n	8002882 <statics_init+0x6>
 8002898:	2000119c 	.word	0x2000119c
 800289c:	2000119c 	.word	0x2000119c

080028a0 <gpio_pin_configure>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(struct device *port, gpio_pin_t pin,
				     gpio_flags_t flags)
{
 80028a0:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config->config_info;
	struct gpio_driver_data *data =
 80028a2:	6885      	ldr	r5, [r0, #8]
{
 80028a4:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
 80028a6:	6843      	ldr	r3, [r0, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
 80028ac:	b930      	cbnz	r0, 80028bc <gpio_pin_configure+0x1c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80028ae:	2301      	movs	r3, #1
 80028b0:	fa03 f104 	lsl.w	r1, r3, r4
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	ea23 0301 	bic.w	r3, r3, r1
 80028ba:	602b      	str	r3, [r5, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
 80028bc:	bd38      	pop	{r3, r4, r5, pc}

080028be <arch_printk_char_out>:
}
 80028be:	2000      	movs	r0, #0
 80028c0:	4770      	bx	lr

080028c2 <print_err>:
{
 80028c2:	b570      	push	{r4, r5, r6, lr}
 80028c4:	4604      	mov	r4, r0
 80028c6:	460d      	mov	r5, r1
	out('E', ctx);
 80028c8:	2045      	movs	r0, #69	; 0x45
 80028ca:	47a0      	blx	r4
	out('R', ctx);
 80028cc:	4629      	mov	r1, r5
 80028ce:	2052      	movs	r0, #82	; 0x52
 80028d0:	47a0      	blx	r4
	out('R', ctx);
 80028d2:	4629      	mov	r1, r5
 80028d4:	4623      	mov	r3, r4
 80028d6:	2052      	movs	r0, #82	; 0x52
}
 80028d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 80028dc:	4718      	bx	r3

080028de <printk>:
{
 80028de:	b40f      	push	{r0, r1, r2, r3}
 80028e0:	b507      	push	{r0, r1, r2, lr}
 80028e2:	a904      	add	r1, sp, #16
 80028e4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 80028e8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 80028ea:	f7fe f85d 	bl	80009a8 <vprintk>
}
 80028ee:	b003      	add	sp, #12
 80028f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80028f4:	b004      	add	sp, #16
 80028f6:	4770      	bx	lr

080028f8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80028f8:	4604      	mov	r4, r0
 80028fa:	b508      	push	{r3, lr}
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8002900:	461a      	mov	r2, r3
 8002902:	47a0      	blx	r4
	return z_impl_k_current_get();
 8002904:	f7ff fe22 	bl	800254c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8002908:	f7fe fd14 	bl	8001334 <z_impl_k_thread_abort>

0800290c <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
 800290c:	6803      	ldr	r3, [r0, #0]
 800290e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
 8002912:	6883      	ldr	r3, [r0, #8]
 8002914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
 8002918:	bf2c      	ite	cs
 800291a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
 800291e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 8002922:	4770      	bx	lr

08002924 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
 8002924:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
 8002926:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
 8002928:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
 800292a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
 800292e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
 8002932:	bf2c      	ite	cs
 8002934:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
 8002938:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 800293c:	bd10      	pop	{r4, pc}

0800293e <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800293e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
 8002942:	2200      	movs	r2, #0
 8002944:	4604      	mov	r4, r0
 8002946:	460d      	mov	r5, r1
 8002948:	f7ff ffe0 	bl	800290c <chunk_field>
 800294c:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 800294e:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
 8002950:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 8002952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
 8002956:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 800295a:	bf34      	ite	cc
 800295c:	2000      	movcc	r0, #0
 800295e:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
 8002960:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
 8002962:	f1c0 001f 	rsb	r0, r0, #31
 8002966:	1a80      	subs	r0, r0, r2
 8002968:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 800296c:	684a      	ldr	r2, [r1, #4]
 800296e:	1c56      	adds	r6, r2, #1
 8002970:	604e      	str	r6, [r1, #4]
 8002972:	b9a2      	cbnz	r2, 800299e <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
 8002974:	2201      	movs	r2, #1
 8002976:	fa02 f100 	lsl.w	r1, r2, r0
 800297a:	6962      	ldr	r2, [r4, #20]
 800297c:	430a      	orrs	r2, r1
 800297e:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
 8002980:	4629      	mov	r1, r5
		h->buckets[b].next = c;
 8002982:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
 8002986:	2202      	movs	r2, #2
 8002988:	462b      	mov	r3, r5
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff ffca 	bl	8002924 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
 8002990:	2203      	movs	r2, #3
 8002992:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
 8002994:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
 8002996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
 800299a:	f7ff bfc3 	b.w	8002924 <chunk_set>
		chunkid_t second = h->buckets[b].next;
 800299e:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
 80029a2:	2202      	movs	r2, #2
 80029a4:	4639      	mov	r1, r7
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7ff ffb0 	bl	800290c <chunk_field>
		chunk_set(h, c, FREE_PREV, first);
 80029ac:	2202      	movs	r2, #2
 80029ae:	4603      	mov	r3, r0
 80029b0:	4606      	mov	r6, r0
 80029b2:	4629      	mov	r1, r5
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7ff ffb5 	bl	8002924 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
 80029ba:	463b      	mov	r3, r7
 80029bc:	2203      	movs	r2, #3
 80029be:	4629      	mov	r1, r5
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff ffaf 	bl	8002924 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
 80029c6:	2203      	movs	r2, #3
 80029c8:	4631      	mov	r1, r6
 80029ca:	462b      	mov	r3, r5
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7ff ffa9 	bl	8002924 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
 80029d2:	2202      	movs	r2, #2
 80029d4:	4639      	mov	r1, r7
 80029d6:	e7dd      	b.n	8002994 <free_list_add+0x56>

080029d8 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
 80029da:	188b      	adds	r3, r1, r2
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
 80029dc:	1dcc      	adds	r4, r1, #7
 80029de:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
 80029e2:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 80029e6:	1b1b      	subs	r3, r3, r4
 80029e8:	08db      	lsrs	r3, r3, #3

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
 80029ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80029ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f2:	bf2c      	ite	cs
 80029f4:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
 80029f8:	4611      	movcc	r1, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 80029fa:	4293      	cmp	r3, r2
	heap->heap = (struct z_heap *)addr;
 80029fc:	6004      	str	r4, [r0, #0]
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
 80029fe:	60e1      	str	r1, [r4, #12]
 8002a00:	bf94      	ite	ls
 8002a02:	2100      	movls	r1, #0
 8002a04:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
 8002a06:	fab3 f683 	clz	r6, r3
	h->avail_buckets = 0;

	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
 8002a0a:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
 8002a0e:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
 8002a12:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 8002a14:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
 8002a18:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->avail_buckets = 0;
 8002a1c:	2000      	movs	r0, #0
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
 8002a1e:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
 8002a20:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
 8002a22:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
 8002a24:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 8002a26:	4617      	mov	r7, r2

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
 8002a28:	4684      	mov	ip, r0
 8002a2a:	68a2      	ldr	r2, [r4, #8]
 8002a2c:	42ba      	cmp	r2, r7
 8002a2e:	bf94      	ite	ls
 8002a30:	2200      	movls	r2, #0
 8002a32:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
 8002a34:	f1c2 021f 	rsb	r2, r2, #31
 8002a38:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
 8002a3a:	4290      	cmp	r0, r2
 8002a3c:	dd0a      	ble.n	8002a54 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
 8002a3e:	1a5b      	subs	r3, r3, r1
 8002a40:	4620      	mov	r0, r4
 8002a42:	2200      	movs	r2, #0
 8002a44:	f7ff ff6e 	bl	8002924 <chunk_set>
	free_list_add(h, h->chunk0);
 8002a48:	6921      	ldr	r1, [r4, #16]
 8002a4a:	4620      	mov	r0, r4
}
 8002a4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
 8002a50:	f7ff bf75 	b.w	800293e <free_list_add>
		heap->heap->buckets[i].list_size = 0;
 8002a54:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
 8002a58:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
 8002a5a:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
 8002a5e:	e7e4      	b.n	8002a2a <sys_heap_init+0x52>

08002a60 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_LEGACY_DEVICETREE_MACROS, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8002a60:	4770      	bx	lr

08002a62 <__stm32_exti_isr_0>:
{
 8002a62:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 8002a64:	2101      	movs	r1, #1
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fd bfec 	b.w	8000a44 <__stm32_exti_isr>

08002a6c <__stm32_exti_isr_1>:
{
 8002a6c:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 8002a6e:	2102      	movs	r1, #2
 8002a70:	2001      	movs	r0, #1
 8002a72:	f7fd bfe7 	b.w	8000a44 <__stm32_exti_isr>

08002a76 <__stm32_exti_isr_2>:
{
 8002a76:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 8002a78:	2103      	movs	r1, #3
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f7fd bfe2 	b.w	8000a44 <__stm32_exti_isr>

08002a80 <__stm32_exti_isr_3>:
{
 8002a80:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 8002a82:	2104      	movs	r1, #4
 8002a84:	2003      	movs	r0, #3
 8002a86:	f7fd bfdd 	b.w	8000a44 <__stm32_exti_isr>

08002a8a <__stm32_exti_isr_4>:
{
 8002a8a:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 8002a8c:	2105      	movs	r1, #5
 8002a8e:	2004      	movs	r0, #4
 8002a90:	f7fd bfd8 	b.w	8000a44 <__stm32_exti_isr>

08002a94 <__stm32_exti_isr_9_5>:
{
 8002a94:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 8002a96:	210a      	movs	r1, #10
 8002a98:	2005      	movs	r0, #5
 8002a9a:	f7fd bfd3 	b.w	8000a44 <__stm32_exti_isr>

08002a9e <__stm32_exti_isr_15_10>:
{
 8002a9e:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 8002aa0:	2110      	movs	r1, #16
 8002aa2:	200a      	movs	r0, #10
 8002aa4:	f7fd bfce 	b.w	8000a44 <__stm32_exti_isr>

08002aa8 <__stm32_exti_isr_16>:
{
 8002aa8:	4602      	mov	r2, r0
	__stm32_exti_isr(16, 17, arg);
 8002aaa:	2111      	movs	r1, #17
 8002aac:	2010      	movs	r0, #16
 8002aae:	f7fd bfc9 	b.w	8000a44 <__stm32_exti_isr>

08002ab2 <__stm32_exti_isr_18>:
{
 8002ab2:	4602      	mov	r2, r0
	__stm32_exti_isr(18, 19, arg);
 8002ab4:	2113      	movs	r1, #19
 8002ab6:	2012      	movs	r0, #18
 8002ab8:	f7fd bfc4 	b.w	8000a44 <__stm32_exti_isr>

08002abc <__stm32_exti_isr_21>:
{
 8002abc:	4602      	mov	r2, r0
	__stm32_exti_isr(21, 22, arg);
 8002abe:	2116      	movs	r1, #22
 8002ac0:	2015      	movs	r0, #21
 8002ac2:	f7fd bfbf 	b.w	8000a44 <__stm32_exti_isr>

08002ac6 <__stm32_exti_isr_22>:
{
 8002ac6:	4602      	mov	r2, r0
	__stm32_exti_isr(22, 23, arg);
 8002ac8:	2117      	movs	r1, #23
 8002aca:	2016      	movs	r0, #22
 8002acc:	f7fd bfba 	b.w	8000a44 <__stm32_exti_isr>

08002ad0 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8002ad0:	2200      	movs	r2, #0
{
 8002ad2:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	2006      	movs	r0, #6
 8002ad8:	f7fe fa8e 	bl	8000ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002adc:	2200      	movs	r2, #0
 8002ade:	4611      	mov	r1, r2
 8002ae0:	2007      	movs	r0, #7
 8002ae2:	f7fe fa89 	bl	8000ff8 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4611      	mov	r1, r2
 8002aea:	2008      	movs	r0, #8
 8002aec:	f7fe fa84 	bl	8000ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002af0:	2200      	movs	r2, #0
 8002af2:	4611      	mov	r1, r2
 8002af4:	2009      	movs	r0, #9
 8002af6:	f7fe fa7f 	bl	8000ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002afa:	2200      	movs	r2, #0
 8002afc:	4611      	mov	r1, r2
 8002afe:	200a      	movs	r0, #10
 8002b00:	f7fe fa7a 	bl	8000ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002b04:	2200      	movs	r2, #0
 8002b06:	4611      	mov	r1, r2
 8002b08:	2017      	movs	r0, #23
 8002b0a:	f7fe fa75 	bl	8000ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4611      	mov	r1, r2
 8002b12:	2028      	movs	r0, #40	; 0x28
 8002b14:	f7fe fa70 	bl	8000ff8 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f7fe fa6b 	bl	8000ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8002b22:	2200      	movs	r2, #0
 8002b24:	4611      	mov	r1, r2
 8002b26:	202a      	movs	r0, #42	; 0x2a
 8002b28:	f7fe fa66 	bl	8000ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4611      	mov	r1, r2
 8002b30:	2002      	movs	r0, #2
 8002b32:	f7fe fa61 	bl	8000ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8002b36:	2200      	movs	r2, #0
 8002b38:	4611      	mov	r1, r2
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	f7fe fa5c 	bl	8000ff8 <z_arm_irq_priority_set>
}
 8002b40:	2000      	movs	r0, #0
 8002b42:	bd08      	pop	{r3, pc}

08002b44 <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8002b44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002b48:	2208      	movs	r2, #8
 8002b4a:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	6083      	str	r3, [r0, #8]
}
 8002b52:	4770      	bx	lr

08002b54 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8002b54:	4770      	bx	lr

08002b56 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002b56:	2100      	movs	r1, #0
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f000 b800 	b.w	8002b5e <z_arm_fatal_error>

08002b5e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002b5e:	f000 bb02 	b.w	8003166 <z_fatal_error>

08002b62 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8002b62:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002b64:	6800      	ldr	r0, [r0, #0]
 8002b66:	f000 bafe 	b.w	8003166 <z_fatal_error>

08002b6a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8002b6a:	b508      	push	{r3, lr}
	handler();
 8002b6c:	f7fe faa6 	bl	80010bc <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002b74:	f7fe bbc4 	b.w	8001300 <z_arm_exc_exit>

08002b78 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8002b78:	1e43      	subs	r3, r0, #1
 8002b7a:	3901      	subs	r1, #1
 8002b7c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002b80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002b84:	4282      	cmp	r2, r0
 8002b86:	d101      	bne.n	8002b8c <strcmp+0x14>
 8002b88:	2a00      	cmp	r2, #0
 8002b8a:	d1f7      	bne.n	8002b7c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8002b8c:	1a10      	subs	r0, r2, r0
 8002b8e:	4770      	bx	lr

08002b90 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8002b90:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8002b92:	ea81 0400 	eor.w	r4, r1, r0
 8002b96:	07a5      	lsls	r5, r4, #30
 8002b98:	4603      	mov	r3, r0
 8002b9a:	d00b      	beq.n	8002bb4 <memcpy+0x24>
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002ba0:	4291      	cmp	r1, r2
 8002ba2:	d11b      	bne.n	8002bdc <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 8002ba6:	2a00      	cmp	r2, #0
 8002ba8:	d0fc      	beq.n	8002ba4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 8002baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bae:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8002bb2:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 8002bb4:	079c      	lsls	r4, r3, #30
 8002bb6:	d1f6      	bne.n	8002ba6 <memcpy+0x16>
 8002bb8:	f022 0403 	bic.w	r4, r2, #3
 8002bbc:	1f1d      	subs	r5, r3, #4
 8002bbe:	0896      	lsrs	r6, r2, #2
 8002bc0:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8002bc2:	42b9      	cmp	r1, r7
 8002bc4:	d105      	bne.n	8002bd2 <memcpy+0x42>
 8002bc6:	f06f 0503 	mvn.w	r5, #3
 8002bca:	fb05 2206 	mla	r2, r5, r6, r2
 8002bce:	4423      	add	r3, r4
 8002bd0:	e7e4      	b.n	8002b9c <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8002bd2:	f851 cb04 	ldr.w	ip, [r1], #4
 8002bd6:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
 8002bda:	e7f2      	b.n	8002bc2 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
 8002bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002be0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002be4:	e7dc      	b.n	8002ba0 <memcpy+0x10>

08002be6 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 8002be6:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002be8:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8002bea:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8002bec:	079c      	lsls	r4, r3, #30
 8002bee:	d111      	bne.n	8002c14 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 8002bf0:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 8002bf4:	f022 0603 	bic.w	r6, r2, #3
 8002bf8:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8002bfc:	441e      	add	r6, r3
 8002bfe:	0894      	lsrs	r4, r2, #2
 8002c00:	42b3      	cmp	r3, r6
 8002c02:	d10d      	bne.n	8002c20 <memset+0x3a>
 8002c04:	f06f 0503 	mvn.w	r5, #3
 8002c08:	fb05 2204 	mla	r2, r5, r4, r2
 8002c0c:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d109      	bne.n	8002c26 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 8002c14:	2a00      	cmp	r2, #0
 8002c16:	d0fc      	beq.n	8002c12 <memset+0x2c>
		*(d_byte++) = c_byte;
 8002c18:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	e7e5      	b.n	8002bec <memset+0x6>
		*(d_word++) = c_word;
 8002c20:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 8002c24:	e7ec      	b.n	8002c00 <memset+0x1a>
		*(d_byte++) = c_byte;
 8002c26:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002c2a:	e7f0      	b.n	8002c0e <memset+0x28>

08002c2c <_stdout_hook_default>:
}
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c30:	4770      	bx	lr

08002c32 <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 8002c32:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 8002c34:	6853      	ldr	r3, [r2, #4]
 8002c36:	40c3      	lsrs	r3, r0
 8002c38:	07db      	lsls	r3, r3, #31
{
 8002c3a:	b570      	push	{r4, r5, r6, lr}
 8002c3c:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 8002c3e:	d515      	bpl.n	8002c6c <gpio_stm32_isr+0x3a>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002c40:	6891      	ldr	r1, [r2, #8]
 8002c42:	b199      	cbz	r1, 8002c6c <gpio_stm32_isr+0x3a>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 8002c44:	680c      	ldr	r4, [r1, #0]
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 8002c46:	2501      	movs	r5, #1
 8002c48:	2c00      	cmp	r4, #0
 8002c4a:	bf38      	it	cc
 8002c4c:	2400      	movcc	r4, #0
 8002c4e:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8002c50:	688a      	ldr	r2, [r1, #8]
 8002c52:	402a      	ands	r2, r5
 8002c54:	d002      	beq.n	8002c5c <gpio_stm32_isr+0x2a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002c56:	684b      	ldr	r3, [r1, #4]
 8002c58:	4630      	mov	r0, r6
 8002c5a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002c5c:	b134      	cbz	r4, 8002c6c <gpio_stm32_isr+0x3a>
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf38      	it	cc
 8002c64:	2300      	movcc	r3, #0
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8002c66:	4621      	mov	r1, r4
 8002c68:	461c      	mov	r4, r3
 8002c6a:	e7f1      	b.n	8002c50 <gpio_stm32_isr+0x1e>
}
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}

08002c6e <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8002c6e:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002c74:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002c76:	600b      	str	r3, [r1, #0]
}
 8002c78:	2000      	movs	r0, #0
 8002c7a:	4770      	bx	lr

08002c7c <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8002c7c:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002c82:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002c84:	4042      	eors	r2, r0
 8002c86:	400a      	ands	r2, r1
 8002c88:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002c8a:	615a      	str	r2, [r3, #20]
}
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	4770      	bx	lr

08002c90 <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8002c90:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	685b      	ldr	r3, [r3, #4]
}
 8002c96:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002c98:	6199      	str	r1, [r3, #24]
}
 8002c9a:	4770      	bx	lr

08002c9c <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8002c9c:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002ca2:	0409      	lsls	r1, r1, #16
 8002ca4:	6199      	str	r1, [r3, #24]
}
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	4770      	bx	lr

08002caa <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8002caa:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002cb0:	6953      	ldr	r3, [r2, #20]
 8002cb2:	404b      	eors	r3, r1
 8002cb4:	6153      	str	r3, [r2, #20]
}
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	4770      	bx	lr

08002cba <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8002cba:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 8002cbc:	6898      	ldr	r0, [r3, #8]
{
 8002cbe:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8002cc0:	b158      	cbz	r0, 8002cda <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002cc2:	2400      	movs	r4, #0
 8002cc4:	4281      	cmp	r1, r0
 8002cc6:	d113      	bne.n	8002cf0 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8002cc8:	6808      	ldr	r0, [r1, #0]
 8002cca:	b95c      	cbnz	r4, 8002ce4 <gpio_stm32_manage_callback+0x2a>
 8002ccc:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 8002cce:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002cd0:	42a1      	cmp	r1, r4
 8002cd2:	d100      	bne.n	8002cd6 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8002cd4:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	6008      	str	r0, [r1, #0]
	if (set) {
 8002cda:	b972      	cbnz	r2, 8002cfa <gpio_stm32_manage_callback+0x40>
	return 0;
 8002cdc:	2000      	movs	r0, #0
}
 8002cde:	bd30      	pop	{r4, r5, pc}
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	e7ef      	b.n	8002cc4 <gpio_stm32_manage_callback+0xa>
 8002ce4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002ce6:	68d8      	ldr	r0, [r3, #12]
 8002ce8:	4281      	cmp	r1, r0
	list->tail = node;
 8002cea:	bf08      	it	eq
 8002cec:	60dc      	streq	r4, [r3, #12]
}
 8002cee:	e7f2      	b.n	8002cd6 <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8002cf0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	2d00      	cmp	r5, #0
 8002cf6:	d1f3      	bne.n	8002ce0 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8002cf8:	b13a      	cbz	r2, 8002d0a <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8002cfa:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8002cfc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8002cfe:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 8002d00:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002d02:	2800      	cmp	r0, #0
 8002d04:	d1ea      	bne.n	8002cdc <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8002d06:	60d9      	str	r1, [r3, #12]
}
 8002d08:	e7e9      	b.n	8002cde <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8002d0a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8002d0e:	e7e6      	b.n	8002cde <gpio_stm32_manage_callback+0x24>

08002d10 <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8002d10:	6882      	ldr	r2, [r0, #8]
	data->cb_pins |= BIT(pin);
 8002d12:	2301      	movs	r3, #1
 8002d14:	fa03 f101 	lsl.w	r1, r3, r1
 8002d18:	6853      	ldr	r3, [r2, #4]
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	6053      	str	r3, [r2, #4]
}
 8002d1e:	2000      	movs	r0, #0
 8002d20:	4770      	bx	lr

08002d22 <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8002d22:	6882      	ldr	r2, [r0, #8]
	data->cb_pins &= ~BIT(pin);
 8002d24:	2301      	movs	r3, #1
 8002d26:	fa03 f101 	lsl.w	r1, r3, r1
 8002d2a:	6853      	ldr	r3, [r2, #4]
 8002d2c:	ea23 0301 	bic.w	r3, r3, r1
 8002d30:	6053      	str	r3, [r2, #4]
}
 8002d32:	2000      	movs	r0, #0
 8002d34:	4770      	bx	lr

08002d36 <gpio_stm32_configure>:
{
 8002d36:	b5f0      	push	{r4, r5, r6, r7, lr}
	pinval = 1 << pin;
 8002d38:	2401      	movs	r4, #1
 8002d3a:	408c      	lsls	r4, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8002d40:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d44:	f8d0 c000 	ldr.w	ip, [r0]
 8002d48:	007f      	lsls	r7, r7, #1
 8002d4a:	f04f 0e03 	mov.w	lr, #3
 8002d4e:	fa0e f707 	lsl.w	r7, lr, r7
 8002d52:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8002d5a:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002d5e:	f3c2 1501 	ubfx	r5, r2, #4, #2
 8002d62:	007f      	lsls	r7, r7, #1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8002d64:	f002 0630 	and.w	r6, r2, #48	; 0x30
 8002d68:	40bd      	lsls	r5, r7
 8002d6a:	ea45 050c 	orr.w	r5, r5, ip
	if (STM32_MODER_ALT_MODE == mode) {
 8002d6e:	2e20      	cmp	r6, #32
 8002d70:	6005      	str	r5, [r0, #0]
 8002d72:	d115      	bne.n	8002da0 <gpio_stm32_configure+0x6a>
		if (pin < 8) {
 8002d74:	2907      	cmp	r1, #7
 8002d76:	dc48      	bgt.n	8002e0a <gpio_stm32_configure+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	fa94 f5a4 	rbit	r5, r4
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002d7c:	6a07      	ldr	r7, [r0, #32]
  if (value == 0U)
 8002d7e:	b10d      	cbz	r5, 8002d84 <gpio_stm32_configure+0x4e>
  return __builtin_clz(value);
 8002d80:	fab5 f685 	clz	r6, r5
 8002d84:	250f      	movs	r5, #15
 8002d86:	00b6      	lsls	r6, r6, #2
 8002d88:	fa05 f606 	lsl.w	r6, r5, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 8002d90:	fab5 f585 	clz	r5, r5
 8002d94:	00ad      	lsls	r5, r5, #2
 8002d96:	ea27 0606 	bic.w	r6, r7, r6
 8002d9a:	40ab      	lsls	r3, r5
 8002d9c:	4333      	orrs	r3, r6
 8002d9e:	6203      	str	r3, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002da0:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002da2:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8002da6:	fa03 f101 	lsl.w	r1, r3, r1
 8002daa:	ea25 0304 	bic.w	r3, r5, r4
 8002dae:	4319      	orrs	r1, r3
 8002db0:	6041      	str	r1, [r0, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8002db6:	fab1 f181 	clz	r1, r1
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002dba:	6885      	ldr	r5, [r0, #8]
 8002dbc:	2603      	movs	r6, #3
 8002dbe:	0049      	lsls	r1, r1, #1
 8002dc0:	fa06 f101 	lsl.w	r1, r6, r1
 8002dc4:	ea25 0501 	bic.w	r5, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8002dcc:	fab1 f181 	clz	r1, r1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002dd0:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8002dd4:	0049      	lsls	r1, r1, #1
 8002dd6:	408b      	lsls	r3, r1
 8002dd8:	432b      	orrs	r3, r5
 8002dda:	6083      	str	r3, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 8002de0:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002de4:	68c1      	ldr	r1, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	fa94 f4a4 	rbit	r4, r4
 8002dea:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8002dec:	fab4 f484 	clz	r4, r4
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002df0:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002df4:	fa06 f303 	lsl.w	r3, r6, r3
 8002df8:	0064      	lsls	r4, r4, #1
 8002dfa:	ea21 0303 	bic.w	r3, r1, r3
 8002dfe:	fa02 f404 	lsl.w	r4, r2, r4
 8002e02:	431c      	orrs	r4, r3
 8002e04:	60c4      	str	r4, [r0, #12]
}
 8002e06:	2000      	movs	r0, #0
 8002e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e0a:	0a25      	lsrs	r5, r4, #8
 8002e0c:	6a47      	ldr	r7, [r0, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	fa95 fca5 	rbit	ip, r5
  if (value == 0U)
 8002e12:	f1bc 0f00 	cmp.w	ip, #0
 8002e16:	d001      	beq.n	8002e1c <gpio_stm32_configure+0xe6>
  return __builtin_clz(value);
 8002e18:	fabc f68c 	clz	r6, ip
 8002e1c:	00b6      	lsls	r6, r6, #2
 8002e1e:	f04f 0c0f 	mov.w	ip, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	fa95 f5a5 	rbit	r5, r5
  return __builtin_clz(value);
 8002e26:	fab5 f585 	clz	r5, r5
 8002e2a:	fa0c f606 	lsl.w	r6, ip, r6
 8002e2e:	00ad      	lsls	r5, r5, #2
 8002e30:	ea27 0606 	bic.w	r6, r7, r6
 8002e34:	40ab      	lsls	r3, r5
 8002e36:	4333      	orrs	r3, r6
 8002e38:	6243      	str	r3, [r0, #36]	; 0x24
}
 8002e3a:	e7b1      	b.n	8002da0 <gpio_stm32_configure+0x6a>

08002e3c <gpio_stm32_config>:
{
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	4613      	mov	r3, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8002e40:	6802      	ldr	r2, [r0, #0]
 8002e42:	6895      	ldr	r5, [r2, #8]
	if ((flags & GPIO_OUTPUT) != 0) {
 8002e44:	059a      	lsls	r2, r3, #22
{
 8002e46:	460c      	mov	r4, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 8002e48:	d516      	bpl.n	8002e78 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002e4a:	0799      	lsls	r1, r3, #30
 8002e4c:	d50d      	bpl.n	8002e6a <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002e4e:	075a      	lsls	r2, r3, #29
 8002e50:	d52e      	bpl.n	8002eb0 <gpio_stm32_config+0x74>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002e52:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002e54:	06d9      	lsls	r1, r3, #27
 8002e56:	d50a      	bpl.n	8002e6e <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002e5c:	0519      	lsls	r1, r3, #20
 8002e5e:	d51b      	bpl.n	8002e98 <gpio_stm32_config+0x5c>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002e60:	2101      	movs	r1, #1
 8002e62:	40a1      	lsls	r1, r4
 8002e64:	f7ff ff14 	bl	8002c90 <gpio_stm32_port_set_bits_raw>
 8002e68:	e00f      	b.n	8002e8a <gpio_stm32_config+0x4e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	e7f2      	b.n	8002e54 <gpio_stm32_config+0x18>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002e6e:	0699      	lsls	r1, r3, #26
 8002e70:	d5f4      	bpl.n	8002e5c <gpio_stm32_config+0x20>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002e76:	e7f1      	b.n	8002e5c <gpio_stm32_config+0x20>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002e78:	05d9      	lsls	r1, r3, #23
 8002e7a:	d514      	bpl.n	8002ea6 <gpio_stm32_config+0x6a>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002e7c:	06da      	lsls	r2, r3, #27
 8002e7e:	d414      	bmi.n	8002eaa <gpio_stm32_config+0x6e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002e80:	f013 0220 	ands.w	r2, r3, #32
 8002e84:	bf18      	it	ne
 8002e86:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 8002e8a:	6868      	ldr	r0, [r5, #4]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	4621      	mov	r1, r4
 8002e90:	f7ff ff51 	bl	8002d36 <gpio_stm32_configure>
 8002e94:	2000      	movs	r0, #0
}
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002e98:	055b      	lsls	r3, r3, #21
 8002e9a:	d5f6      	bpl.n	8002e8a <gpio_stm32_config+0x4e>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	40a1      	lsls	r1, r4
 8002ea0:	f7ff fefc 	bl	8002c9c <gpio_stm32_port_clear_bits_raw>
 8002ea4:	e7f1      	b.n	8002e8a <gpio_stm32_config+0x4e>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8002ea6:	2230      	movs	r2, #48	; 0x30
 8002ea8:	e7ef      	b.n	8002e8a <gpio_stm32_config+0x4e>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eae:	e7ec      	b.n	8002e8a <gpio_stm32_config+0x4e>
				return -ENOTSUP;
 8002eb0:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return err;
 8002eb4:	e7ef      	b.n	8002e96 <gpio_stm32_config+0x5a>

08002eb6 <pwm_stm32_get_cycles_per_sec>:
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 8002eb6:	6803      	ldr	r3, [r0, #0]
{
 8002eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 8002eba:	6899      	ldr	r1, [r3, #8]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8002ebc:	6885      	ldr	r5, [r0, #8]
	if (cycles == NULL) {
 8002ebe:	4614      	mov	r4, r2
 8002ec0:	b192      	cbz	r2, 8002ee8 <pwm_stm32_get_cycles_per_sec+0x32>
	if (clock_control_get_rate(data->clock,
 8002ec2:	6c68      	ldr	r0, [r5, #68]	; 0x44
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8002ec4:	6843      	ldr	r3, [r0, #4]
 8002ec6:	aa01      	add	r2, sp, #4
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	3104      	adds	r1, #4
 8002ecc:	4798      	blx	r3
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	db0d      	blt.n	8002eee <pwm_stm32_get_cycles_per_sec+0x38>
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8002ed2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
		tim_clk = bus_clk * 2U;
 8002ed4:	9b01      	ldr	r3, [sp, #4]
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8002ed6:	2000      	movs	r0, #0
		tim_clk = bus_clk * 2U;
 8002ed8:	005b      	lsls	r3, r3, #1
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8002eda:	3201      	adds	r2, #1
 8002edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ee0:	e9c4 3000 	strd	r3, r0, [r4]
}
 8002ee4:	b003      	add	sp, #12
 8002ee6:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
 8002ee8:	f06f 0015 	mvn.w	r0, #21
 8002eec:	e7fa      	b.n	8002ee4 <pwm_stm32_get_cycles_per_sec+0x2e>
		return -EIO;
 8002eee:	f06f 0004 	mvn.w	r0, #4
 8002ef2:	e7f7      	b.n	8002ee4 <pwm_stm32_get_cycles_per_sec+0x2e>

08002ef4 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8002ef4:	b082      	sub	sp, #8
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002ef6:	6803      	ldr	r3, [r0, #0]
 8002ef8:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002efa:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8002efc:	6843      	ldr	r3, [r0, #4]
 8002efe:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002f00:	9b01      	ldr	r3, [sp, #4]
}
 8002f02:	b002      	add	sp, #8
 8002f04:	4770      	bx	lr

08002f06 <uart_stm32_poll_in>:
{
 8002f06:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002f08:	6803      	ldr	r3, [r0, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002f0e:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8002f10:	071a      	lsls	r2, r3, #28
 8002f12:	d501      	bpl.n	8002f18 <uart_stm32_poll_in+0x12>
		LL_USART_ClearFlag_ORE(UartInstance);
 8002f14:	f7ff ffee 	bl	8002ef4 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002f18:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8002f1a:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002f1c:	bf43      	ittte	mi
 8002f1e:	6843      	ldrmi	r3, [r0, #4]
 8002f20:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8002f22:	2000      	movmi	r0, #0
		return -1;
 8002f24:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8002f28:	bd08      	pop	{r3, pc}

08002f2a <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002f2a:	6803      	ldr	r3, [r0, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002f30:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8002f32:	0612      	lsls	r2, r2, #24
 8002f34:	d5fc      	bpl.n	8002f30 <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8002f36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f3a:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8002f3c:	6059      	str	r1, [r3, #4]
}
 8002f3e:	4770      	bx	lr

08002f40 <uart_stm32_err_check>:
{
 8002f40:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002f42:	6803      	ldr	r3, [r0, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002f48:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8002f4a:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8002f4c:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002f4e:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8002f50:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8002f54:	bf48      	it	mi
 8002f56:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8002f5a:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8002f5c:	bf48      	it	mi
 8002f5e:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 8002f62:	07d3      	lsls	r3, r2, #31
 8002f64:	d501      	bpl.n	8002f6a <uart_stm32_err_check+0x2a>
		LL_USART_ClearFlag_ORE(UartInstance);
 8002f66:	f7ff ffc5 	bl	8002ef4 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8002f6a:	0791      	lsls	r1, r2, #30
 8002f6c:	d501      	bpl.n	8002f72 <uart_stm32_err_check+0x32>
		LL_USART_ClearFlag_PE(UartInstance);
 8002f6e:	f7ff ffc1 	bl	8002ef4 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8002f72:	0753      	lsls	r3, r2, #29
 8002f74:	d501      	bpl.n	8002f7a <uart_stm32_err_check+0x3a>
		LL_USART_ClearFlag_FE(UartInstance);
 8002f76:	f7ff ffbd 	bl	8002ef4 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8002f7a:	f7ff ffbb 	bl	8002ef4 <LL_USART_ClearFlag_FE>
}
 8002f7e:	4610      	mov	r0, r2
 8002f80:	bd08      	pop	{r3, pc}

08002f82 <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8002f82:	6803      	ldr	r3, [r0, #0]
{
 8002f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f86:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002f88:	6899      	ldr	r1, [r3, #8]
	if (clock_control_get_rate(data->clock,
 8002f8a:	6883      	ldr	r3, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002f8c:	f851 4b08 	ldr.w	r4, [r1], #8
	if (clock_control_get_rate(data->clock,
 8002f90:	6858      	ldr	r0, [r3, #4]
 8002f92:	6843      	ldr	r3, [r0, #4]
 8002f94:	aa01      	add	r2, sp, #4
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4798      	blx	r3
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	db14      	blt.n	8002fc8 <uart_stm32_set_baudrate+0x46>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f9e:	9801      	ldr	r0, [sp, #4]
 8002fa0:	2119      	movs	r1, #25
 8002fa2:	00aa      	lsls	r2, r5, #2
 8002fa4:	0fab      	lsrs	r3, r5, #30
 8002fa6:	fba0 0101 	umull	r0, r1, r0, r1
 8002faa:	f7fd f8ed 	bl	8000188 <__aeabi_uldivmod>
 8002fae:	2264      	movs	r2, #100	; 0x64
 8002fb0:	fbb0 f1f2 	udiv	r1, r0, r2
 8002fb4:	fb02 0311 	mls	r3, r2, r1, r0
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	3332      	adds	r3, #50	; 0x32
 8002fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fc0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	60a3      	str	r3, [r4, #8]
}
 8002fc8:	b003      	add	sp, #12
 8002fca:	bd30      	pop	{r4, r5, pc}

08002fcc <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8002fcc:	6883      	ldr	r3, [r0, #8]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002fd2:	6803      	ldr	r3, [r0, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002fd8:	68d3      	ldr	r3, [r2, #12]
 8002fda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d023      	beq.n	800302c <uart_stm32_config_get+0x60>
		return UART_CFG_PARITY_NONE;
 8002fe4:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8002fe8:	4243      	negs	r3, r0
 8002fea:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8002fec:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002fee:	6913      	ldr	r3, [r2, #16]
 8002ff0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8002ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff8:	d01a      	beq.n	8003030 <uart_stm32_config_get+0x64>
 8002ffa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ffe:	d019      	beq.n	8003034 <uart_stm32_config_get+0x68>
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf14      	ite	ne
 8003004:	2303      	movne	r3, #3
 8003006:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8003008:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800300a:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 800300c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 8003010:	bf14      	ite	ne
 8003012:	2304      	movne	r3, #4
 8003014:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8003016:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003018:	6953      	ldr	r3, [r2, #20]
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800301e:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8003022:	4253      	negs	r3, r2
 8003024:	4153      	adcs	r3, r2
 8003026:	71cb      	strb	r3, [r1, #7]
}
 8003028:	2000      	movs	r0, #0
 800302a:	4770      	bx	lr
	switch (parity) {
 800302c:	2302      	movs	r3, #2
 800302e:	e7dd      	b.n	8002fec <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 8003030:	2300      	movs	r3, #0
 8003032:	e7e9      	b.n	8003008 <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 8003034:	2302      	movs	r3, #2
 8003036:	e7e7      	b.n	8003008 <uart_stm32_config_get+0x3c>

08003038 <HAL_TIM_PWM_MspInit>:
 8003038:	4770      	bx	lr

0800303a <HAL_TIM_PWM_Init>:
{
 800303a:	b510      	push	{r4, lr}
  if (htim == NULL)
 800303c:	4604      	mov	r4, r0
 800303e:	b1a0      	cbz	r0, 800306a <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003040:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003044:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003048:	b91b      	cbnz	r3, 8003052 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800304a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800304e:	f7ff fff3 	bl	8003038 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003052:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003054:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305a:	1d21      	adds	r1, r4, #4
 800305c:	f7fe fcde 	bl	8001a1c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003060:	2301      	movs	r3, #1
 8003062:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003066:	2000      	movs	r0, #0
}
 8003068:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800306a:	2001      	movs	r0, #1
 800306c:	e7fc      	b.n	8003068 <HAL_TIM_PWM_Init+0x2e>

0800306e <HAL_TIM_PWM_ConfigChannel>:
{
 800306e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003070:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
{
 8003076:	4604      	mov	r4, r0
 8003078:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800307c:	d010      	beq.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x32>
 800307e:	2301      	movs	r3, #1
  switch (Channel)
 8003080:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003082:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800308a:	d03f      	beq.n	800310c <HAL_TIM_PWM_ConfigChannel+0x9e>
 800308c:	d809      	bhi.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x34>
 800308e:	b1da      	cbz	r2, 80030c8 <HAL_TIM_PWM_ConfigChannel+0x5a>
 8003090:	2a04      	cmp	r2, #4
 8003092:	d02a      	beq.n	80030ea <HAL_TIM_PWM_ConfigChannel+0x7c>
  htim->State = HAL_TIM_STATE_READY;
 8003094:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003096:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003098:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800309c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80030a0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80030a2:	2a0c      	cmp	r2, #12
 80030a4:	d1f6      	bne.n	8003094 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030a6:	6820      	ldr	r0, [r4, #0]
 80030a8:	f7fe fc92 	bl	80019d0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030c6:	e030      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c8:	6820      	ldr	r0, [r4, #0]
 80030ca:	f7fe fc19 	bl	8001900 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d2:	699a      	ldr	r2, [r3, #24]
 80030d4:	f042 0208 	orr.w	r2, r2, #8
 80030d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	f022 0204 	bic.w	r2, r2, #4
 80030e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030e6:	619a      	str	r2, [r3, #24]
      break;
 80030e8:	e7d4      	b.n	8003094 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	f7fe fcfc 	bl	8001ae8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800310a:	e7ec      	b.n	80030e6 <HAL_TIM_PWM_ConfigChannel+0x78>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800310c:	6820      	ldr	r0, [r4, #0]
 800310e:	f7fe fc29 	bl	8001964 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003112:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003114:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	f042 0208 	orr.w	r2, r2, #8
 800311c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	f022 0204 	bic.w	r2, r2, #4
 8003124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800312a:	61da      	str	r2, [r3, #28]
      break;
 800312c:	e7b2      	b.n	8003094 <HAL_TIM_PWM_ConfigChannel+0x26>

0800312e <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800312e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003130:	f001 011f 	and.w	r1, r1, #31
{
 8003134:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003136:	2401      	movs	r4, #1
 8003138:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800313a:	ea23 0304 	bic.w	r3, r3, r4
 800313e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003140:	6a03      	ldr	r3, [r0, #32]
 8003142:	408a      	lsls	r2, r1
 8003144:	431a      	orrs	r2, r3
 8003146:	6202      	str	r2, [r0, #32]
}
 8003148:	bd10      	pop	{r4, pc}

0800314a <HAL_TIM_PWM_Start>:
 800314a:	f7fe bd03 	b.w	8001b54 <HAL_TIM_OC_Start>

0800314e <arch_system_halt>:
	__asm__ volatile(
 800314e:	f04f 0210 	mov.w	r2, #16
 8003152:	f3ef 8311 	mrs	r3, BASEPRI
 8003156:	f382 8811 	msr	BASEPRI, r2
 800315a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800315e:	e7fe      	b.n	800315e <arch_system_halt+0x10>

08003160 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8003160:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8003162:	f7ff fff4 	bl	800314e <arch_system_halt>

08003166 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003168:	4605      	mov	r5, r0
 800316a:	460e      	mov	r6, r1
 800316c:	f04f 0310 	mov.w	r3, #16
 8003170:	f3ef 8711 	mrs	r7, BASEPRI
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 800317c:	f7ff f9e6 	bl	800254c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
 8003180:	4631      	mov	r1, r6
 8003182:	4604      	mov	r4, r0
 8003184:	4628      	mov	r0, r5
 8003186:	f7ff ffeb 	bl	8003160 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800318a:	f387 8811 	msr	BASEPRI, r7
 800318e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8003192:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 8003194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003198:	f7fe b8cc 	b.w	8001334 <z_impl_k_thread_abort>

0800319c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800319c:	b921      	cbnz	r1, 80031a8 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800319e:	f3ef 8005 	mrs	r0, IPSR
 80031a2:	b908      	cbnz	r0, 80031a8 <z_reschedule+0xc>
 80031a4:	f7fd beca 	b.w	8000f3c <arch_swap>
 80031a8:	f381 8811 	msr	BASEPRI, r1
 80031ac:	f3bf 8f6f 	isb	sy
}
 80031b0:	4770      	bx	lr

080031b2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80031b2:	4603      	mov	r3, r0
 80031b4:	b920      	cbnz	r0, 80031c0 <z_reschedule_irqlock+0xe>
 80031b6:	f3ef 8205 	mrs	r2, IPSR
 80031ba:	b90a      	cbnz	r2, 80031c0 <z_reschedule_irqlock+0xe>
 80031bc:	f7fd bebe 	b.w	8000f3c <arch_swap>
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
}
 80031c8:	4770      	bx	lr

080031ca <z_reschedule_unlocked>:
	__asm__ volatile(
 80031ca:	f04f 0310 	mov.w	r3, #16
 80031ce:	f3ef 8011 	mrs	r0, BASEPRI
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80031da:	f7ff bfea 	b.w	80031b2 <z_reschedule_irqlock>

080031de <z_priq_dumb_best>:
{
 80031de:	4603      	mov	r3, r0
	return list->head == list;
 80031e0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80031e2:	4283      	cmp	r3, r0
 80031e4:	d003      	beq.n	80031ee <z_priq_dumb_best+0x10>
	if (n != NULL) {
 80031e6:	2800      	cmp	r0, #0
 80031e8:	bf38      	it	cc
 80031ea:	2000      	movcc	r0, #0
 80031ec:	4770      	bx	lr
	struct k_thread *thread = NULL;
 80031ee:	2000      	movs	r0, #0
}
 80031f0:	4770      	bx	lr

080031f2 <z_ready_thread>:
{
 80031f2:	b510      	push	{r4, lr}
 80031f4:	f04f 0310 	mov.w	r3, #16
 80031f8:	f3ef 8411 	mrs	r4, BASEPRI
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
 8003204:	f7fe ff88 	bl	8002118 <ready_thread>
	__asm__ volatile(
 8003208:	f384 8811 	msr	BASEPRI, r4
 800320c:	f3bf 8f6f 	isb	sy
}
 8003210:	bd10      	pop	{r4, pc}

08003212 <z_thread_timeout>:
{
 8003212:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
 8003214:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 8003218:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800321a:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
 800321e:	b1c3      	cbz	r3, 8003252 <z_thread_timeout+0x40>
	__asm__ volatile(
 8003220:	f04f 0310 	mov.w	r3, #16
 8003224:	f3ef 8511 	mrs	r5, BASEPRI
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8003230:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8003234:	f7fe ff1a 	bl	800206c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8003238:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800323c:	f023 0302 	bic.w	r3, r3, #2
 8003240:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
 800324a:	f385 8811 	msr	BASEPRI, r5
 800324e:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8003252:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8003256:	f023 0314 	bic.w	r3, r3, #20
 800325a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
 800325e:	4608      	mov	r0, r1
}
 8003260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
 8003264:	f7ff bfc5 	b.w	80031f2 <z_ready_thread>

08003268 <z_remove_thread_from_ready_q>:
{
 8003268:	b510      	push	{r4, lr}
	__asm__ volatile(
 800326a:	f04f 0310 	mov.w	r3, #16
 800326e:	f3ef 8411 	mrs	r4, BASEPRI
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
 800327a:	f7ff f8a5 	bl	80023c8 <unready_thread>
	__asm__ volatile(
 800327e:	f384 8811 	msr	BASEPRI, r4
 8003282:	f3bf 8f6f 	isb	sy
}
 8003286:	bd10      	pop	{r4, pc}

08003288 <z_abort_timeout>:
{
 8003288:	b510      	push	{r4, lr}
	__asm__ volatile(
 800328a:	f04f 0210 	mov.w	r2, #16
 800328e:	f3ef 8411 	mrs	r4, BASEPRI
 8003292:	f382 8811 	msr	BASEPRI, r2
 8003296:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800329a:	6803      	ldr	r3, [r0, #0]
 800329c:	b13b      	cbz	r3, 80032ae <z_abort_timeout+0x26>
			remove_timeout(to);
 800329e:	f7ff f9d5 	bl	800264c <remove_timeout>
			ret = 0;
 80032a2:	2000      	movs	r0, #0
	__asm__ volatile(
 80032a4:	f384 8811 	msr	BASEPRI, r4
 80032a8:	f3bf 8f6f 	isb	sy
}
 80032ac:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80032ae:	f06f 0015 	mvn.w	r0, #21
 80032b2:	e7f7      	b.n	80032a4 <z_abort_timeout+0x1c>

080032b4 <z_get_next_timeout_expiry>:
{
 80032b4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80032b6:	f04f 0310 	mov.w	r3, #16
 80032ba:	f3ef 8411 	mrs	r4, BASEPRI
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 80032c6:	f7ff f9d5 	bl	8002674 <next_timeout>
	__asm__ volatile(
 80032ca:	f384 8811 	msr	BASEPRI, r4
 80032ce:	f3bf 8f6f 	isb	sy
}
 80032d2:	bd10      	pop	{r4, pc}

080032d4 <z_set_timeout_expiry>:
{
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4604      	mov	r4, r0
 80032d8:	460d      	mov	r5, r1
	__asm__ volatile(
 80032da:	f04f 0310 	mov.w	r3, #16
 80032de:	f3ef 8611 	mrs	r6, BASEPRI
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 80032ea:	f7ff f9c3 	bl	8002674 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80032ee:	2801      	cmp	r0, #1
 80032f0:	dd05      	ble.n	80032fe <z_set_timeout_expiry+0x2a>
 80032f2:	42a0      	cmp	r0, r4
 80032f4:	dd03      	ble.n	80032fe <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 80032f6:	4629      	mov	r1, r5
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7fd fd9d 	bl	8000e38 <z_clock_set_timeout>
	__asm__ volatile(
 80032fe:	f386 8811 	msr	BASEPRI, r6
 8003302:	f3bf 8f6f 	isb	sy
}
 8003306:	bd70      	pop	{r4, r5, r6, pc}

08003308 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8003308:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 800330a:	f7ff fa9d 	bl	8002848 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 800330e:	bd08      	pop	{r3, pc}

08003310 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8003310:	b508      	push	{r3, lr}
	__asm__ volatile(
 8003312:	f04f 0210 	mov.w	r2, #16
 8003316:	f3ef 8311 	mrs	r3, BASEPRI
 800331a:	f382 8811 	msr	BASEPRI, r2
 800331e:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8003322:	f7ff ffc7 	bl	80032b4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8003326:	2101      	movs	r1, #1
 8003328:	2802      	cmp	r0, #2
 800332a:	bfd8      	it	le
 800332c:	4608      	movle	r0, r1
 800332e:	f7ff ffd1 	bl	80032d4 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8003332:	f7fd feb5 	bl	80010a0 <arch_cpu_idle>
}
 8003336:	e7ec      	b.n	8003312 <idle+0x2>

08003338 <k_heap_init>:
{
 8003338:	b410      	push	{r4}
 800333a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 800333e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8003342:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8003344:	f7ff bb48 	b.w	80029d8 <sys_heap_init>

08003348 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 8003348:	4770      	bx	lr
