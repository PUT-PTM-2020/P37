
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	200012e8 	.word	0x200012e8
 8000004:	08001255 	.word	0x08001255
 8000008:	080033d1 	.word	0x080033d1
 800000c:	08001281 	.word	0x08001281
 8000010:	08001281 	.word	0x08001281
 8000014:	08001281 	.word	0x08001281
 8000018:	08001281 	.word	0x08001281
	...
 800002c:	080010dd 	.word	0x080010dd
 8000030:	08001281 	.word	0x08001281
 8000034:	00000000 	.word	0x00000000
 8000038:	08001095 	.word	0x08001095
 800003c:	08000eb5 	.word	0x08000eb5

08000040 <_irq_vector_table>:
 8000040:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000050:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000060:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000070:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000080:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000090:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 80000a0:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 80000b0:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 80000c0:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 80000d0:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 80000e0:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 80000f0:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000100:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000110:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000120:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000130:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000140:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000150:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000160:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000170:	0800122d 0800122d 0800122d 0800122d     -...-...-...-...
 8000180:	0800122d 0800122d                       -...-...

Disassembly of section text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b96e 	b.w	800047c <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460e      	mov	r6, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468c      	mov	ip, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8081 	bne.w	80002cc <__udivmoddi4+0x114>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d945      	bls.n	800025c <__udivmoddi4+0xa4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa06 f302 	lsl.w	r3, r6, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0c03 	orr.w	ip, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6fe 	udiv	r6, ip, lr
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb0e cc16 	mls	ip, lr, r6, ip
 80001fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80001fe:	fb06 f001 	mul.w	r0, r6, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800020c:	f080 8115 	bcs.w	800043a <__udivmoddi4+0x282>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8112 	bls.w	800043a <__udivmoddi4+0x282>
 8000216:	3e02      	subs	r6, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a1b      	subs	r3, r3, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000222:	fb0e 3310 	mls	r3, lr, r0, r3
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	fb00 f101 	mul.w	r1, r0, r1
 800022e:	42a1      	cmp	r1, r4
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	193c      	adds	r4, r7, r4
 8000234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000238:	f080 8101 	bcs.w	800043e <__udivmoddi4+0x286>
 800023c:	42a1      	cmp	r1, r4
 800023e:	f240 80fe 	bls.w	800043e <__udivmoddi4+0x286>
 8000242:	3802      	subs	r0, #2
 8000244:	443c      	add	r4, r7
 8000246:	1a64      	subs	r4, r4, r1
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	2100      	movs	r1, #0
 800024e:	b11d      	cbz	r5, 8000258 <__udivmoddi4+0xa0>
 8000250:	40d4      	lsrs	r4, r2
 8000252:	2300      	movs	r3, #0
 8000254:	e9c5 4300 	strd	r4, r3, [r5]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	b902      	cbnz	r2, 8000260 <__udivmoddi4+0xa8>
 800025e:	deff      	udf	#255	; 0xff
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	2a00      	cmp	r2, #0
 8000266:	d14f      	bne.n	8000308 <__udivmoddi4+0x150>
 8000268:	1bcb      	subs	r3, r1, r7
 800026a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026e:	fa1f f887 	uxth.w	r8, r7
 8000272:	2101      	movs	r1, #1
 8000274:	fbb3 fcfe 	udiv	ip, r3, lr
 8000278:	0c26      	lsrs	r6, r4, #16
 800027a:	fb0e 331c 	mls	r3, lr, ip, r3
 800027e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8000282:	fb08 f30c 	mul.w	r3, r8, ip
 8000286:	42b3      	cmp	r3, r6
 8000288:	d907      	bls.n	800029a <__udivmoddi4+0xe2>
 800028a:	19be      	adds	r6, r7, r6
 800028c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000290:	d202      	bcs.n	8000298 <__udivmoddi4+0xe0>
 8000292:	42b3      	cmp	r3, r6
 8000294:	f200 80eb 	bhi.w	800046e <__udivmoddi4+0x2b6>
 8000298:	4684      	mov	ip, r0
 800029a:	1af6      	subs	r6, r6, r3
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb6 f0fe 	udiv	r0, r6, lr
 80002a2:	fb0e 6610 	mls	r6, lr, r0, r6
 80002a6:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002aa:	fb08 f800 	mul.w	r8, r8, r0
 80002ae:	45a0      	cmp	r8, r4
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x10a>
 80002b2:	193c      	adds	r4, r7, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x108>
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	f200 80d2 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002c0:	4618      	mov	r0, r3
 80002c2:	eba4 0408 	sub.w	r4, r4, r8
 80002c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ca:	e7c0      	b.n	800024e <__udivmoddi4+0x96>
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x12a>
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	f000 80af 	beq.w	8000434 <__udivmoddi4+0x27c>
 80002d6:	2100      	movs	r1, #0
 80002d8:	e9c5 0600 	strd	r0, r6, [r5]
 80002dc:	4608      	mov	r0, r1
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d149      	bne.n	800037e <__udivmoddi4+0x1c6>
 80002ea:	42b3      	cmp	r3, r6
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0x13c>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80bb 	bhi.w	800046a <__udivmoddi4+0x2b2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb66 0303 	sbc.w	r3, r6, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469c      	mov	ip, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0aa      	beq.n	8000258 <__udivmoddi4+0xa0>
 8000302:	e9c5 4c00 	strd	r4, ip, [r5]
 8000306:	e7a7      	b.n	8000258 <__udivmoddi4+0xa0>
 8000308:	f1c2 0320 	rsb	r3, r2, #32
 800030c:	4097      	lsls	r7, r2
 800030e:	40d8      	lsrs	r0, r3
 8000310:	4091      	lsls	r1, r2
 8000312:	40de      	lsrs	r6, r3
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	4308      	orrs	r0, r1
 800031a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800031e:	fbb6 f1fe 	udiv	r1, r6, lr
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb0e 6611 	mls	r6, lr, r1, r6
 800032a:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 800032e:	fb01 f308 	mul.w	r3, r1, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	fa04 f402 	lsl.w	r4, r4, r2
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x196>
 800033a:	19be      	adds	r6, r7, r6
 800033c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000340:	f080 808e 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 8000344:	42b3      	cmp	r3, r6
 8000346:	f240 808b 	bls.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	3902      	subs	r1, #2
 800034c:	443e      	add	r6, r7
 800034e:	1af3      	subs	r3, r6, r3
 8000350:	b286      	uxth	r6, r0
 8000352:	fbb3 f0fe 	udiv	r0, r3, lr
 8000356:	fb0e 3310 	mls	r3, lr, r0, r3
 800035a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800035e:	fb00 f308 	mul.w	r3, r0, r8
 8000362:	42b3      	cmp	r3, r6
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x1be>
 8000366:	19be      	adds	r6, r7, r6
 8000368:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800036c:	d274      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 800036e:	42b3      	cmp	r3, r6
 8000370:	d972      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000372:	3802      	subs	r0, #2
 8000374:	443e      	add	r6, r7
 8000376:	1af3      	subs	r3, r6, r3
 8000378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037c:	e77a      	b.n	8000274 <__udivmoddi4+0xbc>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	fa03 f401 	lsl.w	r4, r3, r1
 8000386:	fa22 f307 	lsr.w	r3, r2, r7
 800038a:	431c      	orrs	r4, r3
 800038c:	fa20 f907 	lsr.w	r9, r0, r7
 8000390:	fa06 f301 	lsl.w	r3, r6, r1
 8000394:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000398:	40fe      	lsrs	r6, r7
 800039a:	ea49 0903 	orr.w	r9, r9, r3
 800039e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80003a2:	fbb6 fefc 	udiv	lr, r6, ip
 80003a6:	fa1f f884 	uxth.w	r8, r4
 80003aa:	fb0c 661e 	mls	r6, ip, lr, r6
 80003ae:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80003b2:	fb0e fa08 	mul.w	sl, lr, r8
 80003b6:	45b2      	cmp	sl, r6
 80003b8:	fa02 f201 	lsl.w	r2, r2, r1
 80003bc:	fa00 f301 	lsl.w	r3, r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x21c>
 80003c2:	19a6      	adds	r6, r4, r6
 80003c4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80003c8:	d248      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003ca:	45b2      	cmp	sl, r6
 80003cc:	d946      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d2:	4426      	add	r6, r4
 80003d4:	eba6 060a 	sub.w	r6, r6, sl
 80003d8:	fa1f f989 	uxth.w	r9, r9
 80003dc:	fbb6 f0fc 	udiv	r0, r6, ip
 80003e0:	fb0c 6610 	mls	r6, ip, r0, r6
 80003e4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45b0      	cmp	r8, r6
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	19a6      	adds	r6, r4, r6
 80003f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45b0      	cmp	r8, r6
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	4426      	add	r6, r4
 8000400:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000404:	eba6 0608 	sub.w	r6, r6, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454e      	cmp	r6, r9
 800040e:	46c4      	mov	ip, r8
 8000410:	46ce      	mov	lr, r9
 8000412:	d318      	bcc.n	8000446 <__udivmoddi4+0x28e>
 8000414:	d015      	beq.n	8000442 <__udivmoddi4+0x28a>
 8000416:	b375      	cbz	r5, 8000476 <__udivmoddi4+0x2be>
 8000418:	ebb3 020c 	subs.w	r2, r3, ip
 800041c:	eb66 060e 	sbc.w	r6, r6, lr
 8000420:	fa06 f707 	lsl.w	r7, r6, r7
 8000424:	fa22 f301 	lsr.w	r3, r2, r1
 8000428:	40ce      	lsrs	r6, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	e9c5 7600 	strd	r7, r6, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e711      	b.n	8000258 <__udivmoddi4+0xa0>
 8000434:	4629      	mov	r1, r5
 8000436:	4628      	mov	r0, r5
 8000438:	e70e      	b.n	8000258 <__udivmoddi4+0xa0>
 800043a:	4666      	mov	r6, ip
 800043c:	e6ed      	b.n	800021a <__udivmoddi4+0x62>
 800043e:	4618      	mov	r0, r3
 8000440:	e701      	b.n	8000246 <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e7      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000446:	ebb8 0c02 	subs.w	ip, r8, r2
 800044a:	eb69 0404 	sbc.w	r4, r9, r4
 800044e:	3801      	subs	r0, #1
 8000450:	46a6      	mov	lr, r4
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4660      	mov	r0, ip
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78c      	b.n	8000376 <__udivmoddi4+0x1be>
 800045c:	4686      	mov	lr, r0
 800045e:	e7b9      	b.n	80003d4 <__udivmoddi4+0x21c>
 8000460:	4661      	mov	r1, ip
 8000462:	e774      	b.n	800034e <__udivmoddi4+0x196>
 8000464:	3802      	subs	r0, #2
 8000466:	443c      	add	r4, r7
 8000468:	e72b      	b.n	80002c2 <__udivmoddi4+0x10a>
 800046a:	4608      	mov	r0, r1
 800046c:	e747      	b.n	80002fe <__udivmoddi4+0x146>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443e      	add	r6, r7
 8000474:	e711      	b.n	800029a <__udivmoddi4+0xe2>
 8000476:	4629      	mov	r1, r5
 8000478:	e6ee      	b.n	8000258 <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <spi_init>:
    .frequency = 5000000,
    .operation = (SPI_WORD_SET(8) | SPI_TRANSFER_MSB | SPI_MODE_CPOL | SPI_MODE_CPHA),
    .slave = 0
};

uint8_t spi_init(void){
 8000480:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8000482:	4804      	ldr	r0, [pc, #16]	; (8000494 <spi_init+0x14>)
 8000484:	f001 ffd2 	bl	800242c <z_impl_device_get_binding>
    const char *spi_name = "SPI_1";
    spi_dev = device_get_binding(spi_name);
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <spi_init+0x18>)
 800048a:	6018      	str	r0, [r3, #0]

    if (spi_dev == NULL)
        return 1;
    else
        return 0;
}
 800048c:	fab0 f080 	clz	r0, r0
 8000490:	0940      	lsrs	r0, r0, #5
 8000492:	bd08      	pop	{r3, pc}
 8000494:	08004436 	.word	0x08004436
 8000498:	20000010 	.word	0x20000010

0800049c <gpio_init>:

uint8_t gpio_init(void){
 800049c:	b538      	push	{r3, r4, r5, lr}
 800049e:	4811      	ldr	r0, [pc, #68]	; (80004e4 <gpio_init+0x48>)
	uint8_t ret = 0;

	gpio_CE_dev = device_get_binding(CE_PORT);
 80004a0:	4c11      	ldr	r4, [pc, #68]	; (80004e8 <gpio_init+0x4c>)
 80004a2:	f001 ffc3 	bl	800242c <z_impl_device_get_binding>
 80004a6:	6020      	str	r0, [r4, #0]
 80004a8:	4810      	ldr	r0, [pc, #64]	; (80004ec <gpio_init+0x50>)
	gpio_CSN_dev = device_get_binding(CSN_PORT);
 80004aa:	4d11      	ldr	r5, [pc, #68]	; (80004f0 <gpio_init+0x54>)
 80004ac:	f001 ffbe 	bl	800242c <z_impl_device_get_binding>
 80004b0:	6028      	str	r0, [r5, #0]

	if (gpio_CSN_dev == NULL || gpio_CE_dev == NULL)
 80004b2:	b1a8      	cbz	r0, 80004e0 <gpio_init+0x44>
 80004b4:	6820      	ldr	r0, [r4, #0]
 80004b6:	b198      	cbz	r0, 80004e0 <gpio_init+0x44>
		return 1;
	
	ret = gpio_pin_configure(gpio_CE_dev, CE_PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
 80004b8:	2107      	movs	r1, #7
 80004ba:	f002 fdc5 	bl	8003048 <gpio_pin_configure.constprop.0>
 80004be:	4604      	mov	r4, r0

	printk("GPIO ret: %d\n", ret);
 80004c0:	b2c1      	uxtb	r1, r0
 80004c2:	480c      	ldr	r0, [pc, #48]	; (80004f4 <gpio_init+0x58>)
 80004c4:	f002 fe3e 	bl	8003144 <printk>
	ret |= gpio_pin_configure(gpio_CSN_dev, CSN_PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
 80004c8:	2106      	movs	r1, #6
 80004ca:	6828      	ldr	r0, [r5, #0]
 80004cc:	f002 fdbc 	bl	8003048 <gpio_pin_configure.constprop.0>
 80004d0:	4320      	orrs	r0, r4
 80004d2:	b2c4      	uxtb	r4, r0

	printk("GPIO ret: %d\n", ret);
 80004d4:	4621      	mov	r1, r4
 80004d6:	4807      	ldr	r0, [pc, #28]	; (80004f4 <gpio_init+0x58>)
 80004d8:	f002 fe34 	bl	8003144 <printk>

	return ret;
}
 80004dc:	4620      	mov	r0, r4
 80004de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
 80004e0:	2401      	movs	r4, #1
 80004e2:	e7fb      	b.n	80004dc <gpio_init+0x40>
 80004e4:	0800443c 	.word	0x0800443c
 80004e8:	20000008 	.word	0x20000008
 80004ec:	08004442 	.word	0x08004442
 80004f0:	2000000c 	.word	0x2000000c
 80004f4:	08004448 	.word	0x08004448

080004f8 <begin_trans>:

void begin_trans(void){
	// set CSN LOW
	gpio_pin_set(gpio_CSN_dev, CSN_PIN, 0);
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <begin_trans+0x18>)
 80004fa:	6818      	ldr	r0, [r3, #0]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80004fc:	6883      	ldr	r3, [r0, #8]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	065b      	lsls	r3, r3, #25
	return api->port_clear_bits_raw(port, pins);
 8000502:	6843      	ldr	r3, [r0, #4]
	return api->port_set_bits_raw(port, pins);
 8000504:	f04f 0140 	mov.w	r1, #64	; 0x40
	return api->port_clear_bits_raw(port, pins);
 8000508:	bf54      	ite	pl
 800050a:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 800050c:	68db      	ldrmi	r3, [r3, #12]
 800050e:	4718      	bx	r3
 8000510:	2000000c 	.word	0x2000000c

08000514 <end_trans>:
}

void end_trans(void){
	// set CSN HIGH
	gpio_pin_set(gpio_CSN_dev, CSN_PIN, 1);
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <end_trans+0x18>)
 8000516:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8000518:	6883      	ldr	r3, [r0, #8]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	065b      	lsls	r3, r3, #25
	return api->port_set_bits_raw(port, pins);
 800051e:	6843      	ldr	r3, [r0, #4]
	return api->port_clear_bits_raw(port, pins);
 8000520:	f04f 0140 	mov.w	r1, #64	; 0x40
	return api->port_set_bits_raw(port, pins);
 8000524:	bf54      	ite	pl
 8000526:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8000528:	691b      	ldrmi	r3, [r3, #16]
 800052a:	4718      	bx	r3
 800052c:	2000000c 	.word	0x2000000c

08000530 <spi_send>:

/*
	Send byte 
	based on spi_send_test()
*/
uint8_t spi_send(uint8_t mess){
 8000530:	b510      	push	{r4, lr}
    int err;
	static uint8_t tx_buffer[1];
	tx_buffer[0] = mess;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <spi_send+0x54>)
 8000534:	7018      	strb	r0, [r3, #0]
	static uint8_t rx_buffer[1];

	const struct spi_buf tx_buf = {
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <spi_send+0x58>)
 8000538:	e893 0003 	ldmia.w	r3, {r0, r1}
uint8_t spi_send(uint8_t mess){
 800053c:	b088      	sub	sp, #32
	const struct spi_buf tx_buf = {
 800053e:	466a      	mov	r2, sp
 8000540:	e882 0003 	stmia.w	r2, {r0, r1}
	const struct spi_buf_set tx = {
		&tx_buf,
		1
	};

	struct spi_buf rx_buf = {
 8000544:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
	const struct spi_buf_set tx = {
 8000548:	9202      	str	r2, [sp, #8]
 800054a:	2401      	movs	r4, #1
	struct spi_buf rx_buf = {
 800054c:	aa04      	add	r2, sp, #16
 800054e:	e882 0003 	stmia.w	r2, {r0, r1}
		rx_buffer,
		sizeof(rx_buffer),
	};
	const struct spi_buf_set rx = {
 8000552:	e9cd 2406 	strd	r2, r4, [sp, #24]
	const struct spi_buf_set tx = {
 8000556:	9403      	str	r4, [sp, #12]
		&rx_buf,
		1
	};

	begin_trans();
 8000558:	f7ff ffce 	bl	80004f8 <begin_trans>
	err = spi_transceive(spi_dev, &config, &tx, &rx);
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <spi_send+0x5c>)
 800055e:	6818      	ldr	r0, [r3, #0]
				       const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8000560:	6843      	ldr	r3, [r0, #4]
 8000562:	490b      	ldr	r1, [pc, #44]	; (8000590 <spi_send+0x60>)
 8000564:	681c      	ldr	r4, [r3, #0]
 8000566:	aa02      	add	r2, sp, #8
 8000568:	ab06      	add	r3, sp, #24
 800056a:	47a0      	blx	r4
 800056c:	4604      	mov	r4, r0
	end_trans();
 800056e:	f7ff ffd1 	bl	8000514 <end_trans>
	
	if (err) {
 8000572:	b11c      	cbz	r4, 800057c <spi_send+0x4c>
		printk("SPI error: %d\n", err);
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <spi_send+0x64>)
 8000576:	4621      	mov	r1, r4
 8000578:	f002 fde4 	bl	8003144 <printk>
	}

	return rx_buffer[0];
}
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <spi_send+0x68>)
 800057e:	7818      	ldrb	r0, [r3, #0]
 8000580:	b008      	add	sp, #32
 8000582:	bd10      	pop	{r4, pc}
 8000584:	200002de 	.word	0x200002de
 8000588:	080041c8 	.word	0x080041c8
 800058c:	20000010 	.word	0x20000010
 8000590:	20001c28 	.word	0x20001c28
 8000594:	0800445d 	.word	0x0800445d
 8000598:	200002dd 	.word	0x200002dd

0800059c <init_nrf>:

		k_sleep(K_MSEC(5));
	}
}

uint8_t init_nrf(void){
 800059c:	b510      	push	{r4, lr}
	printk("hej0");
 800059e:	4824      	ldr	r0, [pc, #144]	; (8000630 <init_nrf+0x94>)
 80005a0:	f002 fdd0 	bl	8003144 <printk>
    uint8_t setup = 0;


	write_register(0x00, 0x0C);
 80005a4:	210c      	movs	r1, #12
 80005a6:	2000      	movs	r0, #0
 80005a8:	f002 fd5f 	bl	800306a <write_register>
	
	printk("hej1");
 80005ac:	4821      	ldr	r0, [pc, #132]	; (8000634 <init_nrf+0x98>)
 80005ae:	f002 fdc9 	bl	8003144 <printk>
	write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
 80005b2:	215f      	movs	r1, #95	; 0x5f
 80005b4:	2004      	movs	r0, #4
 80005b6:	f002 fd58 	bl	800306a <write_register>

	set_retries(5, 15);

	printk("hej2\n");
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <init_nrf+0x9c>)
 80005bc:	f002 fdc2 	bl	8003144 <printk>

	if(set_data_rate(RF24_250KBPS))
 80005c0:	2002      	movs	r0, #2
 80005c2:	f002 fd6a 	bl	800309a <set_data_rate>
 80005c6:	b110      	cbz	r0, 80005ce <init_nrf+0x32>
		printk("OK\n");
 80005c8:	481c      	ldr	r0, [pc, #112]	; (800063c <init_nrf+0xa0>)
 80005ca:	f002 fdbb 	bl	8003144 <printk>
    
	setup = read_register(RF_SETUP);
 80005ce:	2006      	movs	r0, #6
 80005d0:	f002 fd59 	bl	8003086 <read_register>
 80005d4:	4604      	mov	r4, r0

	set_data_rate(RF24_1MBPS);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f002 fd5f 	bl	800309a <set_data_rate>

	toggle_features();
 80005dc:	f002 fd78 	bl	80030d0 <toggle_features>
    write_register(FEATURE, 0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	201d      	movs	r0, #29
 80005e4:	f002 fd41 	bl	800306a <write_register>
    write_register(DYNPD, 0);
 80005e8:	2100      	movs	r1, #0
 80005ea:	201c      	movs	r0, #28
 80005ec:	f002 fd3d 	bl	800306a <write_register>


    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 80005f0:	2170      	movs	r1, #112	; 0x70
 80005f2:	2007      	movs	r0, #7
 80005f4:	f002 fd39 	bl	800306a <write_register>
	set_channel(76);
 80005f8:	204c      	movs	r0, #76	; 0x4c
 80005fa:	f002 fd72 	bl	80030e2 <set_channel>

	flush_rx();
 80005fe:	f002 fd77 	bl	80030f0 <flush_rx>
	flush_tx();
 8000602:	f002 fd78 	bl	80030f6 <flush_tx>

	power_up();
 8000606:	f002 fd79 	bl	80030fc <power_up>

    write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
 800060a:	2000      	movs	r0, #0
 800060c:	f002 fd3b 	bl	8003086 <read_register>
 8000610:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8000614:	2000      	movs	r0, #0
 8000616:	f002 fd28 	bl	800306a <write_register>

	printk("setup: %d\n", setup);
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <init_nrf+0xa4>)
 800061c:	4621      	mov	r1, r4
 800061e:	f002 fd91 	bl	8003144 <printk>
    return (setup != 0 && setup != 0xff);
 8000622:	1e60      	subs	r0, r4, #1
 8000624:	b2c0      	uxtb	r0, r0
}
 8000626:	28fd      	cmp	r0, #253	; 0xfd
 8000628:	bf8c      	ite	hi
 800062a:	2000      	movhi	r0, #0
 800062c:	2001      	movls	r0, #1
 800062e:	bd10      	pop	{r4, pc}
 8000630:	08004486 	.word	0x08004486
 8000634:	0800448b 	.word	0x0800448b
 8000638:	08004490 	.word	0x08004490
 800063c:	080044df 	.word	0x080044df
 8000640:	08004496 	.word	0x08004496

08000644 <dupa>:

void dupa(){
	printk("DUPA\n");
 8000644:	4801      	ldr	r0, [pc, #4]	; (800064c <dupa+0x8>)
 8000646:	f002 bd7d 	b.w	8003144 <printk>
 800064a:	bf00      	nop
 800064c:	080044a1 	.word	0x080044a1

08000650 <main>:
}

void main(void){
 8000650:	b508      	push	{r3, lr}
	dupa();
 8000652:	f7ff fff7 	bl	8000644 <dupa>
	dupa();
 8000656:	f7ff fff5 	bl	8000644 <dupa>
    if (spi_init()){
 800065a:	f7ff ff11 	bl	8000480 <spi_init>
 800065e:	b138      	cbz	r0, 8000670 <main+0x20>
        printk("FAILED to init spi\n");
 8000660:	480f      	ldr	r0, [pc, #60]	; (80006a0 <main+0x50>)
 8000662:	f002 fd6f 	bl	8003144 <printk>
        printk("exited\n");
 8000666:	480f      	ldr	r0, [pc, #60]	; (80006a4 <main+0x54>)

	
    while(1){

    }
}
 8000668:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("NRF FAILED\n");
 800066c:	f002 bd6a 	b.w	8003144 <printk>
        printk("SPI ok\n");
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <main+0x58>)
 8000672:	f002 fd67 	bl	8003144 <printk>
	if (gpio_init()){
 8000676:	f7ff ff11 	bl	800049c <gpio_init>
 800067a:	2800      	cmp	r0, #0
 800067c:	d1f0      	bne.n	8000660 <main+0x10>
		printk("GPIO ok\n");
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <main+0x5c>)
 8000680:	f002 fd60 	bl	8003144 <printk>
	printk("witaj\n");
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <main+0x60>)
 8000686:	f002 fd5d 	bl	8003144 <printk>
	dupa();
 800068a:	f7ff ffdb 	bl	8000644 <dupa>
    if(init_nrf()){
 800068e:	f7ff ff85 	bl	800059c <init_nrf>
 8000692:	b118      	cbz	r0, 800069c <main+0x4c>
		printk("NRF OK\n");
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <main+0x64>)
 8000696:	f002 fd55 	bl	8003144 <printk>
    while(1){
 800069a:	e7fe      	b.n	800069a <main+0x4a>
		printk("NRF FAILED\n");
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <main+0x68>)
 800069e:	e7e3      	b.n	8000668 <main+0x18>
 80006a0:	080044a7 	.word	0x080044a7
 80006a4:	080044bb 	.word	0x080044bb
 80006a8:	080044c3 	.word	0x080044c3
 80006ac:	080044cb 	.word	0x080044cb
 80006b0:	080044d4 	.word	0x080044d4
 80006b4:	080044db 	.word	0x080044db
 80006b8:	080044e3 	.word	0x080044e3

080006bc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80006bc:	680b      	ldr	r3, [r1, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80006c2:	4b01      	ldr	r3, [pc, #4]	; (80006c8 <char_out+0xc>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4718      	bx	r3
 80006c8:	20001c34 	.word	0x20001c34

080006cc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 80006cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d0:	b085      	sub	sp, #20
 80006d2:	469b      	mov	fp, r3
 80006d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80006d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8000768 <_printk_dec_ulong+0x9c>
 80006da:	2c01      	cmp	r4, #1
 80006dc:	bfb8      	it	lt
 80006de:	2401      	movlt	r4, #1
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	bf0c      	ite	eq
 80006e4:	2330      	moveq	r3, #48	; 0x30
 80006e6:	2320      	movne	r3, #32
 80006e8:	4615      	mov	r5, r2
 80006ea:	4606      	mov	r6, r0
 80006ec:	468a      	mov	sl, r1
 80006ee:	9302      	str	r3, [sp, #8]
 80006f0:	2701      	movs	r7, #1
 80006f2:	f04f 080a 	mov.w	r8, #10
 80006f6:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 80006f8:	fbb5 f3f9 	udiv	r3, r5, r9
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	b90a      	cbnz	r2, 8000704 <_printk_dec_ulong+0x38>
 8000700:	45a9      	cmp	r9, r5
 8000702:	d81f      	bhi.n	8000744 <_printk_dec_ulong+0x78>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 8000704:	9b01      	ldr	r3, [sp, #4]
 8000706:	4651      	mov	r1, sl
 8000708:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800070c:	47b0      	blx	r6
			digits++;
 800070e:	3701      	adds	r7, #1
			found_largest_digit = 1;
 8000710:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 8000712:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 8000714:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
 8000718:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
 800071c:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
 8000720:	f04f 030a 	mov.w	r3, #10
 8000724:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 8000728:	d1e6      	bne.n	80006f8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
 800072a:	4651      	mov	r1, sl
 800072c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000730:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
 8000732:	f1bb 0f03 	cmp.w	fp, #3
 8000736:	d102      	bne.n	800073e <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
 8000738:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
 800073a:	2c00      	cmp	r4, #0
 800073c:	dc0e      	bgt.n	800075c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
 800073e:	b005      	add	sp, #20
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8000744:	4544      	cmp	r4, r8
 8000746:	dbe4      	blt.n	8000712 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
 8000748:	f1bb 0f02 	cmp.w	fp, #2
 800074c:	d8e1      	bhi.n	8000712 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 800074e:	9802      	ldr	r0, [sp, #8]
 8000750:	9203      	str	r2, [sp, #12]
 8000752:	4651      	mov	r1, sl
 8000754:	47b0      	blx	r6
			digits++;
 8000756:	3701      	adds	r7, #1
 8000758:	9a03      	ldr	r2, [sp, #12]
 800075a:	e7da      	b.n	8000712 <_printk_dec_ulong+0x46>
			out(' ', ctx);
 800075c:	4651      	mov	r1, sl
 800075e:	2020      	movs	r0, #32
 8000760:	47b0      	blx	r6
 8000762:	3c01      	subs	r4, #1
 8000764:	e7e9      	b.n	800073a <_printk_dec_ulong+0x6e>
 8000766:	bf00      	nop
 8000768:	3b9aca00 	.word	0x3b9aca00

0800076c <__printk_hook_install>:
	_char_out = fn;
 800076c:	4b01      	ldr	r3, [pc, #4]	; (8000774 <__printk_hook_install+0x8>)
 800076e:	6018      	str	r0, [r3, #0]
}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20001c34 	.word	0x20001c34

08000778 <z_vprintk>:
{
 8000778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800077c:	b08d      	sub	sp, #52	; 0x34
 800077e:	461c      	mov	r4, r3
	char length_mod = 0;
 8000780:	2700      	movs	r7, #0
 8000782:	1e53      	subs	r3, r2, #1
{
 8000784:	4605      	mov	r5, r0
 8000786:	468b      	mov	fp, r1
 8000788:	9303      	str	r3, [sp, #12]
	int min_width = -1;
 800078a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 800078e:	46b8      	mov	r8, r7
			might_format = 0;
 8000790:	2600      	movs	r6, #0
					break;
 8000792:	e005      	b.n	80007a0 <z_vprintk+0x28>
		if (!might_format) {
 8000794:	b96e      	cbnz	r6, 80007b2 <z_vprintk+0x3a>
			if (*fmt != '%') {
 8000796:	2825      	cmp	r0, #37	; 0x25
 8000798:	f000 8171 	beq.w	8000a7e <z_vprintk+0x306>
				out((int)*fmt, ctx);
 800079c:	4659      	mov	r1, fp
 800079e:	47a8      	blx	r5
	while (*fmt) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80007a6:	9303      	str	r3, [sp, #12]
 80007a8:	2800      	cmp	r0, #0
 80007aa:	d1f3      	bne.n	8000794 <z_vprintk+0x1c>
}
 80007ac:	b00d      	add	sp, #52	; 0x34
 80007ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 80007b2:	287a      	cmp	r0, #122	; 0x7a
 80007b4:	d80a      	bhi.n	80007cc <z_vprintk+0x54>
 80007b6:	2862      	cmp	r0, #98	; 0x62
 80007b8:	d810      	bhi.n	80007dc <z_vprintk+0x64>
 80007ba:	2830      	cmp	r0, #48	; 0x30
 80007bc:	d054      	beq.n	8000868 <z_vprintk+0xf0>
 80007be:	d845      	bhi.n	800084c <z_vprintk+0xd4>
 80007c0:	2825      	cmp	r0, #37	; 0x25
 80007c2:	f000 815a 	beq.w	8000a7a <z_vprintk+0x302>
 80007c6:	282d      	cmp	r0, #45	; 0x2d
 80007c8:	f000 815f 	beq.w	8000a8a <z_vprintk+0x312>
					out((int)'%', ctx);
 80007cc:	4659      	mov	r1, fp
 80007ce:	2025      	movs	r0, #37	; 0x25
 80007d0:	47a8      	blx	r5
					out((int)*fmt, ctx);
 80007d2:	9b03      	ldr	r3, [sp, #12]
 80007d4:	7818      	ldrb	r0, [r3, #0]
 80007d6:	4659      	mov	r1, fp
 80007d8:	47a8      	blx	r5
 80007da:	e7d9      	b.n	8000790 <z_vprintk+0x18>
 80007dc:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
 80007e0:	2b17      	cmp	r3, #23
 80007e2:	d8f3      	bhi.n	80007cc <z_vprintk+0x54>
 80007e4:	a201      	add	r2, pc, #4	; (adr r2, 80007ec <z_vprintk+0x74>)
 80007e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ea:	bf00      	nop
 80007ec:	08000a73 	.word	0x08000a73
 80007f0:	080008b7 	.word	0x080008b7
 80007f4:	080007cd 	.word	0x080007cd
 80007f8:	080007cd 	.word	0x080007cd
 80007fc:	080007cd 	.word	0x080007cd
 8000800:	08000899 	.word	0x08000899
 8000804:	080008b7 	.word	0x080008b7
 8000808:	080007cd 	.word	0x080007cd
 800080c:	080007cd 	.word	0x080007cd
 8000810:	08000899 	.word	0x08000899
 8000814:	080007cd 	.word	0x080007cd
 8000818:	080007cd 	.word	0x080007cd
 800081c:	080007cd 	.word	0x080007cd
 8000820:	08000959 	.word	0x08000959
 8000824:	080007cd 	.word	0x080007cd
 8000828:	080007cd 	.word	0x080007cd
 800082c:	08000a43 	.word	0x08000a43
 8000830:	080007cd 	.word	0x080007cd
 8000834:	08000927 	.word	0x08000927
 8000838:	080007cd 	.word	0x080007cd
 800083c:	080007cd 	.word	0x080007cd
 8000840:	08000855 	.word	0x08000855
 8000844:	080007cd 	.word	0x080007cd
 8000848:	08000899 	.word	0x08000899
			switch (*fmt) {
 800084c:	2839      	cmp	r0, #57	; 0x39
 800084e:	d91a      	bls.n	8000886 <z_vprintk+0x10e>
 8000850:	2858      	cmp	r0, #88	; 0x58
 8000852:	d1bb      	bne.n	80007cc <z_vprintk+0x54>
				if (*fmt == 'p') {
 8000854:	9b03      	ldr	r3, [sp, #12]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b70      	cmp	r3, #112	; 0x70
 800085a:	f040 8088 	bne.w	800096e <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
 800085e:	f854 3b04 	ldr.w	r3, [r4], #4
 8000862:	9306      	str	r3, [sp, #24]
 8000864:	2200      	movs	r2, #0
 8000866:	e090      	b.n	800098a <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
 8000868:	f1b9 0f00 	cmp.w	r9, #0
 800086c:	da0e      	bge.n	800088c <z_vprintk+0x114>
 800086e:	f1b8 0f00 	cmp.w	r8, #0
 8000872:	f000 810d 	beq.w	8000a90 <z_vprintk+0x318>
					min_width = *fmt - '0';
 8000876:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 800087a:	f1b8 0f00 	cmp.w	r8, #0
 800087e:	bf08      	it	eq
 8000880:	f04f 0802 	moveq.w	r8, #2
 8000884:	e78c      	b.n	80007a0 <z_vprintk+0x28>
				if (min_width < 0) {
 8000886:	f1b9 0f00 	cmp.w	r9, #0
 800088a:	dbf4      	blt.n	8000876 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
 800088c:	230a      	movs	r3, #10
 800088e:	fb03 0909 	mla	r9, r3, r9, r0
 8000892:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8000896:	e7f0      	b.n	800087a <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
 8000898:	2868      	cmp	r0, #104	; 0x68
 800089a:	d103      	bne.n	80008a4 <z_vprintk+0x12c>
 800089c:	2f68      	cmp	r7, #104	; 0x68
 800089e:	d106      	bne.n	80008ae <z_vprintk+0x136>
					length_mod = 'H';
 80008a0:	2748      	movs	r7, #72	; 0x48
 80008a2:	e77d      	b.n	80007a0 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
 80008a4:	286c      	cmp	r0, #108	; 0x6c
 80008a6:	d102      	bne.n	80008ae <z_vprintk+0x136>
 80008a8:	2f6c      	cmp	r7, #108	; 0x6c
 80008aa:	f000 80f4 	beq.w	8000a96 <z_vprintk+0x31e>
				} else if (length_mod == 0) {
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	d18c      	bne.n	80007cc <z_vprintk+0x54>
 80008b2:	4607      	mov	r7, r0
 80008b4:	e774      	b.n	80007a0 <z_vprintk+0x28>
				if (length_mod == 'z') {
 80008b6:	2f7a      	cmp	r7, #122	; 0x7a
 80008b8:	d102      	bne.n	80008c0 <z_vprintk+0x148>
					d = va_arg(ap, int);
 80008ba:	f854 6b04 	ldr.w	r6, [r4], #4
 80008be:	e021      	b.n	8000904 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
 80008c0:	2f6c      	cmp	r7, #108	; 0x6c
 80008c2:	d0fa      	beq.n	80008ba <z_vprintk+0x142>
				} else if (length_mod == 'L') {
 80008c4:	2f4c      	cmp	r7, #76	; 0x4c
 80008c6:	d1f8      	bne.n	80008ba <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
 80008c8:	3407      	adds	r4, #7
 80008ca:	f024 0407 	bic.w	r4, r4, #7
 80008ce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80008d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
 80008d6:	9b04      	ldr	r3, [sp, #16]
 80008d8:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
 80008dc:	9b05      	ldr	r3, [sp, #20]
 80008de:	9108      	str	r1, [sp, #32]
 80008e0:	f143 0100 	adc.w	r1, r3, #0
 80008e4:	9109      	str	r1, [sp, #36]	; 0x24
 80008e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80008ea:	2100      	movs	r1, #0
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f0:	4299      	cmp	r1, r3
 80008f2:	bf08      	it	eq
 80008f4:	4290      	cmpeq	r0, r2
 80008f6:	d204      	bcs.n	8000902 <z_vprintk+0x18a>
						print_err(out, ctx);
 80008f8:	4659      	mov	r1, fp
 80008fa:	4628      	mov	r0, r5
 80008fc:	f002 fc14 	bl	8003128 <print_err>
						break;
 8000900:	e746      	b.n	8000790 <z_vprintk+0x18>
					d = lld;
 8000902:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
 8000904:	2e00      	cmp	r6, #0
 8000906:	da05      	bge.n	8000914 <z_vprintk+0x19c>
					out((int)'-', ctx);
 8000908:	4659      	mov	r1, fp
 800090a:	202d      	movs	r0, #45	; 0x2d
 800090c:	47a8      	blx	r5
					d = -d;
 800090e:	4276      	negs	r6, r6
					min_width--;
 8000910:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 8000914:	f8cd 9000 	str.w	r9, [sp]
 8000918:	4643      	mov	r3, r8
 800091a:	4632      	mov	r2, r6
				_printk_dec_ulong(out, ctx, u, padding,
 800091c:	4659      	mov	r1, fp
 800091e:	4628      	mov	r0, r5
 8000920:	f7ff fed4 	bl	80006cc <_printk_dec_ulong>
				break;
 8000924:	e734      	b.n	8000790 <z_vprintk+0x18>
				if (length_mod == 'z') {
 8000926:	2f7a      	cmp	r7, #122	; 0x7a
 8000928:	d102      	bne.n	8000930 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
 800092a:	f854 2b04 	ldr.w	r2, [r4], #4
 800092e:	e00f      	b.n	8000950 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
 8000930:	2f6c      	cmp	r7, #108	; 0x6c
 8000932:	d0fa      	beq.n	800092a <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
 8000934:	2f4c      	cmp	r7, #76	; 0x4c
 8000936:	d1f8      	bne.n	800092a <z_vprintk+0x1b2>
					unsigned long long llu =
 8000938:	3407      	adds	r4, #7
 800093a:	f024 0407 	bic.w	r4, r4, #7
 800093e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 8000942:	2100      	movs	r1, #0
 8000944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000948:	4299      	cmp	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	d3d3      	bcc.n	80008f8 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
 8000950:	f8cd 9000 	str.w	r9, [sp]
 8000954:	4643      	mov	r3, r8
 8000956:	e7e1      	b.n	800091c <z_vprintk+0x1a4>
				out('0', ctx);
 8000958:	4659      	mov	r1, fp
 800095a:	2030      	movs	r0, #48	; 0x30
 800095c:	47a8      	blx	r5
				out('x', ctx);
 800095e:	4659      	mov	r1, fp
 8000960:	2078      	movs	r0, #120	; 0x78
 8000962:	47a8      	blx	r5
					min_width = 8;
 8000964:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
 8000968:	f04f 0801 	mov.w	r8, #1
 800096c:	e772      	b.n	8000854 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
 800096e:	2f6c      	cmp	r7, #108	; 0x6c
 8000970:	f43f af75 	beq.w	800085e <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
 8000974:	2f4c      	cmp	r7, #76	; 0x4c
 8000976:	f47f af72 	bne.w	800085e <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
 800097a:	1de3      	adds	r3, r4, #7
 800097c:	f023 0307 	bic.w	r3, r3, #7
 8000980:	461c      	mov	r4, r3
 8000982:	f854 2b08 	ldr.w	r2, [r4], #8
 8000986:	9206      	str	r2, [sp, #24]
 8000988:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
 800098a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 800098c:	2310      	movs	r3, #16
	int digits = 0;
 800098e:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
 8000990:	9107      	str	r1, [sp, #28]
	int shift = sizeof(num) * 8;
 8000992:	f04f 0a40 	mov.w	sl, #64	; 0x40
		shift -= 4;
 8000996:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
 800099a:	9906      	ldr	r1, [sp, #24]
 800099c:	f1ca 0e20 	rsb	lr, sl, #32
 80009a0:	f1aa 0c20 	sub.w	ip, sl, #32
 80009a4:	fa21 f00a 	lsr.w	r0, r1, sl
 80009a8:	fa02 fe0e 	lsl.w	lr, r2, lr
 80009ac:	ea40 000e 	orr.w	r0, r0, lr
 80009b0:	fa22 fc0c 	lsr.w	ip, r2, ip
 80009b4:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 80009b8:	f010 000f 	ands.w	r0, r0, #15
 80009bc:	d107      	bne.n	80009ce <z_vprintk+0x256>
 80009be:	9907      	ldr	r1, [sp, #28]
 80009c0:	b911      	cbnz	r1, 80009c8 <z_vprintk+0x250>
 80009c2:	f1ba 0f00 	cmp.w	sl, #0
 80009c6:	d125      	bne.n	8000a14 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
 80009c8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80009cc:	e005      	b.n	80009da <z_vprintk+0x262>
 80009ce:	2809      	cmp	r0, #9
 80009d0:	bf8c      	ite	hi
 80009d2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
 80009d6:	f04f 0c30 	movls.w	ip, #48	; 0x30
 80009da:	4460      	add	r0, ip
			out((int)nibble, ctx);
 80009dc:	4659      	mov	r1, fp
 80009de:	b240      	sxtb	r0, r0
 80009e0:	920a      	str	r2, [sp, #40]	; 0x28
 80009e2:	9307      	str	r3, [sp, #28]
 80009e4:	47a8      	blx	r5
			digits++;
 80009e6:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
 80009e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
 80009ea:	3301      	adds	r3, #1
 80009ec:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
 80009ee:	9b07      	ldr	r3, [sp, #28]
 80009f0:	f1ba 0f00 	cmp.w	sl, #0
 80009f4:	d123      	bne.n	8000a3e <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
 80009f6:	f1b8 0f03 	cmp.w	r8, #3
 80009fa:	f47f aec9 	bne.w	8000790 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
 80009fe:	9b04      	ldr	r3, [sp, #16]
 8000a00:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	f77f aec3 	ble.w	8000790 <z_vprintk+0x18>
			out(' ', ctx);
 8000a0a:	4659      	mov	r1, fp
 8000a0c:	2020      	movs	r0, #32
 8000a0e:	47a8      	blx	r5
 8000a10:	3e01      	subs	r6, #1
 8000a12:	e7f7      	b.n	8000a04 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
 8000a14:	1e59      	subs	r1, r3, #1
 8000a16:	4599      	cmp	r9, r3
 8000a18:	910a      	str	r1, [sp, #40]	; 0x28
 8000a1a:	db07      	blt.n	8000a2c <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
 8000a1c:	f1b8 0f01 	cmp.w	r8, #1
 8000a20:	d106      	bne.n	8000a30 <z_vprintk+0x2b8>
 8000a22:	920b      	str	r2, [sp, #44]	; 0x2c
				out('0', ctx);
 8000a24:	4659      	mov	r1, fp
 8000a26:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8000a28:	47a8      	blx	r5
 8000a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
 8000a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a2e:	e7b2      	b.n	8000996 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
 8000a30:	f1b8 0f02 	cmp.w	r8, #2
 8000a34:	d1fa      	bne.n	8000a2c <z_vprintk+0x2b4>
 8000a36:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
 8000a38:	4659      	mov	r1, fp
 8000a3a:	2020      	movs	r0, #32
 8000a3c:	e7f4      	b.n	8000a28 <z_vprintk+0x2b0>
			found_largest_digit = 1;
 8000a3e:	9607      	str	r6, [sp, #28]
 8000a40:	e7a9      	b.n	8000996 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
 8000a42:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
 8000a46:	46b2      	mov	sl, r6
 8000a48:	4653      	mov	r3, sl
 8000a4a:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8000a4e:	b968      	cbnz	r0, 8000a6c <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
 8000a50:	f1b8 0f03 	cmp.w	r8, #3
 8000a54:	d121      	bne.n	8000a9a <z_vprintk+0x322>
					int remaining = min_width - (s - start);
 8000a56:	1b9e      	subs	r6, r3, r6
 8000a58:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	f77f ae97 	ble.w	8000790 <z_vprintk+0x18>
						out(' ', ctx);
 8000a62:	4659      	mov	r1, fp
 8000a64:	2020      	movs	r0, #32
 8000a66:	47a8      	blx	r5
 8000a68:	3e01      	subs	r6, #1
 8000a6a:	e7f7      	b.n	8000a5c <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
 8000a6c:	4659      	mov	r1, fp
 8000a6e:	47a8      	blx	r5
 8000a70:	e7ea      	b.n	8000a48 <z_vprintk+0x2d0>
				out(c, ctx);
 8000a72:	f854 0b04 	ldr.w	r0, [r4], #4
 8000a76:	4659      	mov	r1, fp
 8000a78:	e6ae      	b.n	80007d8 <z_vprintk+0x60>
				out((int)'%', ctx);
 8000a7a:	4659      	mov	r1, fp
 8000a7c:	e6ac      	b.n	80007d8 <z_vprintk+0x60>
				length_mod = 0;
 8000a7e:	4637      	mov	r7, r6
				padding = PAD_NONE;
 8000a80:	46b0      	mov	r8, r6
				min_width = -1;
 8000a82:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
 8000a86:	2601      	movs	r6, #1
 8000a88:	e68a      	b.n	80007a0 <z_vprintk+0x28>
			switch (*fmt) {
 8000a8a:	f04f 0803 	mov.w	r8, #3
 8000a8e:	e687      	b.n	80007a0 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
 8000a90:	f04f 0801 	mov.w	r8, #1
 8000a94:	e684      	b.n	80007a0 <z_vprintk+0x28>
					length_mod = 'L';
 8000a96:	274c      	movs	r7, #76	; 0x4c
 8000a98:	e682      	b.n	80007a0 <z_vprintk+0x28>
			might_format = 0;
 8000a9a:	4606      	mov	r6, r0
		++fmt;
 8000a9c:	e680      	b.n	80007a0 <z_vprintk+0x28>
 8000a9e:	bf00      	nop

08000aa0 <vprintk>:
{
 8000aa0:	b507      	push	{r0, r1, r2, lr}
 8000aa2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8000aa4:	2100      	movs	r1, #0
{
 8000aa6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 8000aa8:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <vprintk+0x18>)
 8000aac:	a901      	add	r1, sp, #4
 8000aae:	f7ff fe63 	bl	8000778 <z_vprintk>
}
 8000ab2:	b003      	add	sp, #12
 8000ab4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ab8:	080006bd 	.word	0x080006bd

08000abc <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000abc:	f04f 0210 	mov.w	r2, #16
 8000ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8000ac4:	f382 8811 	msr	BASEPRI, r2
 8000ac8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000acc:	f383 8811 	msr	BASEPRI, r3
 8000ad0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <st_stm32f4_init+0x24>)
 8000ad6:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <st_stm32f4_init+0x28>)
 8000ad8:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000ada:	2000      	movs	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20001cb8 	.word	0x20001cb8
 8000ae4:	00f42400 	.word	0x00f42400

08000ae8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8000ae8:	b510      	push	{r4, lr}
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
 8000aec:	4c07      	ldr	r4, [pc, #28]	; (8000b0c <uart_console_init+0x24>)
 8000aee:	f001 fc9d 	bl	800242c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <uart_console_init+0x28>)
 8000af4:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8000af6:	4620      	mov	r0, r4
 8000af8:	f000 fd80 	bl	80015fc <__stdout_hook_install>
	__printk_hook_install(console_out);
 8000afc:	4620      	mov	r0, r4
 8000afe:	f7ff fe35 	bl	800076c <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
 8000b02:	2000      	movs	r0, #0
 8000b04:	bd10      	pop	{r4, pc}
 8000b06:	bf00      	nop
 8000b08:	080044ef 	.word	0x080044ef
 8000b0c:	08000b15 	.word	0x08000b15
 8000b10:	20000014 	.word	0x20000014

08000b14 <console_out>:
	if ('\n' == c) {
 8000b14:	280a      	cmp	r0, #10
{
 8000b16:	b538      	push	{r3, r4, r5, lr}
 8000b18:	4d07      	ldr	r5, [pc, #28]	; (8000b38 <console_out+0x24>)
 8000b1a:	4604      	mov	r4, r0
	if ('\n' == c) {
 8000b1c:	d104      	bne.n	8000b28 <console_out+0x14>
 8000b1e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
 8000b20:	6843      	ldr	r3, [r0, #4]
 8000b22:	210d      	movs	r1, #13
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8000b28:	6828      	ldr	r0, [r5, #0]
 8000b2a:	6843      	ldr	r3, [r0, #4]
 8000b2c:	b2e1      	uxtb	r1, r4
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	4798      	blx	r3
}
 8000b32:	4620      	mov	r0, r4
 8000b34:	bd38      	pop	{r3, r4, r5, pc}
 8000b36:	bf00      	nop
 8000b38:	20000014 	.word	0x20000014

08000b3c <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 8000b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8000b40:	6896      	ldr	r6, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000b42:	4f0d      	ldr	r7, [pc, #52]	; (8000b78 <__stm32_exti_isr+0x3c>)
{
 8000b44:	4604      	mov	r4, r0
 8000b46:	460d      	mov	r5, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000b48:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8000b4c:	f106 0904 	add.w	r9, r6, #4
	for (line = min; line < max; line++) {
 8000b50:	42ac      	cmp	r4, r5
 8000b52:	db01      	blt.n	8000b58 <__stm32_exti_isr+0x1c>
		}
	}
}
 8000b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b58:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000b5a:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8000b5e:	ea33 0202 	bics.w	r2, r3, r2
 8000b62:	d107      	bne.n	8000b74 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000b64:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8000b66:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8000b6a:	b11b      	cbz	r3, 8000b74 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8000b6c:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8000b70:	4620      	mov	r0, r4
 8000b72:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8000b74:	3401      	adds	r4, #1
 8000b76:	e7eb      	b.n	8000b50 <__stm32_exti_isr+0x14>
 8000b78:	40013c00 	.word	0x40013c00

08000b7c <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8000b7e:	2301      	movs	r3, #1
 8000b80:	6811      	ldr	r1, [r2, #0]
 8000b82:	4083      	lsls	r3, r0
 8000b84:	430b      	orrs	r3, r1
 8000b86:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8000b88:	4b02      	ldr	r3, [pc, #8]	; (8000b94 <stm32_exti_enable+0x18>)
 8000b8a:	5618      	ldrsb	r0, [r3, r0]
 8000b8c:	f000 bab6 	b.w	80010fc <arch_irq_enable>
 8000b90:	40013c00 	.word	0x40013c00
 8000b94:	08004501 	.word	0x08004501

08000b98 <stm32_exti_disable>:
	if (line < 32) {
 8000b98:	281f      	cmp	r0, #31
 8000b9a:	dc07      	bgt.n	8000bac <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000b9c:	4904      	ldr	r1, [pc, #16]	; (8000bb0 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	680b      	ldr	r3, [r1, #0]
 8000ba2:	fa02 f000 	lsl.w	r0, r2, r0
 8000ba6:	ea23 0000 	bic.w	r0, r3, r0
 8000baa:	6008      	str	r0, [r1, #0]
}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40013c00 	.word	0x40013c00

08000bb4 <stm32_exti_trigger>:
	switch (trigger) {
 8000bb4:	2903      	cmp	r1, #3
 8000bb6:	d80f      	bhi.n	8000bd8 <stm32_exti_trigger+0x24>
 8000bb8:	e8df f001 	tbb	[pc, r1]
 8000bbc:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	6899      	ldr	r1, [r3, #8]
 8000bc6:	fa02 f000 	lsl.w	r0, r2, r0
 8000bca:	ea21 0100 	bic.w	r1, r1, r0
 8000bce:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000bd6:	60d8      	str	r0, [r3, #12]
}
 8000bd8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000bda:	2301      	movs	r3, #1
 8000bdc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <stm32_exti_trigger+0x64>)
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	4302      	orrs	r2, r0
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	e7f2      	b.n	8000bd0 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8000bea:	2301      	movs	r3, #1
 8000bec:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <stm32_exti_trigger+0x64>)
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	4302      	orrs	r2, r0
 8000bf6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	ea22 0000 	bic.w	r0, r2, r0
 8000bfe:	6098      	str	r0, [r3, #8]
}
 8000c00:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000c02:	2301      	movs	r3, #1
 8000c04:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <stm32_exti_trigger+0x64>)
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	4302      	orrs	r2, r0
 8000c0e:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	4310      	orrs	r0, r2
 8000c14:	e7df      	b.n	8000bd6 <stm32_exti_trigger+0x22>
 8000c16:	bf00      	nop
 8000c18:	40013c00 	.word	0x40013c00

08000c1c <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <stm32_exti_set_callback+0x20>)
 8000c20:	b530      	push	{r4, r5, lr}
 8000c22:	6884      	ldr	r4, [r0, #8]
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 8000c24:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 8000c28:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 8000c2c:	b918      	cbnz	r0, 8000c36 <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8000c2e:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	data->cb[line].data = arg;
 8000c32:	606a      	str	r2, [r5, #4]

	return 0;
}
 8000c34:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8000c36:	f06f 000f 	mvn.w	r0, #15
 8000c3a:	e7fb      	b.n	8000c34 <stm32_exti_set_callback+0x18>
 8000c3c:	20001d04 	.word	0x20001d04

08000c40 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	data->cb[line].cb = NULL;
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <stm32_exti_unset_callback+0x14>)
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 8000c4e:	604b      	str	r3, [r1, #4]
}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20001d04 	.word	0x20001d04

08000c58 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000c58:	680b      	ldr	r3, [r1, #0]
{
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d82d      	bhi.n	8000cbc <stm32_clock_control_on+0x64>
 8000c60:	e8df f003 	tbb	[pc, r3]
 8000c64:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c68:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8000c6a:	684b      	ldr	r3, [r1, #4]
 8000c6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000c6e:	4319      	orrs	r1, r3
 8000c70:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000c74:	4013      	ands	r3, r2
 8000c76:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000c78:	9b00      	ldr	r3, [sp, #0]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000c7a:	2000      	movs	r0, #0
}
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c80:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8000c82:	684b      	ldr	r3, [r1, #4]
 8000c84:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000c86:	4319      	orrs	r1, r3
 8000c88:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000c90:	9b01      	ldr	r3, [sp, #4]
 8000c92:	e7f2      	b.n	8000c7a <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8000c96:	684b      	ldr	r3, [r1, #4]
 8000c98:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000c9a:	4319      	orrs	r1, r3
 8000c9c:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000ca4:	9b02      	ldr	r3, [sp, #8]
 8000ca6:	e7e8      	b.n	8000c7a <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8000caa:	684b      	ldr	r3, [r1, #4]
 8000cac:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000cae:	4319      	orrs	r1, r3
 8000cb0:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000cb8:	9b03      	ldr	r3, [sp, #12]
 8000cba:	e7de      	b.n	8000c7a <stm32_clock_control_on+0x22>
	switch (pclken->bus) {
 8000cbc:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000cc0:	e7dc      	b.n	8000c7c <stm32_clock_control_on+0x24>
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000cc8:	680b      	ldr	r3, [r1, #0]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d820      	bhi.n	8000d10 <stm32_clock_control_off+0x48>
 8000cce:	e8df f003 	tbb	[pc, r3]
 8000cd2:	0a02      	.short	0x0a02
 8000cd4:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <stm32_clock_control_off+0x50>)
 8000cd8:	6849      	ldr	r1, [r1, #4]
 8000cda:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cdc:	ea23 0301 	bic.w	r3, r3, r1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000ce2:	2000      	movs	r0, #0
}
 8000ce4:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <stm32_clock_control_off+0x50>)
 8000ce8:	6849      	ldr	r1, [r1, #4]
 8000cea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000cec:	ea23 0301 	bic.w	r3, r3, r1
 8000cf0:	6353      	str	r3, [r2, #52]	; 0x34
 8000cf2:	e7f6      	b.n	8000ce2 <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <stm32_clock_control_off+0x50>)
 8000cf6:	6849      	ldr	r1, [r1, #4]
 8000cf8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000cfa:	ea23 0301 	bic.w	r3, r3, r1
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	e7ef      	b.n	8000ce2 <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <stm32_clock_control_off+0x50>)
 8000d04:	6849      	ldr	r1, [r1, #4]
 8000d06:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000d08:	ea23 0301 	bic.w	r3, r3, r1
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	e7e8      	b.n	8000ce2 <stm32_clock_control_off+0x1a>
	switch (pclken->bus) {
 8000d10:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <stm32_clock_control_get_subsys_rate>:
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8000d1c:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <stm32_clock_control_get_subsys_rate+0x24>)
	switch (pclken->bus) {
 8000d20:	2902      	cmp	r1, #2
	u32_t ahb_clock = SystemCoreClock;
 8000d22:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 8000d24:	d005      	beq.n	8000d32 <stm32_clock_control_get_subsys_rate+0x16>
 8000d26:	d905      	bls.n	8000d34 <stm32_clock_control_get_subsys_rate+0x18>
 8000d28:	2903      	cmp	r1, #3
 8000d2a:	d006      	beq.n	8000d3a <stm32_clock_control_get_subsys_rate+0x1e>
 8000d2c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000d30:	4770      	bx	lr
	return clock / prescaler;
 8000d32:	089b      	lsrs	r3, r3, #2
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8000d34:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000d36:	2000      	movs	r0, #0
}
 8000d38:	4770      	bx	lr
	return clock / prescaler;
 8000d3a:	085b      	lsrs	r3, r3, #1
 8000d3c:	e7fa      	b.n	8000d34 <stm32_clock_control_get_subsys_rate+0x18>
 8000d3e:	bf00      	nop
 8000d40:	20001cb8 	.word	0x20001cb8

08000d44 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8000d44:	b530      	push	{r4, r5, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000d46:	2100      	movs	r1, #0
{
 8000d48:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000d4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d4e:	e9cd 1300 	strd	r1, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 8000d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d56:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8000d58:	f000 f838 	bl	8000dcc <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8000d5c:	a803      	add	r0, sp, #12
 8000d5e:	f002 fb24 	bl	80033aa <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <stm32_clock_control_init+0x80>)
 8000d64:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8000d66:	0790      	lsls	r0, r2, #30
 8000d68:	d406      	bmi.n	8000d78 <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f042 0201 	orr.w	r2, r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000d72:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8000d74:	0792      	lsls	r2, r2, #30
 8000d76:	d5fc      	bpl.n	8000d72 <stm32_clock_control_init+0x2e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d78:	4c12      	ldr	r4, [pc, #72]	; (8000dc4 <stm32_clock_control_init+0x80>)
 8000d7a:	68a3      	ldr	r3, [r4, #8]
 8000d7c:	f023 0303 	bic.w	r3, r3, #3
 8000d80:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d82:	68a3      	ldr	r3, [r4, #8]
 8000d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d88:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d8a:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8000d8c:	f015 050c 	ands.w	r5, r5, #12
 8000d90:	d1fb      	bne.n	8000d8a <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000d92:	6823      	ldr	r3, [r4, #0]
	} else {
		hse_bypass = LL_UTILS_HSEBYPASS_OFF;
	}

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <stm32_clock_control_init+0x84>)
 8000d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d9a:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8000d9c:	6863      	ldr	r3, [r4, #4]
 8000d9e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000da2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000da6:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8000da8:	aa03      	add	r2, sp, #12
 8000daa:	466b      	mov	r3, sp
 8000dac:	4629      	mov	r1, r5
 8000dae:	f001 fadd 	bl	800236c <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8000dba:	f002 fafe 	bl	80033ba <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	b007      	add	sp, #28
 8000dc2:	bd30      	pop	{r4, r5, pc}
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	007a1200 	.word	0x007a1200

08000dcc <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <config_enable_default_clocks+0x1c>)
 8000dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dd4:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8000dd8:	b082      	sub	sp, #8
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000de0:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8000de2:	b002      	add	sp, #8
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8000dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dee:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8000df0:	0906      	lsrs	r6, r0, #4
{
 8000df2:	460d      	mov	r5, r1
	if (!clk) {
 8000df4:	4610      	mov	r0, r2
 8000df6:	b912      	cbnz	r2, 8000dfe <z_pinmux_stm32_set+0x12>
 8000df8:	4811      	ldr	r0, [pc, #68]	; (8000e40 <z_pinmux_stm32_set+0x54>)
 8000dfa:	f001 fb17 	bl	800242c <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <z_pinmux_stm32_set+0x58>)
 8000e04:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8000e08:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	d102      	bne.n	8000e14 <z_pinmux_stm32_set+0x28>
		return -EIO;
 8000e0e:	f06f 0004 	mvn.w	r0, #4
 8000e12:	e012      	b.n	8000e3a <z_pinmux_stm32_set+0x4e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 8000e14:	6843      	ldr	r3, [r0, #4]
 8000e16:	4669      	mov	r1, sp
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d1f6      	bne.n	8000e0e <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8000e20:	1120      	asrs	r0, r4, #4
 8000e22:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 8000e24:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000e28:	f005 030f 	and.w	r3, r5, #15
 8000e2c:	462a      	mov	r2, r5
 8000e2e:	f004 010f 	and.w	r1, r4, #15
 8000e32:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8000e36:	f002 fbb1 	bl	800359c <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	bf00      	nop
 8000e40:	08004518 	.word	0x08004518
 8000e44:	08004200 	.word	0x08004200

08000e48 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	460d      	mov	r5, r1
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <stm32_setup_pins+0x2c>)
 8000e50:	f001 faec 	bl	800242c <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8000e54:	2600      	movs	r6, #0
 8000e56:	4607      	mov	r7, r0
 8000e58:	42ae      	cmp	r6, r5
 8000e5a:	f104 0408 	add.w	r4, r4, #8
 8000e5e:	d100      	bne.n	8000e62 <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8000e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8000e62:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000e66:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8000e6a:	463a      	mov	r2, r7
 8000e6c:	f7ff ffbe 	bl	8000dec <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8000e70:	3601      	adds	r6, #1
 8000e72:	e7f1      	b.n	8000e58 <stm32_setup_pins+0x10>
 8000e74:	08004518 	.word	0x08004518

08000e78 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static u32_t elapsed(void)
{
	u32_t val1 = SysTick->VAL;	/* A */
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <elapsed+0x30>)
 8000e7a:	689a      	ldr	r2, [r3, #8]
	u32_t ctrl = SysTick->CTRL;	/* B */
 8000e7c:	6819      	ldr	r1, [r3, #0]
	u32_t val2 = SysTick->VAL;	/* C */
 8000e7e:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <elapsed+0x34>)
 8000e82:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 8000e86:	b510      	push	{r4, lr}
 8000e88:	4909      	ldr	r1, [pc, #36]	; (8000eb0 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8000e8a:	d101      	bne.n	8000e90 <elapsed+0x18>
	    || (val1 < val2)) {
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	d205      	bcs.n	8000e9c <elapsed+0x24>
		overflow_cyc += last_load;
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	680c      	ldr	r4, [r1, #0]
 8000e94:	4422      	add	r2, r4
 8000e96:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <elapsed+0x30>)
 8000e9a:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	680a      	ldr	r2, [r1, #0]
 8000ea0:	4413      	add	r3, r2
}
 8000ea2:	1a18      	subs	r0, r3, r0
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010
 8000eac:	200000dc 	.word	0x200000dc
 8000eb0:	200000d8 	.word	0x200000d8

08000eb4 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8000eb4:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8000eb6:	f7ff ffdf 	bl	8000e78 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <z_clock_isr+0x38>)
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <z_clock_isr+0x3c>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	6811      	ldr	r1, [r2, #0]
 8000ec2:	4408      	add	r0, r1
 8000ec4:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <z_clock_isr+0x40>)
 8000ecc:	6811      	ldr	r1, [r2, #0]
 8000ece:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8000ed2:	1a40      	subs	r0, r0, r1
 8000ed4:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8000ed8:	fb03 1300 	mla	r3, r3, r0, r1
 8000edc:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 8000ede:	f002 f833 	bl	8002f48 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
}
 8000ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8000ee6:	f000 ba9d 	b.w	8001424 <z_arm_exc_exit>
 8000eea:	bf00      	nop
 8000eec:	200000dc 	.word	0x200000dc
 8000ef0:	200000d4 	.word	0x200000d4
 8000ef4:	200000d0 	.word	0x200000d0

08000ef8 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <z_clock_driver_init+0x28>)
 8000efa:	2210      	movs	r2, #16
 8000efc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <z_clock_driver_init+0x2c>)
 8000f02:	f244 129f 	movw	r2, #16799	; 0x419f
 8000f06:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <z_clock_driver_init+0x30>)
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <z_clock_driver_init+0x34>)
 8000f10:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000f12:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f042 0207 	orr.w	r2, r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	200000d8 	.word	0x200000d8
 8000f28:	200000dc 	.word	0x200000dc
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8000f30:	b570      	push	{r4, r5, r6, lr}
 8000f32:	4d2b      	ldr	r5, [pc, #172]	; (8000fe0 <z_clock_set_timeout+0xb0>)
 8000f34:	4604      	mov	r4, r0
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 8000f36:	b151      	cbz	r1, 8000f4e <z_clock_set_timeout+0x1e>
	    && ticks == K_TICKS_FOREVER) {
 8000f38:	1c43      	adds	r3, r0, #1
 8000f3a:	d10e      	bne.n	8000f5a <z_clock_set_timeout+0x2a>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000f3c:	4a29      	ldr	r2, [pc, #164]	; (8000fe4 <z_clock_set_timeout+0xb4>)
 8000f3e:	6813      	ldr	r3, [r2, #0]
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8000f46:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000f4a:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8000f4c:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8000f4e:	f240 33e5 	movw	r3, #997	; 0x3e5
 8000f52:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8000f56:	bf08      	it	eq
 8000f58:	461c      	moveq	r4, r3
	__asm__ volatile(
 8000f5a:	f04f 0310 	mov.w	r3, #16
 8000f5e:	f3ef 8611 	mrs	r6, BASEPRI
 8000f62:	f383 8811 	msr	BASEPRI, r3
 8000f66:	f3bf 8f6f 	isb	sy
	u32_t pending = elapsed();
 8000f6a:	f7ff ff85 	bl	8000e78 <elapsed>
	cycle_count += pending;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <z_clock_set_timeout+0xb8>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4410      	add	r0, r2
 8000f74:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <z_clock_set_timeout+0xbc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
	u32_t unannounced = cycle_count - announced_cycles;
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <z_clock_set_timeout+0xc0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
	if ((s32_t)unannounced < 0) {
 8000f80:	1ac2      	subs	r2, r0, r3
 8000f82:	d50d      	bpl.n	8000fa0 <z_clock_set_timeout+0x70>
		last_load = MIN_DELAY;
 8000f84:	f240 431a 	movw	r3, #1050	; 0x41a
			last_load = MAX_CYCLES;
 8000f88:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <z_clock_set_timeout+0xb4>)
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000f92:	2300      	movs	r3, #0
 8000f94:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 8000f96:	f386 8811 	msr	BASEPRI, r6
 8000f9a:	f3bf 8f6f 	isb	sy
 8000f9e:	e7d5      	b.n	8000f4c <z_clock_set_timeout+0x1c>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
 8000fa0:	3c01      	subs	r4, #1
		delay = ticks * CYC_PER_TICK;
 8000fa2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8000fa6:	f240 31e5 	movw	r1, #997	; 0x3e5
 8000faa:	428c      	cmp	r4, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000fac:	f502 4283 	add.w	r2, r2, #16768	; 0x4180
		delay = ticks * CYC_PER_TICK;
 8000fb0:	bfa8      	it	ge
 8000fb2:	460c      	movge	r4, r1
		delay -= unannounced;
 8000fb4:	1a18      	subs	r0, r3, r0
		delay = ticks * CYC_PER_TICK;
 8000fb6:	f244 11a0 	movw	r1, #16800	; 0x41a0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000fba:	321f      	adds	r2, #31
 8000fbc:	fb01 2404 	mla	r4, r1, r4, r2
		delay = MAX(delay, MIN_DELAY);
 8000fc0:	f240 431a 	movw	r3, #1050	; 0x41a
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000fc4:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
 8000fc8:	fb01 0404 	mla	r4, r1, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8000fcc:	429c      	cmp	r4, r3
 8000fce:	d904      	bls.n	8000fda <z_clock_set_timeout+0xaa>
		if (delay > MAX_CYCLES) {
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <z_clock_set_timeout+0xc4>)
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	d8d8      	bhi.n	8000f88 <z_clock_set_timeout+0x58>
			last_load = delay;
 8000fd6:	602c      	str	r4, [r5, #0]
 8000fd8:	e7d7      	b.n	8000f8a <z_clock_set_timeout+0x5a>
		delay = MAX(delay, MIN_DELAY);
 8000fda:	461c      	mov	r4, r3
 8000fdc:	e7fb      	b.n	8000fd6 <z_clock_set_timeout+0xa6>
 8000fde:	bf00      	nop
 8000fe0:	200000d8 	.word	0x200000d8
 8000fe4:	e000e010 	.word	0xe000e010
 8000fe8:	200000d4 	.word	0x200000d4
 8000fec:	200000dc 	.word	0x200000dc
 8000ff0:	200000d0 	.word	0x200000d0
 8000ff4:	00ff9420 	.word	0x00ff9420

08000ff8 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 8000ff8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8000ffa:	f04f 0310 	mov.w	r3, #16
 8000ffe:	f3ef 8411 	mrs	r4, BASEPRI
 8001002:	f383 8811 	msr	BASEPRI, r3
 8001006:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 800100a:	f7ff ff35 	bl	8000e78 <elapsed>
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <z_clock_elapsed+0x34>)
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <z_clock_elapsed+0x38>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	4403      	add	r3, r0
	__asm__ volatile(
 800101a:	f384 8811 	msr	BASEPRI, r4
 800101e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8001022:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001026:	fbb3 f0f0 	udiv	r0, r3, r0
 800102a:	bd10      	pop	{r4, pc}
 800102c:	200000d4 	.word	0x200000d4
 8001030:	200000d0 	.word	0x200000d0

08001034 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
 8001034:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001036:	f04f 0310 	mov.w	r3, #16
 800103a:	f3ef 8411 	mrs	r4, BASEPRI
 800103e:	f383 8811 	msr	BASEPRI, r3
 8001042:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = elapsed() + cycle_count;
 8001046:	f7ff ff17 	bl	8000e78 <elapsed>
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <z_timer_cycle_get_32+0x28>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4418      	add	r0, r3
	__asm__ volatile(
 8001050:	f384 8811 	msr	BASEPRI, r4
 8001054:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8001058:	bd10      	pop	{r4, pc}
 800105a:	bf00      	nop
 800105c:	200000d4 	.word	0x200000d4

08001060 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001062:	490a      	ldr	r1, [pc, #40]	; (800108c <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8001064:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8001066:	6809      	ldr	r1, [r1, #0]
 8001068:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800106a:	4909      	ldr	r1, [pc, #36]	; (8001090 <arch_swap+0x30>)
	_current->arch.basepri = key;
 800106c:	66d8      	str	r0, [r3, #108]	; 0x6c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800106e:	684b      	ldr	r3, [r1, #4]
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	604b      	str	r3, [r1, #4]
 8001076:	2300      	movs	r3, #0
 8001078:	f383 8811 	msr	BASEPRI, r3
 800107c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001080:	6893      	ldr	r3, [r2, #8]
}
 8001082:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200002a0 	.word	0x200002a0
 800108c:	0800442c 	.word	0x0800442c
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001094:	490f      	ldr	r1, [pc, #60]	; (80010d4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8001096:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8001098:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800109c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800109e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80010a2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80010a6:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80010a8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80010ac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80010b0:	4f09      	ldr	r7, [pc, #36]	; (80010d8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80010b2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80010b6:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 80010b8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80010ba:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80010bc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
 80010be:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80010c0:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80010c2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80010c6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80010ca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80010ce:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 80010d2:	4770      	bx	lr
    ldr r1, =_kernel
 80010d4:	200002a0 	.word	0x200002a0
    ldr v4, =_SCS_ICSR
 80010d8:	e000ed04 	.word	0xe000ed04

080010dc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 80010dc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80010e0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80010e2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80010e6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80010ea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80010ec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80010f0:	2902      	cmp	r1, #2
    beq _oops
 80010f2:	d0ff      	beq.n	80010f4 <_oops>

080010f4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80010f4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80010f6:	f002 f967 	bl	80033c8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80010fa:	bd01      	pop	{r0, pc}

080010fc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80010fc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db08      	blt.n	8001114 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	2201      	movs	r2, #1
 8001104:	f000 001f 	and.w	r0, r0, #31
 8001108:	fa02 f000 	lsl.w	r0, r2, r0
 800110c:	095b      	lsrs	r3, r3, #5
 800110e:	4a02      	ldr	r2, [pc, #8]	; (8001118 <arch_irq_enable+0x1c>)
 8001110:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800111c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800111e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	bfa8      	it	ge
 8001122:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8001126:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	bfb8      	it	lt
 800112c:	4b06      	ldrlt	r3, [pc, #24]	; (8001148 <z_arm_irq_priority_set+0x2c>)
 800112e:	ea4f 1101 	mov.w	r1, r1, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	bfac      	ite	ge
 8001134:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	f000 000f 	andlt.w	r0, r0, #15
 800113c:	b2c9      	uxtb	r1, r1
 800113e:	bfb4      	ite	lt
 8001140:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8001146:	4770      	bx	lr
 8001148:	e000ed14 	.word	0xe000ed14

0800114c <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
 800114c:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
 8001150:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
 8001152:	3a20      	subs	r2, #32
 8001154:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 8001158:	4908      	ldr	r1, [pc, #32]	; (800117c <arch_new_thread+0x30>)
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
 800115a:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
 800115c:	9b00      	ldr	r3, [sp, #0]
 800115e:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 8001160:	9b01      	ldr	r3, [sp, #4]
 8001162:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 8001164:	9b02      	ldr	r3, [sp, #8]
 8001166:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
 8001168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116c:	61d3      	str	r3, [r2, #28]
	pInitCtx->basic.pc &= 0xfffffffe;
 800116e:	f021 0101 	bic.w	r1, r1, #1
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
 8001172:	2300      	movs	r3, #0
	pInitCtx->basic.pc &= 0xfffffffe;
 8001174:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (u32_t)pInitCtx;
 8001176:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8001178:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800117a:	4770      	bx	lr
 800117c:	0800315f 	.word	0x0800315f

08001180 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	4606      	mov	r6, r0
 8001184:	460c      	mov	r4, r1
 8001186:	4617      	mov	r7, r2
 8001188:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800118a:	f000 f98b 	bl	80014a4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
 8001190:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
 8001192:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
 8001196:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001198:	4628      	mov	r0, r5
 800119a:	f384 8809 	msr	PSP, r4
 800119e:	2100      	movs	r1, #0
 80011a0:	b663      	cpsie	if
 80011a2:	f381 8811 	msr	BASEPRI, r1
 80011a6:	f3bf 8f6f 	isb	sy
 80011aa:	2200      	movs	r2, #0
 80011ac:	2300      	movs	r3, #0
 80011ae:	f001 ffd6 	bl	800315e <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80011b2:	bf00      	nop
 80011b4:	200002a0 	.word	0x200002a0

080011b8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80011b8:	4901      	ldr	r1, [pc, #4]	; (80011c0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80011ba:	2210      	movs	r2, #16
	str	r2, [r1]
 80011bc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80011be:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80011c0:	e000ed10 	.word	0xe000ed10

080011c4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80011c4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80011c6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80011c8:	f380 8811 	msr	BASEPRI, r0
	isb
 80011cc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 80011d0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 80011d4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80011d6:	b662      	cpsie	i
	isb
 80011d8:	f3bf 8f6f 	isb	sy

	bx	lr
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop

080011e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80011e0:	bf30      	wfi
    b z_SysNmiOnReset
 80011e2:	f7ff bffd 	b.w	80011e0 <z_SysNmiOnReset>
 80011e6:	bf00      	nop

080011e8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 80011ea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <z_arm_prep_c+0x40>)
 80011ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80011f2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 80011fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001200:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001208:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 800120c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001210:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001214:	f001 f930 	bl	8002478 <z_bss_zero>
	z_data_copy();
 8001218:	f001 f946 	bl	80024a8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 800121c:	f000 f910 	bl	8001440 <z_arm_interrupt_init>
	z_cstart();
 8001220:	f001 f98c 	bl	800253c <z_cstart>
 8001224:	08000000 	.word	0x08000000
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800122c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800122e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001232:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001236:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800123a:	4904      	ldr	r1, [pc, #16]	; (800124c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800123c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800123e:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 8001240:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001242:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001246:	4902      	ldr	r1, [pc, #8]	; (8001250 <_isr_wrapper+0x24>)
	bx r1
 8001248:	4708      	bx	r1
 800124a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800124c:	08003e2c 	.word	0x08003e2c
	ldr r1, =z_arm_int_exit
 8001250:	08001425 	.word	0x08001425

08001254 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001254:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001256:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800125a:	4808      	ldr	r0, [pc, #32]	; (800127c <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 800125c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 8001260:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001262:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001266:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800126a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 800126c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800126e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001272:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001276:	f7ff ffb7 	bl	80011e8 <z_arm_prep_c>
 800127a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 800127c:	20001428 	.word	0x20001428

08001280 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001280:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001284:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
 8001288:	4672      	mov	r2, lr

	push {r0, lr}
 800128a:	b501      	push	{r0, lr}

	bl z_arm_fault
 800128c:	f000 f84e 	bl	800132c <z_arm_fault>

	pop {r0, pc}
 8001290:	bd01      	pop	{r0, pc}
 8001292:	bf00      	nop

08001294 <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <mem_manage_fault.isra.0+0x34>)
 8001296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800129a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800129c:	0792      	lsls	r2, r2, #30
 800129e:	d508      	bpl.n	80012b2 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 80012a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80012a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a4:	0612      	lsls	r2, r2, #24
 80012a6:	d504      	bpl.n	80012b2 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 80012a8:	b118      	cbz	r0, 80012b2 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80012aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <mem_manage_fault.isra.0+0x34>)
 80012b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80012b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 80012b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80012ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 80012bc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80012be:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 80012c4:	7008      	strb	r0, [r1, #0]

	return reason;
}
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <bus_fault.isra.0+0x38>)
 80012ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80012d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80012d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012d4:	0592      	lsls	r2, r2, #22
 80012d6:	d508      	bpl.n	80012ea <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 80012d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80012da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012dc:	0412      	lsls	r2, r2, #16
 80012de:	d504      	bpl.n	80012ea <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 80012e0:	b118      	cbz	r0, 80012ea <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80012e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <bus_fault.isra.0+0x38>)
 80012ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80012ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012f0:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80012f2:	bf58      	it	pl
 80012f4:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80012f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 80012f8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80012fa:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8001300:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <usage_fault.isra.0+0x20>)
 800130a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800130c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800130e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001318:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800131c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001320:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 8001322:	2000      	movs	r0, #0
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
 800132c:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <z_arm_fault+0xdc>)
 8001330:	685b      	ldr	r3, [r3, #4]
{
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800133a:	2500      	movs	r5, #0
 800133c:	f385 8811 	msr	BASEPRI, r5
 8001340:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001344:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8001348:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 800134c:	d111      	bne.n	8001372 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800134e:	f002 010c 	and.w	r1, r2, #12
 8001352:	2908      	cmp	r1, #8
 8001354:	d00d      	beq.n	8001372 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001356:	0711      	lsls	r1, r2, #28
 8001358:	d401      	bmi.n	800135e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 800135a:	4606      	mov	r6, r0
			*nested_exc = true;
 800135c:	2501      	movs	r5, #1
	*recoverable = false;
 800135e:	2200      	movs	r2, #0
 8001360:	3b03      	subs	r3, #3
 8001362:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8001366:	2b03      	cmp	r3, #3
 8001368:	d847      	bhi.n	80013fa <z_arm_fault+0xce>
 800136a:	e8df f003 	tbb	[pc, r3]
 800136e:	3e04      	.short	0x3e04
 8001370:	3b42      	.short	0x3b42
		return NULL;
 8001372:	462e      	mov	r6, r5
 8001374:	e7f3      	b.n	800135e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <z_arm_fault+0xdc>)
 8001378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800137a:	0792      	lsls	r2, r2, #30
 800137c:	d43d      	bmi.n	80013fa <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800137e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001380:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001384:	d008      	beq.n	8001398 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
 8001386:	3328      	adds	r3, #40	; 0x28
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b1eb      	cbz	r3, 80013c8 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
 800138c:	f10d 0107 	add.w	r1, sp, #7
 8001390:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8001392:	f7ff ff7f 	bl	8001294 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
 8001396:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8001398:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800139c:	b993      	cbnz	r3, 80013c4 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800139e:	2220      	movs	r2, #32
 80013a0:	4631      	mov	r1, r6
 80013a2:	a802      	add	r0, sp, #8
 80013a4:	f002 f827 	bl	80033f6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80013a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013aa:	b345      	cbz	r5, 80013fe <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80013ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013b0:	b922      	cbnz	r2, 80013bc <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80013b2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80013b6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80013ba:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80013bc:	a902      	add	r1, sp, #8
 80013be:	4620      	mov	r0, r4
 80013c0:	f002 f800 	bl	80033c4 <z_arm_fatal_error>
}
 80013c4:	b00a      	add	sp, #40	; 0x28
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <z_arm_fault+0xe0>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b12b      	cbz	r3, 80013da <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
 80013ce:	f10d 0107 	add.w	r1, sp, #7
 80013d2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80013d4:	f7ff ff7a 	bl	80012cc <bus_fault.isra.0>
 80013d8:	e7dd      	b.n	8001396 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <z_arm_fault+0xe4>)
 80013dc:	8818      	ldrh	r0, [r3, #0]
 80013de:	b284      	uxth	r4, r0
 80013e0:	2c00      	cmp	r4, #0
 80013e2:	d0d9      	beq.n	8001398 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
 80013e4:	f7ff ff90 	bl	8001308 <usage_fault.isra.0>
 80013e8:	e7d5      	b.n	8001396 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
 80013ea:	f10d 0107 	add.w	r1, sp, #7
 80013ee:	2000      	movs	r0, #0
 80013f0:	e7cf      	b.n	8001392 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 80013f2:	f10d 0107 	add.w	r1, sp, #7
 80013f6:	2000      	movs	r0, #0
 80013f8:	e7ec      	b.n	80013d4 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
 80013fa:	2400      	movs	r4, #0
 80013fc:	e7cc      	b.n	8001398 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80013fe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	e7d8      	b.n	80013ba <z_arm_fault+0x8e>
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	e000ed29 	.word	0xe000ed29
 8001410:	e000ed2a 	.word	0xe000ed2a

08001414 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001414:	4a02      	ldr	r2, [pc, #8]	; (8001420 <z_arm_fault_init+0xc>)
 8001416:	6953      	ldr	r3, [r2, #20]
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001426:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001428:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 800142a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 800142c:	d003      	beq.n	8001436 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800142e:	4903      	ldr	r1, [pc, #12]	; (800143c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001434:	600a      	str	r2, [r1, #0]

08001436 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001436:	4770      	bx	lr
	ldr r3, =_kernel
 8001438:	200002a0 	.word	0x200002a0
	ldr r1, =_SCS_ICSR
 800143c:	e000ed04 	.word	0xe000ed04

08001440 <z_arm_interrupt_init>:
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	2110      	movs	r1, #16
 8001446:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001448:	3301      	adds	r3, #1
 800144a:	2b52      	cmp	r3, #82	; 0x52
 800144c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001450:	d1f9      	bne.n	8001446 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100

08001458 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4604      	mov	r4, r0
	__asm__ volatile(
 800145c:	f04f 0310 	mov.w	r3, #16
 8001460:	f3ef 8511 	mrs	r5, BASEPRI
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 800146c:	f001 fa90 	bl	8002990 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <z_impl_k_thread_abort+0x44>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	42a3      	cmp	r3, r4
 8001476:	d10b      	bne.n	8001490 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <z_impl_k_thread_abort+0x48>)
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001480:	b912      	cbnz	r2, 8001488 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
 8001482:	4628      	mov	r0, r5
 8001484:	f7ff fdec 	bl	8001060 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800148e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 8001490:	4628      	mov	r0, r5
}
 8001492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 8001496:	f002 bba0 	b.w	8003bda <z_reschedule_irqlock>
 800149a:	bf00      	nop
 800149c:	200002a0 	.word	0x200002a0
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 80014a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <z_arm_configure_static_mpu_regions+0x24>)
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <z_arm_configure_static_mpu_regions+0x28>)
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <z_arm_configure_static_mpu_regions+0x2c>)
 80014b0:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
 80014b2:	ab01      	add	r3, sp, #4
 80014b4:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80014b6:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <z_arm_configure_static_mpu_regions+0x30>)
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <z_arm_configure_static_mpu_regions+0x34>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	4668      	mov	r0, sp
 80014be:	f000 f893 	bl	80015e8 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 80014c2:	b005      	add	sp, #20
 80014c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80014c8:	20000000 	.word	0x20000000
 80014cc:	00000000 	.word	0x00000000
 80014d0:	060b0000 	.word	0x060b0000
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20020000 	.word	0x20020000

080014dc <mpu_configure_regions>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 80014dc:	f8df c084 	ldr.w	ip, [pc, #132]	; 8001564 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80014e4:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
 80014e6:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
 80014e8:	428f      	cmp	r7, r1
 80014ea:	db00      	blt.n	80014ee <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
 80014ee:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
 80014f2:	f8de 4004 	ldr.w	r4, [lr, #4]
 80014f6:	b394      	cbz	r4, 800155e <mpu_configure_regions+0x82>
		if (do_sanity_check &&
 80014f8:	b143      	cbz	r3, 800150c <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
 80014fa:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80014fc:	422c      	tst	r4, r5
 80014fe:	d119      	bne.n	8001534 <mpu_configure_regions+0x58>
		&&
 8001500:	2c1f      	cmp	r4, #31
 8001502:	d917      	bls.n	8001534 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1)) == 0U);
 8001504:	f8de 2000 	ldr.w	r2, [lr]
		&&
 8001508:	4215      	tst	r5, r2
 800150a:	d113      	bne.n	8001534 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800150c:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
 800150e:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
 8001510:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
 8001514:	f8de 0008 	ldr.w	r0, [lr, #8]
 8001518:	d90f      	bls.n	800153a <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 800151a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800151e:	d80e      	bhi.n	800153e <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8001520:	3c01      	subs	r4, #1
 8001522:	fab4 f484 	clz	r4, r4
 8001526:	f1c4 041f 	rsb	r4, r4, #31
 800152a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
 800152c:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800152e:	ea44 0400 	orr.w	r4, r4, r0
 8001532:	d906      	bls.n	8001542 <mpu_configure_regions+0x66>
			return -EINVAL;
 8001534:	f06f 0015 	mvn.w	r0, #21
 8001538:	e7d8      	b.n	80014ec <mpu_configure_regions+0x10>
		return REGION_32B;
 800153a:	2408      	movs	r4, #8
 800153c:	e7f6      	b.n	800152c <mpu_configure_regions+0x50>
		return REGION_4G;
 800153e:	243e      	movs	r4, #62	; 0x3e
 8001540:	e7f4      	b.n	800152c <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001542:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8001546:	4315      	orrs	r5, r2
 8001548:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800154c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8001550:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
 8001554:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001556:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800155a:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
 800155e:	3701      	adds	r7, #1
 8001560:	e7c2      	b.n	80014e8 <mpu_configure_regions+0xc>
 8001562:	bf00      	nop
 8001564:	e000ed90 	.word	0xe000ed90

08001568 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <arm_core_mpu_enable+0x10>)
 800156a:	2205      	movs	r2, #5
 800156c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800156e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001572:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001576:	4770      	bx	lr
 8001578:	e000ed90 	.word	0xe000ed90

0800157c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800157c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001580:	4b01      	ldr	r3, [pc, #4]	; (8001588 <arm_core_mpu_disable+0xc>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
}
 8001586:	4770      	bx	lr
 8001588:	e000ed90 	.word	0xe000ed90

0800158c <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800158c:	4913      	ldr	r1, [pc, #76]	; (80015dc <arm_mpu_init+0x50>)
 800158e:	6808      	ldr	r0, [r1, #0]
 8001590:	2808      	cmp	r0, #8
{
 8001592:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8001594:	d81e      	bhi.n	80015d4 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8001596:	f7ff fff1 	bl	800157c <arm_core_mpu_disable>
	MPU->RNR = index;
 800159a:	4c11      	ldr	r4, [pc, #68]	; (80015e0 <arm_mpu_init+0x54>)
 800159c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800159e:	2200      	movs	r2, #0
 80015a0:	4290      	cmp	r0, r2
 80015a2:	f101 010c 	add.w	r1, r1, #12
 80015a6:	d105      	bne.n	80015b4 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <arm_mpu_init+0x58>)
 80015aa:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80015ac:	f7ff ffdc 	bl	8001568 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 80015b0:	2000      	movs	r0, #0
}
 80015b2:	bd10      	pop	{r4, pc}
 80015b4:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80015b6:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80015ba:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80015be:	4313      	orrs	r3, r2
 80015c0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80015c4:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80015c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80015d0:	3201      	adds	r2, #1
 80015d2:	e7e5      	b.n	80015a0 <arm_mpu_init+0x14>
		return -1;
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d8:	e7eb      	b.n	80015b2 <arm_mpu_init+0x26>
 80015da:	bf00      	nop
 80015dc:	0800422c 	.word	0x0800422c
 80015e0:	e000ed90 	.word	0xe000ed90
 80015e4:	200002df 	.word	0x200002df

080015e8 <arm_core_mpu_configure_static_mpu_regions>:
{
 80015e8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80015ea:	4c03      	ldr	r4, [pc, #12]	; (80015f8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80015ec:	2301      	movs	r3, #1
 80015ee:	7822      	ldrb	r2, [r4, #0]
 80015f0:	f7ff ff74 	bl	80014dc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80015f4:	7020      	strb	r0, [r4, #0]
}
 80015f6:	bd10      	pop	{r4, pc}
 80015f8:	200002df 	.word	0x200002df

080015fc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80015fc:	4b01      	ldr	r3, [pc, #4]	; (8001604 <__stdout_hook_install+0x8>)
 80015fe:	6018      	str	r0, [r3, #0]
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20001c4c 	.word	0x20001c4c

08001608 <pinmux_stm32_init>:
	{STM32_PIN_PB13, STM32F4_PINMUX_FUNC_PB13_CAN2_TX},
#endif	/* CONFIG_CAN_2 */
};

static int pinmux_stm32_init(struct device *port)
{
 8001608:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <pinmux_stm32_init+0x10>)
 800160c:	2109      	movs	r1, #9
 800160e:	f7ff fc1b 	bl	8000e48 <stm32_setup_pins>

	return 0;
}
 8001612:	2000      	movs	r0, #0
 8001614:	bd08      	pop	{r3, pc}
 8001616:	bf00      	nop
 8001618:	0800424c 	.word	0x0800424c

0800161c <gpio_stm32_pin_interrupt_configure>:
}

static int gpio_stm32_pin_interrupt_configure(struct device *dev,
		gpio_pin_t pin, enum gpio_int_mode mode,
		enum gpio_int_trig trig)
{
 800161c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001620:	461e      	mov	r6, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8001622:	6803      	ldr	r3, [r0, #0]
	struct gpio_stm32_data *data = dev->driver_data;
 8001624:	6887      	ldr	r7, [r0, #8]
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8001626:	f8d3 8008 	ldr.w	r8, [r3, #8]
#if defined(CONFIG_STM32H7_DUAL_CORE)
	while (LL_HSEM_1StepLock(HSEM, LL_HSEM_ID_1)) {
	}
#endif /* CONFIG_STM32H7_DUAL_CORE */

	if (mode == GPIO_INT_MODE_DISABLED) {
 800162a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
 800162e:	460c      	mov	r4, r1
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001630:	d12b      	bne.n	800168a <gpio_stm32_pin_interrupt_configure+0x6e>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001632:	f001 0303 	and.w	r3, r1, #3
 8001636:	3304      	adds	r3, #4
 8001638:	009a      	lsls	r2, r3, #2
 800163a:	230f      	movs	r3, #15
 800163c:	4093      	lsls	r3, r2
 800163e:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8001642:	b2da      	uxtb	r2, r3
 8001644:	493e      	ldr	r1, [pc, #248]	; (8001740 <gpio_stm32_pin_interrupt_configure+0x124>)
 8001646:	3202      	adds	r2, #2
 8001648:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800164c:	0c19      	lsrs	r1, r3, #16
 800164e:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001656:	fab2 f282 	clz	r2, r2
 800165a:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800165c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8001660:	429a      	cmp	r2, r3
 8001662:	d110      	bne.n	8001686 <gpio_stm32_pin_interrupt_configure+0x6a>
			stm32_exti_disable(pin);
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fa97 	bl	8000b98 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800166a:	4620      	mov	r0, r4
 800166c:	f7ff fae8 	bl	8000c40 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001670:	4620      	mov	r0, r4
 8001672:	2100      	movs	r1, #0
 8001674:	f7ff fa9e 	bl	8000bb4 <stm32_exti_trigger>
			data->cb_pins &= ~BIT(pin);
 8001678:	2301      	movs	r3, #1
 800167a:	fa03 f404 	lsl.w	r4, r3, r4
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	ea23 0304 	bic.w	r3, r3, r4
 8001684:	607b      	str	r3, [r7, #4]
	int err = 0;
 8001686:	2500      	movs	r5, #0
 8001688:	e04b      	b.n	8001722 <gpio_stm32_pin_interrupt_configure+0x106>
		/* else: No irq source configured for pin. Nothing to disable */
		goto release_lock;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 800168a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800168e:	d050      	beq.n	8001732 <gpio_stm32_pin_interrupt_configure+0x116>
		err = -ENOTSUP;
		goto release_lock;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, dev) != 0) {
 8001690:	4602      	mov	r2, r0
 8001692:	492c      	ldr	r1, [pc, #176]	; (8001744 <gpio_stm32_pin_interrupt_configure+0x128>)
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fac1 	bl	8000c1c <stm32_exti_set_callback>
 800169a:	4605      	mov	r5, r0
 800169c:	2800      	cmp	r0, #0
 800169e:	d14b      	bne.n	8001738 <gpio_stm32_pin_interrupt_configure+0x11c>
		err = -EBUSY;
		goto release_lock;
	}

	data->cb_pins |= BIT(pin);
 80016a0:	2301      	movs	r3, #1
 80016a2:	fa03 f204 	lsl.w	r2, r3, r4
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	607b      	str	r3, [r7, #4]

	gpio_stm32_enable_int(cfg->port, pin);
 80016ac:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80016b0:	4825      	ldr	r0, [pc, #148]	; (8001748 <gpio_stm32_pin_interrupt_configure+0x12c>)
 80016b2:	f000 febb 	bl	800242c <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 80016b6:	4925      	ldr	r1, [pc, #148]	; (800174c <gpio_stm32_pin_interrupt_configure+0x130>)
 80016b8:	4603      	mov	r3, r0
 80016ba:	c903      	ldmia	r1, {r0, r1}
 80016bc:	466a      	mov	r2, sp
 80016be:	e882 0003 	stmia.w	r2, {r0, r1}
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f8d1 8000 	ldr.w	r8, [r1]
 80016ca:	4611      	mov	r1, r2
 80016cc:	47c0      	blx	r8
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80016ce:	f004 0103 	and.w	r1, r4, #3
 80016d2:	3104      	adds	r1, #4
 80016d4:	008b      	lsls	r3, r1, #2
 80016d6:	210f      	movs	r1, #15
 80016d8:	4099      	lsls	r1, r3
 80016da:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80016e6:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80016ea:	0c0b      	lsrs	r3, r1, #16
 80016ec:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 80016fa:	409f      	lsls	r7, r3
 80016fc:	430f      	orrs	r7, r1

	switch (trig) {
 80016fe:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8001702:	6097      	str	r7, [r2, #8]
 8001704:	d011      	beq.n	800172a <gpio_stm32_pin_interrupt_configure+0x10e>
 8001706:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 800170a:	d010      	beq.n	800172e <gpio_stm32_pin_interrupt_configure+0x112>
 800170c:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8001710:	bf14      	ite	ne
 8001712:	2100      	movne	r1, #0
 8001714:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff fa4c 	bl	8000bb4 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fa2d 	bl	8000b7c <stm32_exti_enable>
#if defined(CONFIG_STM32H7_DUAL_CORE)
	LL_HSEM_ReleaseLock(HSEM, LL_HSEM_ID_1, 0);
#endif /* CONFIG_STM32H7_DUAL_CORE */

	return err;
}
 8001722:	4628      	mov	r0, r5
 8001724:	b002      	add	sp, #8
 8001726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		edge = STM32_EXTI_TRIG_RISING;
 800172a:	2101      	movs	r1, #1
 800172c:	e7f3      	b.n	8001716 <gpio_stm32_pin_interrupt_configure+0xfa>
		edge = STM32_EXTI_TRIG_BOTH;
 800172e:	2103      	movs	r1, #3
 8001730:	e7f1      	b.n	8001716 <gpio_stm32_pin_interrupt_configure+0xfa>
		err = -ENOTSUP;
 8001732:	f06f 0522 	mvn.w	r5, #34	; 0x22
 8001736:	e7f4      	b.n	8001722 <gpio_stm32_pin_interrupt_configure+0x106>
		err = -EBUSY;
 8001738:	f06f 050f 	mvn.w	r5, #15
	return err;
 800173c:	e7f1      	b.n	8001722 <gpio_stm32_pin_interrupt_configure+0x106>
 800173e:	bf00      	nop
 8001740:	40013800 	.word	0x40013800
 8001744:	08003499 	.word	0x08003499
 8001748:	08004518 	.word	0x08004518
 800174c:	080041d8 	.word	0x080041d8

08001750 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8001750:	6803      	ldr	r3, [r0, #0]
{
 8001752:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8001754:	689c      	ldr	r4, [r3, #8]
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <gpio_stm32_init+0x20>)
 8001758:	f000 fe68 	bl	800242c <z_impl_device_get_binding>
 800175c:	6843      	ldr	r3, [r0, #4]
 800175e:	f104 010c 	add.w	r1, r4, #12
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8001766:	2800      	cmp	r0, #0
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8001768:	bf18      	it	ne
 800176a:	f06f 0004 	mvnne.w	r0, #4
 800176e:	bd10      	pop	{r4, pc}
 8001770:	08004518 	.word	0x08004518

08001774 <pwm_stm32_pin_set>:
 * return 0, or negative errno code
 */
static int pwm_stm32_pin_set(struct device *dev, u32_t pwm,
			     u32_t period_cycles, u32_t pulse_cycles,
			     pwm_flags_t flags)
{
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	461f      	mov	r7, r3
	struct pwm_stm32_data *data = DEV_DATA(dev);
 800177a:	6886      	ldr	r6, [r0, #8]
{
 800177c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	TIM_HandleTypeDef *TimerHandle = &data->hpwm;
	TIM_OC_InitTypeDef sConfig;
	u32_t channel;
	bool counter_32b;

	if (period_cycles == 0U || pulse_cycles > period_cycles) {
 8001780:	b392      	cbz	r2, 80017e8 <pwm_stm32_pin_set+0x74>
 8001782:	42ba      	cmp	r2, r7
 8001784:	d330      	bcc.n	80017e8 <pwm_stm32_pin_set+0x74>
		return -EINVAL;
	}

	if (flags) {
 8001786:	bb63      	cbnz	r3, 80017e2 <pwm_stm32_pin_set+0x6e>
	}

	/* configure channel */
	channel = (pwm - 1)*CHANNEL_LENGTH;

	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8001788:	6803      	ldr	r3, [r0, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
	channel = (pwm - 1)*CHANNEL_LENGTH;
 800178c:	3901      	subs	r1, #1
 800178e:	008c      	lsls	r4, r1, #2
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <pwm_stm32_pin_set+0xe8>)
 8001794:	4299      	cmp	r1, r3
 8001796:	d05e      	beq.n	8001856 <pwm_stm32_pin_set+0xe2>
 8001798:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800179c:	d027      	beq.n	80017ee <pwm_stm32_pin_set+0x7a>
 800179e:	4830      	ldr	r0, [pc, #192]	; (8001860 <pwm_stm32_pin_set+0xec>)
 80017a0:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 80017a4:	4283      	cmp	r3, r0
 80017a6:	d053      	beq.n	8001850 <pwm_stm32_pin_set+0xdc>
 80017a8:	f421 5580 	bic.w	r5, r1, #4096	; 0x1000
 80017ac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80017b0:	4285      	cmp	r5, r0
 80017b2:	d04d      	beq.n	8001850 <pwm_stm32_pin_set+0xdc>
 80017b4:	f421 6580 	bic.w	r5, r1, #1024	; 0x400
 80017b8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80017bc:	4285      	cmp	r5, r0
 80017be:	d047      	beq.n	8001850 <pwm_stm32_pin_set+0xdc>
 80017c0:	f421 4580 	bic.w	r5, r1, #16384	; 0x4000
 80017c4:	f500 4074 	add.w	r0, r0, #62464	; 0xf400
 80017c8:	4285      	cmp	r5, r0
 80017ca:	d041      	beq.n	8001850 <pwm_stm32_pin_set+0xdc>
 80017cc:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 80017d0:	4283      	cmp	r3, r0
 80017d2:	d03d      	beq.n	8001850 <pwm_stm32_pin_set+0xdc>
 80017d4:	4b23      	ldr	r3, [pc, #140]	; (8001864 <pwm_stm32_pin_set+0xf0>)
 80017d6:	4299      	cmp	r1, r3
 80017d8:	d03d      	beq.n	8001856 <pwm_stm32_pin_set+0xe2>
 80017da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017de:	4299      	cmp	r1, r3
 80017e0:	d039      	beq.n	8001856 <pwm_stm32_pin_set+0xe2>
		return -ENOTSUP;
 80017e2:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80017e6:	e031      	b.n	800184c <pwm_stm32_pin_set+0xd8>
		return -EINVAL;
 80017e8:	f06f 0015 	mvn.w	r0, #21
 80017ec:	e02e      	b.n	800184c <pwm_stm32_pin_set+0xd8>
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80017ee:	b184      	cbz	r4, 8001812 <pwm_stm32_pin_set+0x9e>
		!IS_TIM_CHANNELS(channel)) {
 80017f0:	f024 0308 	bic.w	r3, r4, #8
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d003      	beq.n	8001800 <pwm_stm32_pin_set+0x8c>
 80017f8:	2c08      	cmp	r4, #8
 80017fa:	d001      	beq.n	8001800 <pwm_stm32_pin_set+0x8c>
 80017fc:	2c3c      	cmp	r4, #60	; 0x3c
 80017fe:	d1f0      	bne.n	80017e2 <pwm_stm32_pin_set+0x6e>
	/* FIXME: IS_TIM_32B_COUNTER_INSTANCE not available on
	 * SMT32F1 Cube HAL since all timer counters are 16 bits
	 */
	counter_32b = 0;
#else
	counter_32b = IS_TIM_32B_COUNTER_INSTANCE(PWM_STRUCT(dev));
 8001800:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8001804:	d005      	beq.n	8001812 <pwm_stm32_pin_set+0x9e>

	/*
	 * The timer counts from 0 up to the value in the ARR register (16-bit).
	 * Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!counter_32b && (period_cycles > 0x10000)) {
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <pwm_stm32_pin_set+0xf4>)
 8001808:	4299      	cmp	r1, r3
 800180a:	d002      	beq.n	8001812 <pwm_stm32_pin_set+0x9e>
 800180c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001810:	d8e7      	bhi.n	80017e2 <pwm_stm32_pin_set+0x6e>
	}

	/* Configure Timer IP */
	TimerHandle->Instance = PWM_STRUCT(dev);
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
	TimerHandle->Init.ClockDivision = 0;
 8001812:	2500      	movs	r5, #0
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 8001814:	6c33      	ldr	r3, [r6, #64]	; 0x40
	TimerHandle->Instance = PWM_STRUCT(dev);
 8001816:	6031      	str	r1, [r6, #0]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
	TimerHandle->Init.RepetitionCounter = 0;

	/* Set period value */
	TimerHandle->Init.Period = period_cycles - 1;
 8001818:	3a01      	subs	r2, #1
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 800181a:	6073      	str	r3, [r6, #4]
	TimerHandle->Init.Period = period_cycles - 1;
 800181c:	60f2      	str	r2, [r6, #12]
	TimerHandle->Init.ClockDivision = 0;
 800181e:	6135      	str	r5, [r6, #16]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	60b5      	str	r5, [r6, #8]
	TimerHandle->Init.RepetitionCounter = 0;
 8001822:	6175      	str	r5, [r6, #20]

	HAL_TIM_PWM_Init(TimerHandle);
 8001824:	4630      	mov	r0, r6
 8001826:	f002 f91c 	bl	8003a62 <HAL_TIM_PWM_Init>

	/* Configure PWM channel */
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 800182a:	2360      	movs	r3, #96	; 0x60
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;

	/* Set the pulse value */
	sConfig.Pulse = pulse_cycles;

	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 800182c:	a901      	add	r1, sp, #4
 800182e:	4622      	mov	r2, r4
 8001830:	4630      	mov	r0, r6
	sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8001832:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8001836:	e9cd 5506 	strd	r5, r5, [sp, #24]
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 800183a:	9301      	str	r3, [sp, #4]
	sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800183c:	9503      	str	r5, [sp, #12]
	sConfig.Pulse = pulse_cycles;
 800183e:	9702      	str	r7, [sp, #8]
	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 8001840:	f002 f929 	bl	8003a96 <HAL_TIM_PWM_ConfigChannel>

	return HAL_TIM_PWM_Start(TimerHandle, channel);
 8001844:	4621      	mov	r1, r4
 8001846:	4630      	mov	r0, r6
 8001848:	f002 f993 	bl	8003b72 <HAL_TIM_PWM_Start>
}
 800184c:	b009      	add	sp, #36	; 0x24
 800184e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8001850:	2c00      	cmp	r4, #0
 8001852:	d1cd      	bne.n	80017f0 <pwm_stm32_pin_set+0x7c>
 8001854:	e7d7      	b.n	8001806 <pwm_stm32_pin_set+0x92>
 8001856:	2c00      	cmp	r4, #0
 8001858:	d1ca      	bne.n	80017f0 <pwm_stm32_pin_set+0x7c>
 800185a:	e7d7      	b.n	800180c <pwm_stm32_pin_set+0x98>
 800185c:	40010000 	.word	0x40010000
 8001860:	40000400 	.word	0x40000400
 8001864:	40001c00 	.word	0x40001c00
 8001868:	40000c00 	.word	0x40000c00

0800186c <pwm_stm32_init>:
	data->clock = clk;
}


static int pwm_stm32_init(struct device *dev)
{
 800186c:	b538      	push	{r3, r4, r5, lr}
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 800186e:	6803      	ldr	r3, [r0, #0]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8001870:	6885      	ldr	r5, [r0, #8]
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 8001872:	689c      	ldr	r4, [r3, #8]
 8001874:	4806      	ldr	r0, [pc, #24]	; (8001890 <pwm_stm32_init+0x24>)
 8001876:	f000 fdd9 	bl	800242c <z_impl_device_get_binding>
 800187a:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 800187c:	6468      	str	r0, [r5, #68]	; 0x44
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1d21      	adds	r1, r4, #4
 8001882:	4798      	blx	r3

	__pwm_stm32_get_clock(dev);

	/* enable clock */
	if (clock_control_on(data->clock,
 8001884:	2800      	cmp	r0, #0
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
	}

	return 0;
}
 8001886:	bf18      	it	ne
 8001888:	f06f 0004 	mvnne.w	r0, #4
 800188c:	bd38      	pop	{r3, r4, r5, pc}
 800188e:	bf00      	nop
 8001890:	08004518 	.word	0x08004518

08001894 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(struct device *dev)
{
 8001894:	b538      	push	{r3, r4, r5, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->driver_data;
	const struct spi_stm32_config *cfg = dev->config->config_info;
 8001896:	6803      	ldr	r3, [r0, #0]
	struct spi_stm32_data *data __attribute__((unused)) = dev->driver_data;
 8001898:	6885      	ldr	r5, [r0, #8]
	const struct spi_stm32_config *cfg = dev->config->config_info;
 800189a:	689c      	ldr	r4, [r3, #8]
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <spi_stm32_init+0x2c>)
 800189e:	f000 fdc5 	bl	800242c <z_impl_device_get_binding>
 80018a2:	6843      	ldr	r3, [r0, #4]
 80018a4:	4621      	mov	r1, r4
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4798      	blx	r3

	__ASSERT_NO_MSG(device_get_binding(STM32_CLOCK_CONTROL_NAME));

	if (clock_control_on(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 80018aa:	4604      	mov	r4, r0
 80018ac:	b920      	cbnz	r0, 80018b8 <spi_stm32_init+0x24>

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
#endif

	spi_context_unlock_unconditionally(&data->ctx);
 80018ae:	4628      	mov	r0, r5
 80018b0:	f001 ff8d 	bl	80037ce <spi_context_unlock_unconditionally>

	return 0;
}
 80018b4:	4620      	mov	r0, r4
 80018b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
 80018b8:	f06f 0404 	mvn.w	r4, #4
 80018bc:	e7fa      	b.n	80018b4 <spi_stm32_init+0x20>
 80018be:	bf00      	nop
 80018c0:	08004518 	.word	0x08004518

080018c4 <spi_stm32_transceive>:
{
 80018c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c8:	461f      	mov	r7, r3
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 80018ca:	6803      	ldr	r3, [r0, #0]
	struct spi_stm32_data *data = DEV_DATA(dev);
 80018cc:	6884      	ldr	r4, [r0, #8]
	SPI_TypeDef *spi = cfg->spi;
 80018ce:	689b      	ldr	r3, [r3, #8]
{
 80018d0:	b08d      	sub	sp, #52	; 0x34
	SPI_TypeDef *spi = cfg->spi;
 80018d2:	689e      	ldr	r6, [r3, #8]
{
 80018d4:	4605      	mov	r5, r0
 80018d6:	4689      	mov	r9, r1
	if (!tx_bufs && !rx_bufs) {
 80018d8:	4690      	mov	r8, r2
 80018da:	b912      	cbnz	r2, 80018e2 <spi_stm32_transceive+0x1e>
 80018dc:	2f00      	cmp	r7, #0
 80018de:	f000 8139 	beq.w	8001b54 <spi_stm32_transceive+0x290>

static inline void spi_context_lock(struct spi_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
 80018e2:	f104 0b04 	add.w	fp, r4, #4
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 80018e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ee:	4658      	mov	r0, fp
 80018f0:	f001 f9c6 	bl	8002c80 <z_impl_k_sem_take>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 80018f4:	682b      	ldr	r3, [r5, #0]
	const u32_t scaler[] = {
 80018f6:	f8df c290 	ldr.w	ip, [pc, #656]	; 8001b88 <spi_stm32_transceive+0x2c4>
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	9301      	str	r3, [sp, #4]
	const u32_t scaler[] = {
 80018fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	struct spi_stm32_data *data = DEV_DATA(dev);
 8001902:	f8d5 a008 	ldr.w	sl, [r5, #8]
	const u32_t scaler[] = {
 8001906:	ad04      	add	r5, sp, #16
 8001908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800190e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8001912:	f8da 3000 	ldr.w	r3, [sl]
 8001916:	4599      	cmp	r9, r3
 8001918:	f000 8093 	beq.w	8001a42 <spi_stm32_transceive+0x17e>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 800191c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8001920:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8001924:	2b08      	cmp	r3, #8
 8001926:	d002      	beq.n	800192e <spi_stm32_transceive+0x6a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8001928:	2b10      	cmp	r3, #16
 800192a:	f040 8117 	bne.w	8001b5c <spi_stm32_transceive+0x298>
	SPI_TypeDef *spi = cfg->spi;
 800192e:	9b01      	ldr	r3, [sp, #4]
 8001930:	689d      	ldr	r5, [r3, #8]
 8001932:	4894      	ldr	r0, [pc, #592]	; (8001b84 <spi_stm32_transceive+0x2c0>)
 8001934:	f000 fd7a 	bl	800242c <z_impl_device_get_binding>
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8001938:	6843      	ldr	r3, [r0, #4]
 800193a:	9901      	ldr	r1, [sp, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	aa03      	add	r2, sp, #12
 8001940:	4798      	blx	r3
	if (clock_control_get_rate(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8001942:	2800      	cmp	r0, #0
 8001944:	f2c0 8104 	blt.w	8001b50 <spi_stm32_transceive+0x28c>
		u32_t clk = clock >> br;
 8001948:	9a03      	ldr	r2, [sp, #12]
		if (clk <= config->frequency) {
 800194a:	f8d9 1000 	ldr.w	r1, [r9]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800194e:	2301      	movs	r3, #1
		u32_t clk = clock >> br;
 8001950:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 8001954:	4288      	cmp	r0, r1
 8001956:	f240 81d5 	bls.w	8001d04 <spi_stm32_transceive+0x440>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800195a:	3301      	adds	r3, #1
 800195c:	2b09      	cmp	r3, #9
 800195e:	d1f7      	bne.n	8001950 <spi_stm32_transceive+0x8c>
		return -EINVAL;
 8001960:	f06f 0715 	mvn.w	r7, #21
 8001964:	e0f6      	b.n	8001b54 <spi_stm32_transceive+0x290>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8001966:	682a      	ldr	r2, [r5, #0]
 8001968:	f042 0202 	orr.w	r2, r2, #2
 800196c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800196e:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8001970:	0758      	lsls	r0, r3, #29
 8001972:	bf4c      	ite	mi
 8001974:	f042 0201 	orrmi.w	r2, r2, #1
 8001978:	f022 0201 	bicpl.w	r2, r2, #1
 800197c:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800197e:	682a      	ldr	r2, [r5, #0]
 8001980:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001984:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8001986:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8001988:	06d9      	lsls	r1, r3, #27
 800198a:	bf4c      	ite	mi
 800198c:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8001990:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 8001994:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8001996:	682a      	ldr	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8001998:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800199c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019a0:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80019a2:	682a      	ldr	r2, [r5, #0]
 80019a4:	f003 0001 	and.w	r0, r3, #1
 80019a8:	b159      	cbz	r1, 80019c2 <spi_stm32_transceive+0xfe>
 80019aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ae:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80019b0:	686a      	ldr	r2, [r5, #4]
 80019b2:	f022 0204 	bic.w	r2, r2, #4
 80019b6:	606a      	str	r2, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 80019b8:	b968      	cbnz	r0, 80019d6 <spi_stm32_transceive+0x112>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80019ba:	682a      	ldr	r2, [r5, #0]
 80019bc:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 80019c0:	e00c      	b.n	80019dc <spi_stm32_transceive+0x118>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80019c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 80019c6:	2800      	cmp	r0, #0
 80019c8:	f000 80ba 	beq.w	8001b40 <spi_stm32_transceive+0x27c>
 80019cc:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80019ce:	686a      	ldr	r2, [r5, #4]
 80019d0:	f022 0204 	bic.w	r2, r2, #4
 80019d4:	606a      	str	r2, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80019d6:	682a      	ldr	r2, [r5, #0]
 80019d8:	f422 7282 	bic.w	r2, r2, #260	; 0x104
 80019dc:	602a      	str	r2, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 80019de:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80019e2:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	bf0c      	ite	eq
 80019e8:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 80019ec:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 80019f0:	602b      	str	r3, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80019f2:	686b      	ldr	r3, [r5, #4]
 80019f4:	f023 0310 	bic.w	r3, r3, #16
 80019f8:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 80019fa:	f8ca 9000 	str.w	r9, [sl]
	return 1;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 80019fe:	b301      	cbz	r1, 8001a42 <spi_stm32_transceive+0x17e>
 8001a00:	6808      	ldr	r0, [r1, #0]
 8001a02:	b1f0      	cbz	r0, 8001a42 <spi_stm32_transceive+0x17e>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
				   ctx->config->cs->gpio_pin, GPIO_OUTPUT);
 8001a04:	684d      	ldr	r5, [r1, #4]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config->config_info;
	struct gpio_driver_data *data =
 8001a06:	f8d0 9008 	ldr.w	r9, [r0, #8]
	return api->pin_configure(port, pin, flags);
 8001a0a:	6843      	ldr	r3, [r0, #4]
 8001a0c:	b2ed      	uxtb	r5, r5
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a14:	4629      	mov	r1, r5
 8001a16:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
 8001a18:	b940      	cbnz	r0, 8001a2c <spi_stm32_transceive+0x168>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	fa03 f505 	lsl.w	r5, r3, r5
 8001a20:	f8d9 3000 	ldr.w	r3, [r9]
 8001a24:	ea23 0305 	bic.w	r3, r3, r5
 8001a28:	f8c9 3000 	str.w	r3, [r9]
		gpio_pin_set(ctx->config->cs->gpio_dev,
 8001a2c:	f8da 2000 	ldr.w	r2, [sl]
 8001a30:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
 8001a32:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_set(ctx->config->cs->gpio_dev,
 8001a36:	7919      	ldrb	r1, [r3, #4]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	43d2      	mvns	r2, r2
 8001a3c:	0fd2      	lsrs	r2, r2, #31
 8001a3e:	f001 fe8c 	bl	800375a <gpio_pin_set>
			       const struct spi_buf_set *rx_bufs,
			       u8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 8001a42:	f1b8 0f00 	cmp.w	r8, #0
 8001a46:	f000 808c 	beq.w	8001b62 <spi_stm32_transceive+0x29e>
		ctx->current_tx = tx_bufs->buffers;
 8001a4a:	f8d8 3000 	ldr.w	r3, [r8]
		ctx->tx_count = tx_bufs->count;
 8001a4e:	f8d8 2004 	ldr.w	r2, [r8, #4]
		ctx->current_tx = tx_bufs->buffers;
 8001a52:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
 8001a54:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001a56:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
 8001a58:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001a5a:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
 8001a5c:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 8001a5e:	2f00      	cmp	r7, #0
 8001a60:	f000 8084 	beq.w	8001b6c <spi_stm32_transceive+0x2a8>
		ctx->current_rx = rx_bufs->buffers;
 8001a64:	683b      	ldr	r3, [r7, #0]
		ctx->rx_count = rx_bufs->count;
 8001a66:	687a      	ldr	r2, [r7, #4]
		ctx->current_rx = rx_bufs->buffers;
 8001a68:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
 8001a6a:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8001a6c:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
 8001a6e:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8001a70:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
 8001a72:	6463      	str	r3, [r4, #68]	; 0x44
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a74:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 8001a76:	2200      	movs	r2, #0
 8001a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a7c:	6262      	str	r2, [r4, #36]	; 0x24
	_spi_context_cs_control(ctx, on, false);
 8001a7e:	2101      	movs	r1, #1
 8001a80:	6033      	str	r3, [r6, #0]
 8001a82:	4620      	mov	r0, r4
 8001a84:	f001 fe79 	bl	800377a <_spi_context_cs_control.isra.0>
	u16_t operation = data->ctx.config->operation;
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8001a8c:	f013 0101 	ands.w	r1, r3, #1
 8001a90:	f040 80b1 	bne.w	8001bf6 <spi_stm32_transceive+0x332>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001a94:	68b2      	ldr	r2, [r6, #8]
 8001a96:	0790      	lsls	r0, r2, #30
 8001a98:	d5fc      	bpl.n	8001a94 <spi_stm32_transceive+0x1d0>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001a9a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001aa2:	d173      	bne.n	8001b8c <spi_stm32_transceive+0x2c8>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8001aa4:	b112      	cbz	r2, 8001aac <spi_stm32_transceive+0x1e8>
 8001aa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aa8:	b103      	cbz	r3, 8001aac <spi_stm32_transceive+0x1e8>
			tx_frame = UNALIGNED_GET((u8_t *)(data->ctx.tx_buf));
 8001aaa:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8001aac:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8001aae:	7331      	strb	r1, [r6, #12]
	if (!ctx->tx_len) {
 8001ab0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ab2:	b183      	cbz	r3, 8001ad6 <spi_stm32_transceive+0x212>
	ctx->tx_len -= len;
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d15c      	bne.n	8001b76 <spi_stm32_transceive+0x2b2>
		ctx->tx_count--;
 8001abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d05b      	beq.n	8001b7e <spi_stm32_transceive+0x2ba>
			ctx->current_tx++;
 8001ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ac8:	f103 0208 	add.w	r2, r3, #8
 8001acc:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001ace:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001ad0:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001ad2:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001ad4:	63e3      	str	r3, [r4, #60]	; 0x3c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001ad6:	68b3      	ldr	r3, [r6, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 8001ad8:	07d9      	lsls	r1, r3, #31
 8001ada:	d5fc      	bpl.n	8001ad6 <spi_stm32_transceive+0x212>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001adc:	6822      	ldr	r2, [r4, #0]
 8001ade:	8892      	ldrh	r2, [r2, #4]
 8001ae0:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8001ae4:	2a08      	cmp	r2, #8
 8001ae6:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
  return (uint8_t)(READ_REG(SPIx->DR));
 8001aea:	68f2      	ldr	r2, [r6, #12]
 8001aec:	d16b      	bne.n	8001bc6 <spi_stm32_transceive+0x302>
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8001aee:	b10b      	cbz	r3, 8001af4 <spi_stm32_transceive+0x230>
 8001af0:	b101      	cbz	r1, 8001af4 <spi_stm32_transceive+0x230>
 8001af2:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8001af4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001af6:	b193      	cbz	r3, 8001b1e <spi_stm32_transceive+0x25a>
	ctx->rx_len -= len;
 8001af8:	3b01      	subs	r3, #1
 8001afa:	6463      	str	r3, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 80cc 	bne.w	8001c9a <spi_stm32_transceive+0x3d6>
		ctx->rx_count--;
 8001b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b04:	3b01      	subs	r3, #1
 8001b06:	6363      	str	r3, [r4, #52]	; 0x34
		if (ctx->rx_count) {
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80cb 	beq.w	8001ca4 <spi_stm32_transceive+0x3e0>
			ctx->current_rx++;
 8001b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b10:	f103 0208 	add.w	r2, r3, #8
 8001b14:	6322      	str	r2, [r4, #48]	; 0x30
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8001b16:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8001b18:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8001b1a:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
 8001b1c:	6463      	str	r3, [r4, #68]	; 0x44
	u32_t sr = LL_SPI_ReadReg(spi, SR);
 8001b1e:	68b3      	ldr	r3, [r6, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8001b20:	f413 7fb8 	tst.w	r3, #368	; 0x170
 8001b24:	f000 80c6 	beq.w	8001cb4 <spi_stm32_transceive+0x3f0>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8001b28:	68b3      	ldr	r3, [r6, #8]
 8001b2a:	065d      	lsls	r5, r3, #25
 8001b2c:	d505      	bpl.n	8001b3a <spi_stm32_transceive+0x276>
  tmpreg = SPIx->DR;
 8001b2e:	68f3      	ldr	r3, [r6, #12]
 8001b30:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8001b32:	9b03      	ldr	r3, [sp, #12]
  tmpreg = SPIx->SR;
 8001b34:	68b3      	ldr	r3, [r6, #8]
 8001b36:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8001b38:	9b03      	ldr	r3, [sp, #12]
		return -EIO;
 8001b3a:	f06f 0704 	mvn.w	r7, #4
 8001b3e:	e0c1      	b.n	8001cc4 <spi_stm32_transceive+0x400>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001b40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b44:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001b46:	686a      	ldr	r2, [r5, #4]
 8001b48:	f042 0204 	orr.w	r2, r2, #4
 8001b4c:	606a      	str	r2, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8001b4e:	e734      	b.n	80019ba <spi_stm32_transceive+0xf6>
		return -EIO;
 8001b50:	f06f 0704 	mvn.w	r7, #4
}
 8001b54:	4638      	mov	r0, r7
 8001b56:	b00d      	add	sp, #52	; 0x34
 8001b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
 8001b5c:	f06f 0722 	mvn.w	r7, #34	; 0x22
 8001b60:	e7f8      	b.n	8001b54 <spi_stm32_transceive+0x290>
		ctx->tx_count = 0;
 8001b62:	e9c4 880a 	strd	r8, r8, [r4, #40]	; 0x28
		ctx->tx_len = 0;
 8001b66:	e9c4 880e 	strd	r8, r8, [r4, #56]	; 0x38
 8001b6a:	e778      	b.n	8001a5e <spi_stm32_transceive+0x19a>
		ctx->rx_count = 0;
 8001b6c:	e9c4 770c 	strd	r7, r7, [r4, #48]	; 0x30
		ctx->rx_len = 0;
 8001b70:	e9c4 7710 	strd	r7, r7, [r4, #64]	; 0x40
 8001b74:	e77e      	b.n	8001a74 <spi_stm32_transceive+0x1b0>
	} else if (ctx->tx_buf) {
 8001b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ac      	beq.n	8001ad6 <spi_stm32_transceive+0x212>
		ctx->tx_buf += dfs * len;
 8001b7c:	3301      	adds	r3, #1
			ctx->tx_buf = NULL;
 8001b7e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b80:	e7a9      	b.n	8001ad6 <spi_stm32_transceive+0x212>
 8001b82:	bf00      	nop
 8001b84:	08004518 	.word	0x08004518
 8001b88:	080041e0 	.word	0x080041e0
	return !!(ctx->tx_buf && ctx->tx_len);
 8001b8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b8e:	b10a      	cbz	r2, 8001b94 <spi_stm32_transceive+0x2d0>
 8001b90:	b103      	cbz	r3, 8001b94 <spi_stm32_transceive+0x2d0>
			tx_frame = UNALIGNED_GET((u16_t *)(data->ctx.tx_buf));
 8001b92:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8001b94:	81b1      	strh	r1, [r6, #12]
	if (!ctx->tx_len) {
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d09d      	beq.n	8001ad6 <spi_stm32_transceive+0x212>
	ctx->tx_len -= len;
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
 8001b9e:	b96b      	cbnz	r3, 8001bbc <spi_stm32_transceive+0x2f8>
		ctx->tx_count--;
 8001ba0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0e9      	beq.n	8001b7e <spi_stm32_transceive+0x2ba>
			ctx->current_tx++;
 8001baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bac:	f103 0208 	add.w	r2, r3, #8
 8001bb0:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001bb2:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001bb4:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001bb6:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	e78b      	b.n	8001ad4 <spi_stm32_transceive+0x210>
	} else if (ctx->tx_buf) {
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d08a      	beq.n	8001ad6 <spi_stm32_transceive+0x212>
		ctx->tx_buf += dfs * len;
 8001bc0:	3202      	adds	r2, #2
 8001bc2:	63a2      	str	r2, [r4, #56]	; 0x38
 8001bc4:	e787      	b.n	8001ad6 <spi_stm32_transceive+0x212>
	return !!(ctx->rx_buf && ctx->rx_len);
 8001bc6:	b10b      	cbz	r3, 8001bcc <spi_stm32_transceive+0x308>
 8001bc8:	b101      	cbz	r1, 8001bcc <spi_stm32_transceive+0x308>
			UNALIGNED_PUT(rx_frame, (u16_t *)data->ctx.rx_buf);
 8001bca:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8001bcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0a5      	beq.n	8001b1e <spi_stm32_transceive+0x25a>
	ctx->rx_len -= len;
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6463      	str	r3, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d166      	bne.n	8001ca8 <spi_stm32_transceive+0x3e4>
		ctx->rx_count--;
 8001bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	6363      	str	r3, [r4, #52]	; 0x34
		if (ctx->rx_count) {
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d05f      	beq.n	8001ca4 <spi_stm32_transceive+0x3e0>
			ctx->current_rx++;
 8001be4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001be6:	f103 0208 	add.w	r2, r3, #8
 8001bea:	6322      	str	r2, [r4, #48]	; 0x30
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8001bec:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8001bee:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
 8001bf0:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	e792      	b.n	8001b1c <spi_stm32_transceive+0x258>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001bf6:	68b2      	ldr	r2, [r6, #8]
 8001bf8:	0792      	lsls	r2, r2, #30
 8001bfa:	d549      	bpl.n	8001c90 <spi_stm32_transceive+0x3cc>
	return !!(ctx->tx_len);
 8001bfc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8001bfe:	2900      	cmp	r1, #0
 8001c00:	d046      	beq.n	8001c90 <spi_stm32_transceive+0x3cc>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001c02:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c0a:	d12b      	bne.n	8001c64 <spi_stm32_transceive+0x3a0>
			tx_frame = UNALIGNED_GET((u8_t *)(data->ctx.tx_buf));
 8001c0c:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 8001c0e:	7333      	strb	r3, [r6, #12]
	if (!ctx->tx_len) {
 8001c10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c12:	b19b      	cbz	r3, 8001c3c <spi_stm32_transceive+0x378>
	ctx->tx_len -= len;
 8001c14:	3b01      	subs	r3, #1
 8001c16:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
 8001c18:	b963      	cbnz	r3, 8001c34 <spi_stm32_transceive+0x370>
		ctx->tx_count--;
 8001c1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
 8001c20:	b15b      	cbz	r3, 8001c3a <spi_stm32_transceive+0x376>
			ctx->current_tx++;
 8001c22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c24:	f103 0208 	add.w	r2, r3, #8
 8001c28:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001c2a:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001c2c:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001c2e:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001c30:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001c32:	e003      	b.n	8001c3c <spi_stm32_transceive+0x378>
	} else if (ctx->tx_buf) {
 8001c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c36:	b10b      	cbz	r3, 8001c3c <spi_stm32_transceive+0x378>
		ctx->tx_buf += dfs * len;
 8001c38:	3301      	adds	r3, #1
 8001c3a:	63a3      	str	r3, [r4, #56]	; 0x38
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001c3c:	68b3      	ldr	r3, [r6, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 8001c3e:	07df      	lsls	r7, r3, #31
 8001c40:	f57f af6d 	bpl.w	8001b1e <spi_stm32_transceive+0x25a>
	return !!(ctx->rx_buf && ctx->rx_len);
 8001c44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f43f af69 	beq.w	8001b1e <spi_stm32_transceive+0x25a>
 8001c4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	f43f af65 	beq.w	8001b1e <spi_stm32_transceive+0x25a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	8892      	ldrh	r2, [r2, #4]
 8001c58:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8001c5c:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c5e:	68f2      	ldr	r2, [r6, #12]
 8001c60:	d1b3      	bne.n	8001bca <spi_stm32_transceive+0x306>
 8001c62:	e746      	b.n	8001af2 <spi_stm32_transceive+0x22e>
			tx_frame = UNALIGNED_GET((u16_t *)(data->ctx.tx_buf));
 8001c64:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 8001c66:	81b3      	strh	r3, [r6, #12]
	ctx->tx_len -= len;
 8001c68:	3901      	subs	r1, #1
 8001c6a:	63e1      	str	r1, [r4, #60]	; 0x3c
	if (!ctx->tx_len) {
 8001c6c:	b969      	cbnz	r1, 8001c8a <spi_stm32_transceive+0x3c6>
		ctx->tx_count--;
 8001c6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c70:	3b01      	subs	r3, #1
 8001c72:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (ctx->tx_count) {
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0e0      	beq.n	8001c3a <spi_stm32_transceive+0x376>
			ctx->current_tx++;
 8001c78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c7a:	f103 0208 	add.w	r2, r3, #8
 8001c7e:	62a2      	str	r2, [r4, #40]	; 0x28
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001c80:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001c82:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
 8001c84:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
 8001c86:	085b      	lsrs	r3, r3, #1
 8001c88:	e7d2      	b.n	8001c30 <spi_stm32_transceive+0x36c>
		ctx->tx_buf += dfs * len;
 8001c8a:	3202      	adds	r2, #2
 8001c8c:	63a2      	str	r2, [r4, #56]	; 0x38
 8001c8e:	e7d5      	b.n	8001c3c <spi_stm32_transceive+0x378>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001c90:	6873      	ldr	r3, [r6, #4]
 8001c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c96:	6073      	str	r3, [r6, #4]
#ifdef CONFIG_SOC_SERIES_STM32MP1X
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 8001c98:	e7d0      	b.n	8001c3c <spi_stm32_transceive+0x378>
	} else if (ctx->rx_buf) {
 8001c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f43f af3e 	beq.w	8001b1e <spi_stm32_transceive+0x25a>
		ctx->rx_buf += dfs * len;
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	6423      	str	r3, [r4, #64]	; 0x40
 8001ca6:	e73a      	b.n	8001b1e <spi_stm32_transceive+0x25a>
	} else if (ctx->rx_buf) {
 8001ca8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f43f af37 	beq.w	8001b1e <spi_stm32_transceive+0x25a>
		ctx->rx_buf += dfs * len;
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	e7f7      	b.n	8001ca4 <spi_stm32_transceive+0x3e0>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8001cb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f47f aee6 	bne.w	8001a88 <spi_stm32_transceive+0x1c4>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 8001cbc:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8001cbe:	2f00      	cmp	r7, #0
 8001cc0:	f47f aee2 	bne.w	8001a88 <spi_stm32_transceive+0x1c4>
	_spi_context_cs_control(ctx, on, false);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f001 fd56 	bl	800377a <_spi_context_cs_control.isra.0>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8001cce:	6833      	ldr	r3, [r6, #0]
 8001cd0:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8001cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cd8:	d102      	bne.n	8001ce0 <spi_stm32_transceive+0x41c>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001cda:	68b3      	ldr	r3, [r6, #8]
 8001cdc:	0618      	lsls	r0, r3, #24
 8001cde:	d4fc      	bmi.n	8001cda <spi_stm32_transceive+0x416>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8001ce0:	68b3      	ldr	r3, [r6, #8]
 8001ce2:	0699      	lsls	r1, r3, #26
 8001ce4:	d506      	bpl.n	8001cf4 <spi_stm32_transceive+0x430>
  tmpreg_sr = SPIx->SR;
 8001ce6:	68b3      	ldr	r3, [r6, #8]
 8001ce8:	9304      	str	r3, [sp, #16]
  (void) tmpreg_sr;
 8001cea:	9b04      	ldr	r3, [sp, #16]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001cec:	6833      	ldr	r3, [r6, #0]
 8001cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cf2:	6033      	str	r3, [r6, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cfa:	6033      	str	r3, [r6, #0]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001cfc:	4658      	mov	r0, fp
 8001cfe:	f000 ff9f 	bl	8002c40 <z_impl_k_sem_give>
}
 8001d02:	e727      	b.n	8001b54 <spi_stm32_transceive+0x290>
 8001d04:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8001d06:	a90c      	add	r1, sp, #48	; 0x30
 8001d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d0c:	602a      	str	r2, [r5, #0]
 8001d0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001d12:	682a      	ldr	r2, [r5, #0]
 8001d14:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001d18:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8001d20:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8001d24:	079a      	lsls	r2, r3, #30
 8001d26:	f53f ae1e 	bmi.w	8001966 <spi_stm32_transceive+0xa2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8001d2a:	682a      	ldr	r2, [r5, #0]
 8001d2c:	f022 0202 	bic.w	r2, r2, #2
 8001d30:	e61c      	b.n	800196c <spi_stm32_transceive+0xa8>
 8001d32:	bf00      	nop

08001d34 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001d34:	6803      	ldr	r3, [r0, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	615a      	str	r2, [r3, #20]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <uart_stm32_irq_err_enable+0x50>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <uart_stm32_irq_err_enable+0x3c>
 8001d48:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00f      	beq.n	8001d70 <uart_stm32_irq_err_enable+0x3c>
 8001d50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00b      	beq.n	8001d70 <uart_stm32_irq_err_enable+0x3c>
 8001d58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <uart_stm32_irq_err_enable+0x3c>
 8001d60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <uart_stm32_irq_err_enable+0x3c>
 8001d68:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d103      	bne.n	8001d78 <uart_stm32_irq_err_enable+0x44>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d76:	611a      	str	r2, [r3, #16]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d7e:	60da      	str	r2, [r3, #12]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40011000 	.word	0x40011000

08001d88 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001d88:	6803      	ldr	r3, [r0, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	615a      	str	r2, [r3, #20]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8001d96:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <uart_stm32_irq_err_disable+0x50>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d013      	beq.n	8001dc4 <uart_stm32_irq_err_disable+0x3c>
 8001d9c:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00f      	beq.n	8001dc4 <uart_stm32_irq_err_disable+0x3c>
 8001da4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00b      	beq.n	8001dc4 <uart_stm32_irq_err_disable+0x3c>
 8001dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <uart_stm32_irq_err_disable+0x3c>
 8001db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <uart_stm32_irq_err_disable+0x3c>
 8001dbc:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d103      	bne.n	8001dcc <uart_stm32_irq_err_disable+0x44>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dd2:	60da      	str	r2, [r3, #12]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40011000 	.word	0x40011000

08001ddc <uart_stm32_configure>:
{
 8001ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001de0:	6803      	ldr	r3, [r0, #0]
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001de2:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001de4:	689b      	ldr	r3, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001de6:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001de8:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8001dea:	2a01      	cmp	r2, #1
{
 8001dec:	460d      	mov	r5, r1
	switch (parity) {
 8001dee:	d075      	beq.n	8001edc <uart_stm32_configure+0x100>
		return LL_USART_PARITY_NONE;
 8001df0:	2a02      	cmp	r2, #2
 8001df2:	bf0c      	ite	eq
 8001df4:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8001df8:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001dfa:	f895 8005 	ldrb.w	r8, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8001dfe:	f895 9006 	ldrb.w	r9, [r5, #6]
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001e02:	79ef      	ldrb	r7, [r5, #7]
 8001e04:	f1b8 0f02 	cmp.w	r8, #2
 8001e08:	bf96      	itet	ls
 8001e0a:	4b37      	ldrls	r3, [pc, #220]	; (8001ee8 <uart_stm32_configure+0x10c>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001e0c:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 8001e10:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
		return LL_USART_DATAWIDTH_8B;
 8001e14:	f1b9 0f04 	cmp.w	r9, #4
 8001e18:	bf0c      	ite	eq
 8001e1a:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8001e1e:	2300      	movne	r3, #0
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8001e20:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8001e22:	2f01      	cmp	r7, #1
 8001e24:	bf14      	ite	ne
 8001e26:	f04f 0c00 	movne.w	ip, #0
 8001e2a:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8001e2e:	2a01      	cmp	r2, #1
 8001e30:	d957      	bls.n	8001ee2 <uart_stm32_configure+0x106>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 8001e32:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 8001e36:	d054      	beq.n	8001ee2 <uart_stm32_configure+0x106>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 8001e38:	f1b9 0f02 	cmp.w	r9, #2
 8001e3c:	d951      	bls.n	8001ee2 <uart_stm32_configure+0x106>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 8001e3e:	b187      	cbz	r7, 8001e62 <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <uart_stm32_configure+0x110>)
 8001e42:	4294      	cmp	r4, r2
 8001e44:	d00b      	beq.n	8001e5e <uart_stm32_configure+0x82>
 8001e46:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001e4a:	4294      	cmp	r4, r2
 8001e4c:	d007      	beq.n	8001e5e <uart_stm32_configure+0x82>
 8001e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e52:	4294      	cmp	r4, r2
 8001e54:	d003      	beq.n	8001e5e <uart_stm32_configure+0x82>
 8001e56:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8001e5a:	4294      	cmp	r4, r2
 8001e5c:	d141      	bne.n	8001ee2 <uart_stm32_configure+0x106>
 8001e5e:	2f01      	cmp	r7, #1
 8001e60:	d13f      	bne.n	8001ee2 <uart_stm32_configure+0x106>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001e62:	68e2      	ldr	r2, [r4, #12]
 8001e64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e68:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001e6a:	68e2      	ldr	r2, [r4, #12]
 8001e6c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001e70:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001e72:	bf1f      	itttt	ne
 8001e74:	68e7      	ldrne	r7, [r4, #12]
 8001e76:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8001e7a:	430f      	orrne	r7, r1
 8001e7c:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001e7e:	6922      	ldr	r2, [r4, #16]
 8001e80:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001e84:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001e86:	bf1f      	itttt	ne
 8001e88:	6921      	ldrne	r1, [r4, #16]
 8001e8a:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8001e8e:	ea41 010e 	orrne.w	r1, r1, lr
 8001e92:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001e94:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 8001e96:	6829      	ldr	r1, [r5, #0]
 8001e98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8001e9c:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001e9e:	bf1f      	itttt	ne
 8001ea0:	68e2      	ldrne	r2, [r4, #12]
 8001ea2:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8001ea6:	431a      	orrne	r2, r3
 8001ea8:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001eaa:	6963      	ldr	r3, [r4, #20]
 8001eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001eb0:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001eb2:	bf1f      	itttt	ne
 8001eb4:	6963      	ldrne	r3, [r4, #20]
 8001eb6:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8001eba:	ea43 030c 	orrne.w	r3, r3, ip
 8001ebe:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 8001ec0:	6833      	ldr	r3, [r6, #0]
 8001ec2:	4299      	cmp	r1, r3
 8001ec4:	d003      	beq.n	8001ece <uart_stm32_configure+0xf2>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001ec6:	f001 fd70 	bl	80039aa <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001eca:	682b      	ldr	r3, [r5, #0]
 8001ecc:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ece:	68e3      	ldr	r3, [r4, #12]
 8001ed0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ed4:	60e3      	str	r3, [r4, #12]
	return 0;
 8001ed6:	2000      	movs	r0, #0
};
 8001ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (parity) {
 8001edc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001ee0:	e78b      	b.n	8001dfa <uart_stm32_configure+0x1e>
		return -ENOTSUP;
 8001ee2:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001ee6:	e7f7      	b.n	8001ed8 <uart_stm32_configure+0xfc>
 8001ee8:	08004430 	.word	0x08004430
 8001eec:	40011000 	.word	0x40011000

08001ef0 <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8001ef0:	6803      	ldr	r3, [r0, #0]
{
 8001ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8001ef6:	689f      	ldr	r7, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001ef8:	f8d0 8008 	ldr.w	r8, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001efc:	463e      	mov	r6, r7
{
 8001efe:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001f00:	f856 4b0c 	ldr.w	r4, [r6], #12
 8001f04:	481a      	ldr	r0, [pc, #104]	; (8001f70 <uart_stm32_init+0x80>)
 8001f06:	f000 fa91 	bl	800242c <z_impl_device_get_binding>
	return api->on(dev, sys);
 8001f0a:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8001f0c:	f8c8 0004 	str.w	r0, [r8, #4]
 8001f10:	4631      	mov	r1, r6
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8001f16:	4606      	mov	r6, r0
 8001f18:	bb38      	cbnz	r0, 8001f6a <uart_stm32_init+0x7a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001f1a:	68e3      	ldr	r3, [r4, #12]
 8001f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f20:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001f22:	68e3      	ldr	r3, [r4, #12]
 8001f24:	f043 030c 	orr.w	r3, r3, #12
 8001f28:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8001f2a:	68e3      	ldr	r3, [r4, #12]
 8001f2c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f30:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001f32:	6923      	ldr	r3, [r4, #16]
 8001f34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f38:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8001f3a:	7d3b      	ldrb	r3, [r7, #20]
 8001f3c:	b133      	cbz	r3, 8001f4c <uart_stm32_init+0x5c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001f44:	6953      	ldr	r3, [r2, #20]
 8001f46:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f4a:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	f8d8 1000 	ldr.w	r1, [r8]
 8001f52:	f001 fd2a 	bl	80039aa <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f56:	68e3      	ldr	r3, [r4, #12]
 8001f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f5c:	60e3      	str	r3, [r4, #12]
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
	}
#endif /* !USART_ISR_REACK */

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
 8001f5e:	4628      	mov	r0, r5
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4798      	blx	r3
#endif
	return 0;
}
 8001f64:	4630      	mov	r0, r6
 8001f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 8001f6a:	f06f 0604 	mvn.w	r6, #4
 8001f6e:	e7f9      	b.n	8001f64 <uart_stm32_init+0x74>
 8001f70:	08004518 	.word	0x08004518

08001f74 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f74:	6a03      	ldr	r3, [r0, #32]
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f7c:	6a03      	ldr	r3, [r0, #32]
{
 8001f7e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f80:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f82:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f86:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f8a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f8c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f8e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001f92:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f94:	4d0e      	ldr	r5, [pc, #56]	; (8001fd0 <TIM_OC1_SetConfig+0x5c>)
 8001f96:	42a8      	cmp	r0, r5
 8001f98:	d002      	beq.n	8001fa0 <TIM_OC1_SetConfig+0x2c>
 8001f9a:	4e0e      	ldr	r6, [pc, #56]	; (8001fd4 <TIM_OC1_SetConfig+0x60>)
 8001f9c:	42b0      	cmp	r0, r6
 8001f9e:	d110      	bne.n	8001fc2 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fa0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fa2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001fa6:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fa8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001faa:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fae:	d002      	beq.n	8001fb6 <TIM_OC1_SetConfig+0x42>
 8001fb0:	4d08      	ldr	r5, [pc, #32]	; (8001fd4 <TIM_OC1_SetConfig+0x60>)
 8001fb2:	42a8      	cmp	r0, r5
 8001fb4:	d105      	bne.n	8001fc2 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fb6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fbe:	4335      	orrs	r5, r6
 8001fc0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fc4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fc6:	684a      	ldr	r2, [r1, #4]
 8001fc8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fca:	6203      	str	r3, [r0, #32]
}
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
 8001fce:	bf00      	nop
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fd8:	6a03      	ldr	r3, [r0, #32]
 8001fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fde:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe0:	6a03      	ldr	r3, [r0, #32]
{
 8001fe2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fe6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fe8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001fee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ff0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001ff2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ff6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ffa:	4d11      	ldr	r5, [pc, #68]	; (8002040 <TIM_OC3_SetConfig+0x68>)
 8001ffc:	42a8      	cmp	r0, r5
 8001ffe:	d003      	beq.n	8002008 <TIM_OC3_SetConfig+0x30>
 8002000:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002004:	42a8      	cmp	r0, r5
 8002006:	d114      	bne.n	8002032 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002008:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800200a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800200e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002012:	4d0b      	ldr	r5, [pc, #44]	; (8002040 <TIM_OC3_SetConfig+0x68>)
 8002014:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800201a:	d003      	beq.n	8002024 <TIM_OC3_SetConfig+0x4c>
 800201c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002020:	42a8      	cmp	r0, r5
 8002022:	d106      	bne.n	8002032 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002024:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002028:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800202c:	4335      	orrs	r5, r6
 800202e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002032:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002034:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002036:	684a      	ldr	r2, [r1, #4]
 8002038:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800203a:	6203      	str	r3, [r0, #32]
}
 800203c:	bd70      	pop	{r4, r5, r6, pc}
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000

08002044 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002044:	6a03      	ldr	r3, [r0, #32]
 8002046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800204a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204c:	6a03      	ldr	r3, [r0, #32]
{
 800204e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002050:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002052:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002054:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002056:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800205a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800205e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002064:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002068:	4d08      	ldr	r5, [pc, #32]	; (800208c <TIM_OC4_SetConfig+0x48>)
 800206a:	42a8      	cmp	r0, r5
 800206c:	d003      	beq.n	8002076 <TIM_OC4_SetConfig+0x32>
 800206e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002072:	42a8      	cmp	r0, r5
 8002074:	d104      	bne.n	8002080 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002076:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002078:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800207c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002080:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002082:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002084:	684a      	ldr	r2, [r1, #4]
 8002086:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002088:	6203      	str	r3, [r0, #32]
}
 800208a:	bd30      	pop	{r4, r5, pc}
 800208c:	40010000 	.word	0x40010000

08002090 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002090:	4a30      	ldr	r2, [pc, #192]	; (8002154 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002092:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002094:	4290      	cmp	r0, r2
 8002096:	d012      	beq.n	80020be <TIM_Base_SetConfig+0x2e>
 8002098:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800209c:	d00f      	beq.n	80020be <TIM_Base_SetConfig+0x2e>
 800209e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80020a2:	4290      	cmp	r0, r2
 80020a4:	d00b      	beq.n	80020be <TIM_Base_SetConfig+0x2e>
 80020a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020aa:	4290      	cmp	r0, r2
 80020ac:	d007      	beq.n	80020be <TIM_Base_SetConfig+0x2e>
 80020ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b2:	4290      	cmp	r0, r2
 80020b4:	d003      	beq.n	80020be <TIM_Base_SetConfig+0x2e>
 80020b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80020ba:	4290      	cmp	r0, r2
 80020bc:	d119      	bne.n	80020f2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80020be:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020c4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020c6:	4a23      	ldr	r2, [pc, #140]	; (8002154 <TIM_Base_SetConfig+0xc4>)
 80020c8:	4290      	cmp	r0, r2
 80020ca:	d029      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 80020cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020d0:	d026      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 80020d2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80020d6:	4290      	cmp	r0, r2
 80020d8:	d022      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 80020da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020de:	4290      	cmp	r0, r2
 80020e0:	d01e      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 80020e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020e6:	4290      	cmp	r0, r2
 80020e8:	d01a      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 80020ea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80020ee:	4290      	cmp	r0, r2
 80020f0:	d016      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 80020f2:	4a19      	ldr	r2, [pc, #100]	; (8002158 <TIM_Base_SetConfig+0xc8>)
 80020f4:	4290      	cmp	r0, r2
 80020f6:	d013      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 80020f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020fc:	4290      	cmp	r0, r2
 80020fe:	d00f      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 8002100:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002104:	4290      	cmp	r0, r2
 8002106:	d00b      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 8002108:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800210c:	4290      	cmp	r0, r2
 800210e:	d007      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 8002110:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002114:	4290      	cmp	r0, r2
 8002116:	d003      	beq.n	8002120 <TIM_Base_SetConfig+0x90>
 8002118:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800211c:	4290      	cmp	r0, r2
 800211e:	d103      	bne.n	8002128 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002120:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002126:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002128:	694a      	ldr	r2, [r1, #20]
 800212a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800212e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002130:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002132:	688b      	ldr	r3, [r1, #8]
 8002134:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002136:	680b      	ldr	r3, [r1, #0]
 8002138:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <TIM_Base_SetConfig+0xc4>)
 800213c:	4298      	cmp	r0, r3
 800213e:	d003      	beq.n	8002148 <TIM_Base_SetConfig+0xb8>
 8002140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002144:	4298      	cmp	r0, r3
 8002146:	d101      	bne.n	800214c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8002148:	690b      	ldr	r3, [r1, #16]
 800214a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800214c:	2301      	movs	r3, #1
 800214e:	6143      	str	r3, [r0, #20]
}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000
 8002158:	40014000 	.word	0x40014000

0800215c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800215c:	6a03      	ldr	r3, [r0, #32]
 800215e:	f023 0310 	bic.w	r3, r3, #16
 8002162:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002164:	6a03      	ldr	r3, [r0, #32]
{
 8002166:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8002168:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800216a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800216c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800216e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002172:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002176:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002178:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800217c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002180:	4d10      	ldr	r5, [pc, #64]	; (80021c4 <TIM_OC2_SetConfig+0x68>)
 8002182:	42a8      	cmp	r0, r5
 8002184:	d003      	beq.n	800218e <TIM_OC2_SetConfig+0x32>
 8002186:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800218a:	42a8      	cmp	r0, r5
 800218c:	d114      	bne.n	80021b8 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800218e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002194:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002198:	4d0a      	ldr	r5, [pc, #40]	; (80021c4 <TIM_OC2_SetConfig+0x68>)
 800219a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800219c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021a0:	d003      	beq.n	80021aa <TIM_OC2_SetConfig+0x4e>
 80021a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021a6:	42a8      	cmp	r0, r5
 80021a8:	d106      	bne.n	80021b8 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021aa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021ae:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021b2:	4335      	orrs	r5, r6
 80021b4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80021b8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80021ba:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80021bc:	684a      	ldr	r2, [r1, #4]
 80021be:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80021c0:	6203      	str	r3, [r0, #32]
}
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
 80021c4:	40010000 	.word	0x40010000

080021c8 <HAL_TIM_OC_Start>:
{
 80021c8:	b510      	push	{r4, lr}
 80021ca:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021cc:	2201      	movs	r2, #1
 80021ce:	6800      	ldr	r0, [r0, #0]
 80021d0:	f001 fcc1 	bl	8003b56 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <HAL_TIM_OC_Start+0x3c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <HAL_TIM_OC_Start+0x1c>
 80021dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d103      	bne.n	80021ec <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80021e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f2:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80021f4:	bf1e      	ittt	ne
 80021f6:	681a      	ldrne	r2, [r3, #0]
 80021f8:	f042 0201 	orrne.w	r2, r2, #1
 80021fc:	601a      	strne	r2, [r3, #0]
}
 80021fe:	2000      	movs	r0, #0
 8002200:	bd10      	pop	{r4, pc}
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000

08002208 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <UTILS_PLL_IsBusy+0x18>)
 800220a:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 800220c:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800220e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8002212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8002216:	4313      	orrs	r3, r2
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8002218:	bf14      	ite	ne
 800221a:	2001      	movne	r0, #1
 800221c:	2000      	moveq	r0, #0
 800221e:	4770      	bx	lr
 8002220:	40023800 	.word	0x40023800

08002224 <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <UTILS_SetFlashLatency.part.0+0x88>)
 8002226:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8002228:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 800222c:	d01b      	beq.n	8002266 <UTILS_SetFlashLatency.part.0+0x42>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <UTILS_SetFlashLatency.part.0+0x8c>)
 8002230:	4298      	cmp	r0, r3
 8002232:	d809      	bhi.n	8002248 <UTILS_SetFlashLatency.part.0+0x24>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <UTILS_SetFlashLatency.part.0+0x90>)
 8002236:	4298      	cmp	r0, r3
 8002238:	d901      	bls.n	800223e <UTILS_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_4;
 800223a:	2304      	movs	r3, #4
 800223c:	e005      	b.n	800224a <UTILS_SetFlashLatency.part.0+0x26>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <UTILS_SetFlashLatency.part.0+0x94>)
 8002240:	4298      	cmp	r0, r3
 8002242:	d906      	bls.n	8002252 <UTILS_SetFlashLatency.part.0+0x2e>
        latency = LL_FLASH_LATENCY_3;
 8002244:	2303      	movs	r3, #3
 8002246:	e000      	b.n	800224a <UTILS_SetFlashLatency.part.0+0x26>
        latency = LL_FLASH_LATENCY_5;
 8002248:	2305      	movs	r3, #5
 800224a:	2b01      	cmp	r3, #1
 800224c:	bf38      	it	cc
 800224e:	2301      	movcc	r3, #1
 8002250:	e009      	b.n	8002266 <UTILS_SetFlashLatency.part.0+0x42>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <UTILS_SetFlashLatency.part.0+0x98>)
 8002254:	4298      	cmp	r0, r3
 8002256:	d901      	bls.n	800225c <UTILS_SetFlashLatency.part.0+0x38>
        latency = LL_FLASH_LATENCY_2;
 8002258:	2302      	movs	r3, #2
 800225a:	e004      	b.n	8002266 <UTILS_SetFlashLatency.part.0+0x42>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <UTILS_SetFlashLatency.part.0+0x9c>)
 800225e:	4298      	cmp	r0, r3
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8002260:	f04f 0300 	mov.w	r3, #0
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002264:	d8f1      	bhi.n	800224a <UTILS_SetFlashLatency.part.0+0x26>
 8002266:	4a11      	ldr	r2, [pc, #68]	; (80022ac <UTILS_SetFlashLatency.part.0+0x88>)
 8002268:	6812      	ldr	r2, [r2, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 800226a:	0452      	lsls	r2, r2, #17
 800226c:	d411      	bmi.n	8002292 <UTILS_SetFlashLatency.part.0+0x6e>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <UTILS_SetFlashLatency.part.0+0xa0>)
 8002270:	4290      	cmp	r0, r2
 8002272:	d908      	bls.n	8002286 <UTILS_SetFlashLatency.part.0+0x62>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002274:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <UTILS_SetFlashLatency.part.0+0x94>)
        latency = LL_FLASH_LATENCY_4;
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf08      	it	eq
 800227a:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800227c:	4290      	cmp	r0, r2
 800227e:	d805      	bhi.n	800228c <UTILS_SetFlashLatency.part.0+0x68>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <UTILS_SetFlashLatency.part.0+0x98>)
 8002282:	4290      	cmp	r0, r2
 8002284:	d802      	bhi.n	800228c <UTILS_SetFlashLatency.part.0+0x68>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <UTILS_SetFlashLatency.part.0+0x9c>)
 8002288:	4290      	cmp	r0, r2
 800228a:	d902      	bls.n	8002292 <UTILS_SetFlashLatency.part.0+0x6e>
 800228c:	2b01      	cmp	r3, #1
 800228e:	bf38      	it	cc
 8002290:	2301      	movcc	r3, #1
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002292:	490d      	ldr	r1, [pc, #52]	; (80022c8 <UTILS_SetFlashLatency.part.0+0xa4>)
 8002294:	680a      	ldr	r2, [r1, #0]
 8002296:	f022 020f 	bic.w	r2, r2, #15
 800229a:	431a      	orrs	r2, r3
 800229c:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800229e:	6808      	ldr	r0, [r1, #0]
 80022a0:	f000 000f 	and.w	r0, r0, #15
  return status;
 80022a4:	1ac0      	subs	r0, r0, r3
 80022a6:	bf18      	it	ne
 80022a8:	2001      	movne	r0, #1
}
 80022aa:	4770      	bx	lr
 80022ac:	40007000 	.word	0x40007000
 80022b0:	08f0d180 	.word	0x08f0d180
 80022b4:	07270e00 	.word	0x07270e00
 80022b8:	055d4a80 	.word	0x055d4a80
 80022bc:	03938700 	.word	0x03938700
 80022c0:	01c9c380 	.word	0x01c9c380
 80022c4:	00b71b00 	.word	0x00b71b00
 80022c8:	40023c00 	.word	0x40023c00

080022cc <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80022cc:	680b      	ldr	r3, [r1, #0]
 80022ce:	4a24      	ldr	r2, [pc, #144]	; (8002360 <UTILS_EnablePLLAndSwitchSystem+0x94>)
 80022d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80022d6:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 80022d8:	4e22      	ldr	r6, [pc, #136]	; (8002364 <UTILS_EnablePLLAndSwitchSystem+0x98>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80022da:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 80022de:	6833      	ldr	r3, [r6, #0]
 80022e0:	42a3      	cmp	r3, r4
{
 80022e2:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 80022e4:	d327      	bcc.n	8002336 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80022ee:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80022f0:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 80022f2:	0192      	lsls	r2, r2, #6
 80022f4:	d5fc      	bpl.n	80022f0 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	6829      	ldr	r1, [r5, #0]
 80022fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	f022 0203 	bic.w	r2, r2, #3
 8002308:	f042 0202 	orr.w	r2, r2, #2
 800230c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002316:	2a08      	cmp	r2, #8
 8002318:	d1fa      	bne.n	8002310 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	6869      	ldr	r1, [r5, #4]
 800231e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	68a9      	ldr	r1, [r5, #8]
 800232a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800232e:	430a      	orrs	r2, r1
 8002330:	609a      	str	r2, [r3, #8]
}
 8002332:	2000      	movs	r0, #0
 8002334:	e005      	b.n	8002342 <UTILS_EnablePLLAndSwitchSystem+0x76>
  if(HCLK_Frequency == 0U)
 8002336:	b174      	cbz	r4, 8002356 <UTILS_EnablePLLAndSwitchSystem+0x8a>
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff ff73 	bl	8002224 <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 800233e:	2800      	cmp	r0, #0
 8002340:	d0d1      	beq.n	80022e6 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8002342:	6833      	ldr	r3, [r6, #0]
 8002344:	42a3      	cmp	r3, r4
 8002346:	d903      	bls.n	8002350 <UTILS_EnablePLLAndSwitchSystem+0x84>
  if(HCLK_Frequency == 0U)
 8002348:	b13c      	cbz	r4, 800235a <UTILS_EnablePLLAndSwitchSystem+0x8e>
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff ff6a 	bl	8002224 <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8002350:	b900      	cbnz	r0, 8002354 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 8002352:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8002354:	bd70      	pop	{r4, r5, r6, pc}
    status = ERROR;
 8002356:	2001      	movs	r0, #1
 8002358:	e7f3      	b.n	8002342 <UTILS_EnablePLLAndSwitchSystem+0x76>
 800235a:	2001      	movs	r0, #1
 800235c:	e7fa      	b.n	8002354 <UTILS_EnablePLLAndSwitchSystem+0x88>
 800235e:	bf00      	nop
 8002360:	08004571 	.word	0x08004571
 8002364:	20001cb8 	.word	0x20001cb8
 8002368:	40023800 	.word	0x40023800

0800236c <LL_PLL_ConfigSystemClock_HSE>:
{
 800236c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002370:	460d      	mov	r5, r1
 8002372:	4604      	mov	r4, r0
 8002374:	4690      	mov	r8, r2
 8002376:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8002378:	f7ff ff46 	bl	8002208 <UTILS_PLL_IsBusy>
 800237c:	2800      	cmp	r0, #0
 800237e:	d138      	bne.n	80023f2 <LL_PLL_ConfigSystemClock_HSE+0x86>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8002380:	f8d8 6000 	ldr.w	r6, [r8]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8002384:	f8d8 7004 	ldr.w	r7, [r8, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002388:	f8d8 3008 	ldr.w	r3, [r8, #8]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 800238c:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8002390:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8002394:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8002398:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800239a:	0c18      	lsrs	r0, r3, #16
 800239c:	3001      	adds	r0, #1
 800239e:	0040      	lsls	r0, r0, #1
 80023a0:	fbb4 f0f0 	udiv	r0, r4, r0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80023a4:	4c14      	ldr	r4, [pc, #80]	; (80023f8 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 80023a6:	6822      	ldr	r2, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 80023a8:	0392      	lsls	r2, r2, #14
 80023aa:	d40f      	bmi.n	80023cc <LL_PLL_ConfigSystemClock_HSE+0x60>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80023ac:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 80023ae:	2d01      	cmp	r5, #1
 80023b0:	bf0c      	ite	eq
 80023b2:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80023b6:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 80023ba:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80023bc:	6822      	ldr	r2, [r4, #0]
 80023be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023c2:	6022      	str	r2, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80023c4:	4c0c      	ldr	r4, [pc, #48]	; (80023f8 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 80023c6:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 80023c8:	0392      	lsls	r2, r2, #14
 80023ca:	d5fc      	bpl.n	80023c6 <LL_PLL_ConfigSystemClock_HSE+0x5a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80023cc:	4c0a      	ldr	r4, [pc, #40]	; (80023f8 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 80023ce:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <LL_PLL_ConfigSystemClock_HSE+0x90>)
 80023d0:	6865      	ldr	r5, [r4, #4]
 80023d2:	402a      	ands	r2, r5
 80023d4:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 80023d8:	4332      	orrs	r2, r6
 80023da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80023de:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80023e0:	6862      	ldr	r2, [r4, #4]
 80023e2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80023e6:	431a      	orrs	r2, r3
 80023e8:	6062      	str	r2, [r4, #4]
}
 80023ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80023ee:	f7ff bf6d 	b.w	80022cc <UTILS_EnablePLLAndSwitchSystem>
}
 80023f2:	2001      	movs	r0, #1
 80023f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	ffbf8000 	.word	0xffbf8000

08002400 <z_sys_device_do_config_level>:
#endif
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <z_sys_device_do_config_level+0x28>)
{
 8002402:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 8002404:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002408:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 800240a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 800240c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8002410:	42a5      	cmp	r5, r4
 8002412:	d800      	bhi.n	8002416 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
 8002414:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	4620      	mov	r0, r4
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4798      	blx	r3
		if (retval != 0) {
 800241e:	b100      	cbz	r0, 8002422 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
 8002420:	6066      	str	r6, [r4, #4]
								info++) {
 8002422:	340c      	adds	r4, #12
 8002424:	e7f4      	b.n	8002410 <z_sys_device_do_config_level+0x10>
 8002426:	bf00      	nop
 8002428:	08004418 	.word	0x08004418

0800242c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <z_impl_device_get_binding+0x44>)
{
 800242e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 8002430:	4c10      	ldr	r4, [pc, #64]	; (8002474 <z_impl_device_get_binding+0x48>)
{
 8002432:	4605      	mov	r5, r0
 8002434:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 8002436:	429c      	cmp	r4, r3
 8002438:	d104      	bne.n	8002444 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 800243a:	4c0e      	ldr	r4, [pc, #56]	; (8002474 <z_impl_device_get_binding+0x48>)
 800243c:	42b4      	cmp	r4, r6
 800243e:	d109      	bne.n	8002454 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 8002440:	2400      	movs	r4, #0
 8002442:	e012      	b.n	800246a <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 8002444:	6862      	ldr	r2, [r4, #4]
 8002446:	b11a      	cbz	r2, 8002450 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 8002448:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	42aa      	cmp	r2, r5
 800244e:	d00c      	beq.n	800246a <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8002450:	340c      	adds	r4, #12
 8002452:	e7f0      	b.n	8002436 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 8002454:	6863      	ldr	r3, [r4, #4]
 8002456:	b90b      	cbnz	r3, 800245c <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8002458:	340c      	adds	r4, #12
 800245a:	e7ef      	b.n	800243c <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	4628      	mov	r0, r5
 8002460:	6819      	ldr	r1, [r3, #0]
 8002462:	f000 ffbc 	bl	80033de <strcmp>
 8002466:	2800      	cmp	r0, #0
 8002468:	d1f6      	bne.n	8002458 <z_impl_device_get_binding+0x2c>
}
 800246a:	4620      	mov	r0, r4
 800246c:	bd70      	pop	{r4, r5, r6, pc}
 800246e:	bf00      	nop
 8002470:	20001dc4 	.word	0x20001dc4
 8002474:	20001cc8 	.word	0x20001cc8

08002478 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
 8002478:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800247a:	4807      	ldr	r0, [pc, #28]	; (8002498 <z_bss_zero+0x20>)
 800247c:	4a07      	ldr	r2, [pc, #28]	; (800249c <z_bss_zero+0x24>)
 800247e:	2100      	movs	r1, #0
 8002480:	1a12      	subs	r2, r2, r0
 8002482:	f000 ffe3 	bl	800344c <memset>
#ifdef DT_CCM_BASE_ADDRESS
	(void)memset(&__ccm_bss_start, 0,
 8002486:	4806      	ldr	r0, [pc, #24]	; (80024a0 <z_bss_zero+0x28>)
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <z_bss_zero+0x2c>)
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((u32_t) &__gcov_bss_end - (u32_t) &__gcov_bss_start));
#endif
}
 800248a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memset(&__ccm_bss_start, 0,
 800248e:	1a12      	subs	r2, r2, r0
 8002490:	2100      	movs	r1, #0
 8002492:	f000 bfdb 	b.w	800344c <memset>
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000
 800249c:	200002e4 	.word	0x200002e4
 80024a0:	10000000 	.word	0x10000000
 80024a4:	10000000 	.word	0x10000000

080024a8 <z_data_copy>:
 * @return N/A
 */
void z_data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 80024a8:	4809      	ldr	r0, [pc, #36]	; (80024d0 <z_data_copy+0x28>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <z_data_copy+0x2c>)
 80024ac:	490a      	ldr	r1, [pc, #40]	; (80024d8 <z_data_copy+0x30>)
{
 80024ae:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 80024b0:	1a12      	subs	r2, r2, r0
 80024b2:	f000 ffa0 	bl	80033f6 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <z_data_copy+0x34>)
 80024b8:	4909      	ldr	r1, [pc, #36]	; (80024e0 <z_data_copy+0x38>)
 80024ba:	480a      	ldr	r0, [pc, #40]	; (80024e4 <z_data_copy+0x3c>)
 80024bc:	f000 ff9b 	bl	80033f6 <memcpy>
		 (uintptr_t) &_ramfunc_ram_size);
#endif /* CONFIG_ARCH_HAS_RAMFUNC_SUPPORT */
#ifdef DT_CCM_BASE_ADDRESS
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		 __ccm_data_end - __ccm_data_start);
 80024c0:	4809      	ldr	r0, [pc, #36]	; (80024e8 <z_data_copy+0x40>)
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <z_data_copy+0x44>)
 80024c4:	490a      	ldr	r1, [pc, #40]	; (80024f0 <z_data_copy+0x48>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80024c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 80024ca:	1a12      	subs	r2, r2, r0
 80024cc:	f000 bf93 	b.w	80033f6 <memcpy>
 80024d0:	20001c28 	.word	0x20001c28
 80024d4:	20001dd8 	.word	0x20001dd8
 80024d8:	080045bc 	.word	0x080045bc
 80024dc:	00000000 	.word	0x00000000
 80024e0:	080045bc 	.word	0x080045bc
 80024e4:	20000000 	.word	0x20000000
 80024e8:	10000000 	.word	0x10000000
 80024ec:	10000000 	.word	0x10000000
 80024f0:	0800476c 	.word	0x0800476c

080024f4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80024f4:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <bg_thread_main+0x34>)
 80024f8:	2201      	movs	r2, #1

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80024fa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80024fc:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80024fe:	f7ff ff7f 	bl	8002400 <z_sys_device_do_config_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <bg_thread_main+0x38>)
 8002504:	490a      	ldr	r1, [pc, #40]	; (8002530 <bg_thread_main+0x3c>)
 8002506:	480b      	ldr	r0, [pc, #44]	; (8002534 <bg_thread_main+0x40>)
 8002508:	f000 fe1c 	bl	8003144 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 800250c:	2003      	movs	r0, #3
 800250e:	f7ff ff77 	bl	8002400 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8002512:	f000 fc1b 	bl	8002d4c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8002516:	f7fe f89b 	bl	8000650 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800251a:	4a07      	ldr	r2, [pc, #28]	; (8002538 <bg_thread_main+0x44>)
 800251c:	7b13      	ldrb	r3, [r2, #12]
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8002524:	bd08      	pop	{r3, pc}
 8002526:	bf00      	nop
 8002528:	200002e0 	.word	0x200002e0
 800252c:	080045b0 	.word	0x080045b0
 8002530:	08004581 	.word	0x08004581
 8002534:	08004588 	.word	0x08004588
 8002538:	2000022c 	.word	0x2000022c

0800253c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 800253c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
 8002540:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002640 <z_cstart+0x104>
 8002544:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002546:	f38a 8808 	msr	MSP, sl
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800254a:	4d35      	ldr	r5, [pc, #212]	; (8002620 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
 800254c:	4e35      	ldr	r6, [pc, #212]	; (8002624 <z_cstart+0xe8>)
 800254e:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8002550:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8002644 <z_cstart+0x108>
 8002554:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8002648 <z_cstart+0x10c>
	z_setup_new_thread(thread, stack,
 8002558:	4f33      	ldr	r7, [pc, #204]	; (8002628 <z_cstart+0xec>)
 800255a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	2400      	movs	r4, #0
 8002560:	616b      	str	r3, [r5, #20]
 8002562:	23f0      	movs	r3, #240	; 0xf0
 8002564:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8002568:	77ec      	strb	r4, [r5, #31]
 800256a:	762c      	strb	r4, [r5, #24]
 800256c:	766c      	strb	r4, [r5, #25]
 800256e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8002570:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002572:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002576:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002578:	f7fe ff4c 	bl	8001414 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800257c:	f7fe fe1c 	bl	80011b8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002584:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002586:	62eb      	str	r3, [r5, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
 8002588:	ab07      	add	r3, sp, #28
 800258a:	2274      	movs	r2, #116	; 0x74
 800258c:	4621      	mov	r1, r4
 800258e:	4618      	mov	r0, r3
 8002590:	f000 ff5c 	bl	800344c <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current_cpu->current = &dummy_thread;
 8002594:	4d25      	ldr	r5, [pc, #148]	; (800262c <z_cstart+0xf0>)
	struct k_thread dummy_thread = {
 8002596:	f04f 0801 	mov.w	r8, #1
	_current_cpu->current = &dummy_thread;
 800259a:	60a8      	str	r0, [r5, #8]
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800259c:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
 800259e:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80025a2:	f7ff ff2d 	bl	8002400 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80025a6:	4640      	mov	r0, r8
 80025a8:	f7ff ff2a 	bl	8002400 <z_sys_device_do_config_level>
	z_sched_init();
 80025ac:	f000 fac8 	bl	8002b40 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
 80025b2:	622e      	str	r6, [r5, #32]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 80025b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b8:	4649      	mov	r1, r9
 80025ba:	e9cd 8304 	strd	r8, r3, [sp, #16]
 80025be:	4630      	mov	r0, r6
 80025c0:	465b      	mov	r3, fp
 80025c2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80025c6:	e9cd 4400 	strd	r4, r4, [sp]
 80025ca:	f000 fb99 	bl	8002d00 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80025ce:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
 80025d0:	4630      	mov	r0, r6
 80025d2:	f023 0304 	bic.w	r3, r3, #4
 80025d6:	7373      	strb	r3, [r6, #13]
 80025d8:	f001 fb1f 	bl	8003c1a <z_ready_thread>
	z_setup_new_thread(thread, stack,
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <z_cstart+0xf8>)
 80025de:	4916      	ldr	r1, [pc, #88]	; (8002638 <z_cstart+0xfc>)
 80025e0:	e9cd 8304 	strd	r8, r3, [sp, #16]
 80025e4:	230f      	movs	r3, #15
 80025e6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80025ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <z_cstart+0x100>)
 80025f0:	4638      	mov	r0, r7
 80025f2:	e9cd 4400 	strd	r4, r4, [sp]
 80025f6:	f000 fb83 	bl	8002d00 <z_setup_new_thread>
 80025fa:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80025fc:	60ef      	str	r7, [r5, #12]
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8002604:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
 8002608:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
 800260c:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
 800260e:	f8c5 a004 	str.w	sl, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
 8002612:	465b      	mov	r3, fp
 8002614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002618:	4649      	mov	r1, r9
 800261a:	4630      	mov	r0, r6
 800261c:	f7fe fdb0 	bl	8001180 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002620:	e000ed00 	.word	0xe000ed00
 8002624:	2000022c 	.word	0x2000022c
 8002628:	200001b8 	.word	0x200001b8
 800262c:	200002a0 	.word	0x200002a0
 8002630:	080045b1 	.word	0x080045b1
 8002634:	080045b6 	.word	0x080045b6
 8002638:	200012e8 	.word	0x200012e8
 800263c:	08003de9 	.word	0x08003de9
 8002640:	20001c28 	.word	0x20001c28
 8002644:	080024f5 	.word	0x080024f5
 8002648:	200002e8 	.word	0x200002e8

0800264c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 800264c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 800264e:	4c08      	ldr	r4, [pc, #32]	; (8002670 <z_reset_time_slice+0x24>)
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	b15b      	cbz	r3, 800266c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8002654:	f7fe fcd0 	bl	8000ff8 <z_clock_elapsed>
 8002658:	4603      	mov	r3, r0
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	4a05      	ldr	r2, [pc, #20]	; (8002674 <z_reset_time_slice+0x28>)
 800265e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8002660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8002664:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8002666:	2100      	movs	r1, #0
 8002668:	f001 bba0 	b.w	8003dac <z_set_timeout_expiry>
}
 800266c:	bd10      	pop	{r4, pc}
 800266e:	bf00      	nop
 8002670:	200002d4 	.word	0x200002d4
 8002674:	200002a0 	.word	0x200002a0

08002678 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
 8002678:	b510      	push	{r4, lr}
 800267a:	f04f 0310 	mov.w	r3, #16
 800267e:	f3ef 8411 	mrs	r4, BASEPRI
 8002682:	f383 8811 	msr	BASEPRI, r3
 8002686:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <k_sched_time_slice_set+0x34>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((u32_t)t) * (to_hz / from_hz);
 8002690:	230a      	movs	r3, #10
 8002692:	4358      	muls	r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <k_sched_time_slice_set+0x38>)
 8002696:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <k_sched_time_slice_set+0x3c>)
 800269a:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 800269c:	f7ff ffd6 	bl	800264c <z_reset_time_slice>
	__asm__ volatile(
 80026a0:	f384 8811 	msr	BASEPRI, r4
 80026a4:	f3bf 8f6f 	isb	sy
	}
}
 80026a8:	bd10      	pop	{r4, pc}
 80026aa:	bf00      	nop
 80026ac:	200002a0 	.word	0x200002a0
 80026b0:	200002d4 	.word	0x200002d4
 80026b4:	200002d0 	.word	0x200002d0

080026b8 <k_sched_lock>:
	__asm__ volatile(
 80026b8:	f04f 0310 	mov.w	r3, #16
 80026bc:	f3ef 8111 	mrs	r1, BASEPRI
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <k_sched_lock+0x24>)
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	7bd3      	ldrb	r3, [r2, #15]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80026d2:	f381 8811 	msr	BASEPRI, r1
 80026d6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 80026da:	4770      	bx	lr
 80026dc:	200002a0 	.word	0x200002a0

080026e0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <z_priq_dumb_remove+0x28>)
 80026e2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80026e6:	4282      	cmp	r2, r0
 80026e8:	d105      	bne.n	80026f6 <z_priq_dumb_remove+0x16>
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	428b      	cmp	r3, r1
 80026ee:	d102      	bne.n	80026f6 <z_priq_dumb_remove+0x16>
 80026f0:	7b4b      	ldrb	r3, [r1, #13]
 80026f2:	06db      	lsls	r3, r3, #27
 80026f4:	d106      	bne.n	8002704 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 80026f6:	e9d1 3200 	ldrd	r3, r2, [r1]
 80026fa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80026fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80026fe:	2300      	movs	r3, #0
	node->prev = NULL;
 8002700:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	200002a0 	.word	0x200002a0

0800270c <update_cache>:
{
 800270c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 800270e:	4c10      	ldr	r4, [pc, #64]	; (8002750 <update_cache+0x44>)
{
 8002710:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 8002712:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002716:	f001 fa76 	bl	8003c06 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
 800271a:	68a3      	ldr	r3, [r4, #8]
 800271c:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 800271e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8002720:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
 8002722:	bf44      	itt	mi
 8002724:	f041 0108 	orrmi.w	r1, r1, #8
 8002728:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
 800272a:	b905      	cbnz	r5, 800272e <update_cache+0x22>
 800272c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 800272e:	b94e      	cbnz	r6, 8002744 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
 8002730:	7b5a      	ldrb	r2, [r3, #13]
 8002732:	06d2      	lsls	r2, r2, #27
 8002734:	d106      	bne.n	8002744 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8002736:	69aa      	ldr	r2, [r5, #24]
 8002738:	b922      	cbnz	r2, 8002744 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
 800273a:	89da      	ldrh	r2, [r3, #14]
 800273c:	2a7f      	cmp	r2, #127	; 0x7f
 800273e:	d901      	bls.n	8002744 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
 8002740:	6223      	str	r3, [r4, #32]
}
 8002742:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
 8002744:	42ab      	cmp	r3, r5
 8002746:	d001      	beq.n	800274c <update_cache+0x40>
			z_reset_time_slice();
 8002748:	f7ff ff80 	bl	800264c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800274c:	6225      	str	r5, [r4, #32]
}
 800274e:	e7f8      	b.n	8002742 <update_cache+0x36>
 8002750:	200002a0 	.word	0x200002a0

08002754 <k_sched_unlock>:
{
 8002754:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002756:	f04f 0310 	mov.w	r3, #16
 800275a:	f3ef 8411 	mrs	r4, BASEPRI
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <k_sched_unlock+0x34>)
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	7bd3      	ldrb	r3, [r2, #15]
 800276c:	3301      	adds	r3, #1
 800276e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff ffcb 	bl	800270c <update_cache>
	__asm__ volatile(
 8002776:	f384 8811 	msr	BASEPRI, r4
 800277a:	f3bf 8f6f 	isb	sy
}
 800277e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8002782:	f001 ba36 	b.w	8003bf2 <z_reschedule_unlocked>
 8002786:	bf00      	nop
 8002788:	200002a0 	.word	0x200002a0

0800278c <ready_thread>:
{
 800278c:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 800278e:	7b43      	ldrb	r3, [r0, #13]
 8002790:	06db      	lsls	r3, r3, #27
 8002792:	d12a      	bne.n	80027ea <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
 8002794:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
 8002796:	bb43      	cbnz	r3, 80027ea <ready_thread+0x5e>
	return list->head == list;
 8002798:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <ready_thread+0x64>)
 800279a:	4611      	mov	r1, r2
 800279c:	f851 4f24 	ldr.w	r4, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027a0:	428c      	cmp	r4, r1
 80027a2:	bf18      	it	ne
 80027a4:	4623      	movne	r3, r4
 80027a6:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80027a8:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80027aa:	bf38      	it	cc
 80027ac:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80027ae:	b1b3      	cbz	r3, 80027de <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
 80027b0:	f990 600e 	ldrsb.w	r6, [r0, #14]
 80027b4:	f993 500e 	ldrsb.w	r5, [r3, #14]
 80027b8:	42ae      	cmp	r6, r5
 80027ba:	db03      	blt.n	80027c4 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
 80027bc:	42a3      	cmp	r3, r4
 80027be:	d00e      	beq.n	80027de <ready_thread+0x52>
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	e7f4      	b.n	80027ae <ready_thread+0x22>
	node->prev = successor->prev;
 80027c4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80027c6:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 80027ca:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80027cc:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 80027ce:	7b43      	ldrb	r3, [r0, #13]
 80027d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027d4:	7343      	strb	r3, [r0, #13]
}
 80027d6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7ff bf97 	b.w	800270c <update_cache>
	node->prev = list->tail;
 80027de:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
 80027e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80027e4:	6018      	str	r0, [r3, #0]
	list->tail = node;
 80027e6:	6290      	str	r0, [r2, #40]	; 0x28
}
 80027e8:	e7f1      	b.n	80027ce <ready_thread+0x42>
}
 80027ea:	bc70      	pop	{r4, r5, r6}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	200002a0 	.word	0x200002a0

080027f4 <z_sched_start>:
{
 80027f4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80027f6:	f04f 0210 	mov.w	r2, #16
 80027fa:	f3ef 8411 	mrs	r4, BASEPRI
 80027fe:	f382 8811 	msr	BASEPRI, r2
 8002802:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
 8002806:	7b42      	ldrb	r2, [r0, #13]
 8002808:	0751      	lsls	r1, r2, #29
 800280a:	d404      	bmi.n	8002816 <z_sched_start+0x22>
	__asm__ volatile(
 800280c:	f384 8811 	msr	BASEPRI, r4
 8002810:	f3bf 8f6f 	isb	sy
}
 8002814:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800281c:	f7ff ffb6 	bl	800278c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002820:	4621      	mov	r1, r4
 8002822:	4802      	ldr	r0, [pc, #8]	; (800282c <z_sched_start+0x38>)
}
 8002824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002828:	f001 b9cc 	b.w	8003bc4 <z_reschedule>
 800282c:	200002e1 	.word	0x200002e1

08002830 <z_move_thread_to_end_of_prio_q>:
{
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	4601      	mov	r1, r0
	__asm__ volatile(
 8002834:	f04f 0310 	mov.w	r3, #16
 8002838:	f3ef 8411 	mrs	r4, BASEPRI
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8002844:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da02      	bge.n	8002852 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 800284c:	4819      	ldr	r0, [pc, #100]	; (80028b4 <z_move_thread_to_end_of_prio_q+0x84>)
 800284e:	f7ff ff47 	bl	80026e0 <z_priq_dumb_remove>
	return list->head == list;
 8002852:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <z_move_thread_to_end_of_prio_q+0x88>)
 8002854:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002856:	6a95      	ldr	r5, [r2, #40]	; 0x28
	return list->head == list;
 8002858:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800285c:	4283      	cmp	r3, r0
 800285e:	bf08      	it	eq
 8002860:	2300      	moveq	r3, #0
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf38      	it	cc
 8002866:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002868:	b1eb      	cbz	r3, 80028a6 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
 800286a:	f991 700e 	ldrsb.w	r7, [r1, #14]
 800286e:	f993 600e 	ldrsb.w	r6, [r3, #14]
 8002872:	42b7      	cmp	r7, r6
 8002874:	db03      	blt.n	800287e <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8002876:	429d      	cmp	r5, r3
 8002878:	d015      	beq.n	80028a6 <z_move_thread_to_end_of_prio_q+0x76>
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	e7f4      	b.n	8002868 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
 800287e:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 8002880:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
 8002884:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8002886:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
 8002888:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
 800288a:	6890      	ldr	r0, [r2, #8]
 800288c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002890:	734b      	strb	r3, [r1, #13]
 8002892:	1a43      	subs	r3, r0, r1
 8002894:	4258      	negs	r0, r3
 8002896:	4158      	adcs	r0, r3
 8002898:	f7ff ff38 	bl	800270c <update_cache>
	__asm__ volatile(
 800289c:	f384 8811 	msr	BASEPRI, r4
 80028a0:	f3bf 8f6f 	isb	sy
}
 80028a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
 80028a6:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
 80028aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80028ac:	6019      	str	r1, [r3, #0]
	list->tail = node;
 80028ae:	6291      	str	r1, [r2, #40]	; 0x28
}
 80028b0:	e7ea      	b.n	8002888 <z_move_thread_to_end_of_prio_q+0x58>
 80028b2:	bf00      	nop
 80028b4:	200002c4 	.word	0x200002c4
 80028b8:	200002a0 	.word	0x200002a0

080028bc <z_time_slice>:
{
 80028bc:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
 80028be:	4a15      	ldr	r2, [pc, #84]	; (8002914 <z_time_slice+0x58>)
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <z_time_slice+0x5c>)
 80028c2:	6814      	ldr	r4, [r2, #0]
{
 80028c4:	4601      	mov	r1, r0
	if (pending_current == _current) {
 80028c6:	6898      	ldr	r0, [r3, #8]
 80028c8:	42a0      	cmp	r0, r4
 80028ca:	461c      	mov	r4, r3
 80028cc:	d103      	bne.n	80028d6 <z_time_slice+0x1a>
}
 80028ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
 80028d2:	f7ff bebb 	b.w	800264c <z_reset_time_slice>
	pending_current = NULL;
 80028d6:	2500      	movs	r5, #0
 80028d8:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <z_time_slice+0x60>)
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	b1b2      	cbz	r2, 800290e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 80028e0:	89c2      	ldrh	r2, [r0, #14]
 80028e2:	2a7f      	cmp	r2, #127	; 0x7f
 80028e4:	d813      	bhi.n	800290e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80028e6:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <z_time_slice+0x64>)
 80028e8:	f990 500e 	ldrsb.w	r5, [r0, #14]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	4295      	cmp	r5, r2
 80028f0:	db0d      	blt.n	800290e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
 80028f2:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <z_time_slice+0x68>)
 80028f4:	4290      	cmp	r0, r2
 80028f6:	d00a      	beq.n	800290e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 80028f8:	6982      	ldr	r2, [r0, #24]
 80028fa:	b942      	cbnz	r2, 800290e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	428a      	cmp	r2, r1
 8002900:	dc02      	bgt.n	8002908 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 8002902:	f7ff ff95 	bl	8002830 <z_move_thread_to_end_of_prio_q>
 8002906:	e7e2      	b.n	80028ce <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
 8002908:	1a52      	subs	r2, r2, r1
 800290a:	611a      	str	r2, [r3, #16]
}
 800290c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	6123      	str	r3, [r4, #16]
 8002912:	e7fb      	b.n	800290c <z_time_slice+0x50>
 8002914:	200002cc 	.word	0x200002cc
 8002918:	200002a0 	.word	0x200002a0
 800291c:	200002d4 	.word	0x200002d4
 8002920:	200002d0 	.word	0x200002d0
 8002924:	200001b8 	.word	0x200001b8

08002928 <z_impl_k_thread_suspend>:
{
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800292c:	3018      	adds	r0, #24
 800292e:	f001 fa17 	bl	8003d60 <z_abort_timeout>
	__asm__ volatile(
 8002932:	f04f 0310 	mov.w	r3, #16
 8002936:	f3ef 8611 	mrs	r6, BASEPRI
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8002942:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da07      	bge.n	800295a <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 800294a:	480f      	ldr	r0, [pc, #60]	; (8002988 <z_impl_k_thread_suspend+0x60>)
 800294c:	4621      	mov	r1, r4
 800294e:	f7ff fec7 	bl	80026e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8002952:	7b63      	ldrb	r3, [r4, #13]
 8002954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002958:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800295a:	4d0c      	ldr	r5, [pc, #48]	; (800298c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800295c:	7b63      	ldrb	r3, [r4, #13]
 800295e:	68a8      	ldr	r0, [r5, #8]
 8002960:	f043 0310 	orr.w	r3, r3, #16
 8002964:	7363      	strb	r3, [r4, #13]
 8002966:	1b03      	subs	r3, r0, r4
 8002968:	4258      	negs	r0, r3
 800296a:	4158      	adcs	r0, r3
 800296c:	f7ff fece 	bl	800270c <update_cache>
	__asm__ volatile(
 8002970:	f386 8811 	msr	BASEPRI, r6
 8002974:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8002978:	68ab      	ldr	r3, [r5, #8]
 800297a:	42a3      	cmp	r3, r4
 800297c:	d103      	bne.n	8002986 <z_impl_k_thread_suspend+0x5e>
}
 800297e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8002982:	f001 b936 	b.w	8003bf2 <z_reschedule_unlocked>
}
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	200002c4 	.word	0x200002c4
 800298c:	200002a0 	.word	0x200002a0

08002990 <z_thread_single_abort>:
{
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (thread->fn_abort != NULL) {
 8002992:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
 8002994:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8002996:	b103      	cbz	r3, 800299a <z_thread_single_abort+0xa>
		thread->fn_abort();
 8002998:	4798      	blx	r3
 800299a:	f104 0018 	add.w	r0, r4, #24
 800299e:	f001 f9df 	bl	8003d60 <z_abort_timeout>
	__asm__ volatile(
 80029a2:	f04f 0310 	mov.w	r3, #16
 80029a6:	f3ef 8511 	mrs	r5, BASEPRI
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80029b2:	7b63      	ldrb	r3, [r4, #13]
 80029b4:	06d8      	lsls	r0, r3, #27
 80029b6:	d122      	bne.n	80029fe <z_thread_single_abort+0x6e>
		if (z_is_thread_ready(thread)) {
 80029b8:	69a2      	ldr	r2, [r4, #24]
 80029ba:	bb02      	cbnz	r2, 80029fe <z_thread_single_abort+0x6e>
			if (z_is_thread_queued(thread)) {
 80029bc:	0619      	lsls	r1, r3, #24
 80029be:	d507      	bpl.n	80029d0 <z_thread_single_abort+0x40>
				_priq_run_remove(&_kernel.ready_q.runq,
 80029c0:	481c      	ldr	r0, [pc, #112]	; (8002a34 <z_thread_single_abort+0xa4>)
 80029c2:	4621      	mov	r1, r4
 80029c4:	f7ff fe8c 	bl	80026e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80029c8:	7b63      	ldrb	r3, [r4, #13]
 80029ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ce:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <z_thread_single_abort+0xa8>)
 80029d2:	6898      	ldr	r0, [r3, #8]
 80029d4:	1b02      	subs	r2, r0, r4
 80029d6:	4250      	negs	r0, r2
 80029d8:	4150      	adcs	r0, r2
 80029da:	f7ff fe97 	bl	800270c <update_cache>
		thread->base.thread_state |= mask;
 80029de:	7b63      	ldrb	r3, [r4, #13]
 80029e0:	f043 0308 	orr.w	r3, r3, #8
 80029e4:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80029e6:	f104 0728 	add.w	r7, r4, #40	; 0x28
			waiter->base.pended_on = NULL;
 80029ea:	2600      	movs	r6, #0
	return list->head == list;
 80029ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80029ee:	42b9      	cmp	r1, r7
 80029f0:	d000      	beq.n	80029f4 <z_thread_single_abort+0x64>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 80029f2:	b989      	cbnz	r1, 8002a18 <z_thread_single_abort+0x88>
	__asm__ volatile(
 80029f4:	f385 8811 	msr	BASEPRI, r5
 80029f8:	f3bf 8f6f 	isb	sy
}
 80029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (z_is_thread_pending(thread)) {
 80029fe:	079b      	lsls	r3, r3, #30
 8002a00:	d5ed      	bpl.n	80029de <z_thread_single_abort+0x4e>
				_priq_wait_remove(&pended_on(thread)->waitq,
 8002a02:	68a0      	ldr	r0, [r4, #8]
 8002a04:	4621      	mov	r1, r4
 8002a06:	f7ff fe6b 	bl	80026e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8002a0a:	7b63      	ldrb	r3, [r4, #13]
 8002a0c:	f023 0302 	bic.w	r3, r3, #2
 8002a10:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60a3      	str	r3, [r4, #8]
 8002a16:	e7e2      	b.n	80029de <z_thread_single_abort+0x4e>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 8002a18:	6888      	ldr	r0, [r1, #8]
 8002a1a:	f7ff fe61 	bl	80026e0 <z_priq_dumb_remove>
 8002a1e:	7b4b      	ldrb	r3, [r1, #13]
			waiter->base.pended_on = NULL;
 8002a20:	608e      	str	r6, [r1, #8]
 8002a22:	f023 0302 	bic.w	r3, r3, #2
 8002a26:	734b      	strb	r3, [r1, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8002a28:	670e      	str	r6, [r1, #112]	; 0x70
			ready_thread(waiter);
 8002a2a:	4608      	mov	r0, r1
 8002a2c:	f7ff feae 	bl	800278c <ready_thread>
 8002a30:	e7dc      	b.n	80029ec <z_thread_single_abort+0x5c>
 8002a32:	bf00      	nop
 8002a34:	200002c4 	.word	0x200002c4
 8002a38:	200002a0 	.word	0x200002a0

08002a3c <unready_thread>:
{
 8002a3c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8002a3e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8002a42:	2b00      	cmp	r3, #0
{
 8002a44:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002a46:	da06      	bge.n	8002a56 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8002a48:	4807      	ldr	r0, [pc, #28]	; (8002a68 <unready_thread+0x2c>)
 8002a4a:	f7ff fe49 	bl	80026e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8002a4e:	7b4b      	ldrb	r3, [r1, #13]
 8002a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a54:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <unready_thread+0x30>)
 8002a58:	6898      	ldr	r0, [r3, #8]
 8002a5a:	1a43      	subs	r3, r0, r1
 8002a5c:	4258      	negs	r0, r3
 8002a5e:	4158      	adcs	r0, r3
}
 8002a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8002a64:	f7ff be52 	b.w	800270c <update_cache>
 8002a68:	200002c4 	.word	0x200002c4
 8002a6c:	200002a0 	.word	0x200002a0

08002a70 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
 8002a74:	f001 f9b4 	bl	8003de0 <z_tick_get_32>
 8002a78:	182c      	adds	r4, r5, r0
	__asm__ volatile(
 8002a7a:	f04f 0310 	mov.w	r3, #16
 8002a7e:	f3ef 8711 	mrs	r7, BASEPRI
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8002a8a:	4e0d      	ldr	r6, [pc, #52]	; (8002ac0 <z_tick_sleep.part.0+0x50>)
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <z_tick_sleep.part.0+0x54>)
 8002a8e:	68b0      	ldr	r0, [r6, #8]
 8002a90:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 8002a92:	f001 f8fd 	bl	8003c90 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
 8002a96:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8002a98:	490b      	ldr	r1, [pc, #44]	; (8002ac8 <z_tick_sleep.part.0+0x58>)
 8002a9a:	462a      	mov	r2, r5
 8002a9c:	17eb      	asrs	r3, r5, #31
 8002a9e:	3018      	adds	r0, #24
 8002aa0:	f000 f9d8 	bl	8002e54 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8002aa4:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002aa6:	7b53      	ldrb	r3, [r2, #13]
 8002aa8:	f043 0310 	orr.w	r3, r3, #16
 8002aac:	7353      	strb	r3, [r2, #13]
 8002aae:	4638      	mov	r0, r7
 8002ab0:	f7fe fad6 	bl	8001060 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8002ab4:	f001 f994 	bl	8003de0 <z_tick_get_32>
 8002ab8:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8002aba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac0:	200002a0 	.word	0x200002a0
 8002ac4:	200002cc 	.word	0x200002cc
 8002ac8:	08003c3b 	.word	0x08003c3b

08002acc <pend>:
{
 8002acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad0:	4606      	mov	r6, r0
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	f04f 0310 	mov.w	r3, #16
 8002ada:	f3ef 8711 	mrs	r7, BASEPRI
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8002ae6:	f001 f8e3 	bl	8003cb0 <add_to_waitq_locked>
	__asm__ volatile(
 8002aea:	f387 8811 	msr	BASEPRI, r7
 8002aee:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002af2:	1c6b      	adds	r3, r5, #1
 8002af4:	bf08      	it	eq
 8002af6:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
 8002afa:	d008      	beq.n	8002b0e <pend+0x42>
 8002afc:	4622      	mov	r2, r4
 8002afe:	462b      	mov	r3, r5
 8002b00:	f106 0018 	add.w	r0, r6, #24
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <pend+0x48>)
}
 8002b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b0a:	f000 b9a3 	b.w	8002e54 <z_add_timeout>
 8002b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b12:	bf00      	nop
 8002b14:	08003c3b 	.word	0x08003c3b

08002b18 <z_pend_curr>:
{
 8002b18:	b510      	push	{r4, lr}
	pending_current = _current;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <z_pend_curr+0x20>)
 8002b1c:	6898      	ldr	r0, [r3, #8]
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <z_pend_curr+0x24>)
{
 8002b20:	460c      	mov	r4, r1
	pending_current = _current;
 8002b22:	6018      	str	r0, [r3, #0]
{
 8002b24:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8002b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b2a:	f7ff ffcf 	bl	8002acc <pend>
 8002b2e:	4620      	mov	r0, r4
}
 8002b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b34:	f7fe ba94 	b.w	8001060 <arch_swap>
 8002b38:	200002a0 	.word	0x200002a0
 8002b3c:	200002cc 	.word	0x200002cc

08002b40 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8002b42:	2100      	movs	r1, #0
 8002b44:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8002b48:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	f7ff bd93 	b.w	8002678 <k_sched_time_slice_set>
 8002b52:	bf00      	nop
 8002b54:	200002a0 	.word	0x200002a0

08002b58 <z_impl_k_yield>:
{
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 8002b5a:	4c24      	ldr	r4, [pc, #144]	; (8002bec <z_impl_k_yield+0x94>)
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <z_impl_k_yield+0x98>)
 8002b5e:	68a2      	ldr	r2, [r4, #8]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d030      	beq.n	8002bc6 <z_impl_k_yield+0x6e>
	__asm__ volatile(
 8002b64:	f04f 0310 	mov.w	r3, #16
 8002b68:	f3ef 8511 	mrs	r5, BASEPRI
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 8002b74:	68a1      	ldr	r1, [r4, #8]
 8002b76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b7a:	f7ff fdb1 	bl	80026e0 <z_priq_dumb_remove>
	return list->head == list;
 8002b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8002b80:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002b82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002b84:	4283      	cmp	r3, r0
 8002b86:	bf08      	it	eq
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf38      	it	cc
 8002b8e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002b90:	b32b      	cbz	r3, 8002bde <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
 8002b92:	f992 700e 	ldrsb.w	r7, [r2, #14]
 8002b96:	f993 600e 	ldrsb.w	r6, [r3, #14]
 8002b9a:	42b7      	cmp	r7, r6
 8002b9c:	db03      	blt.n	8002ba6 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8002b9e:	428b      	cmp	r3, r1
 8002ba0:	d01d      	beq.n	8002bde <z_impl_k_yield+0x86>
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	e7f4      	b.n	8002b90 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
 8002ba6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8002ba8:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 8002bac:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 8002bae:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
 8002bb0:	7b53      	ldrb	r3, [r2, #13]
 8002bb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bb6:	7353      	strb	r3, [r2, #13]
			update_cache(1);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7ff fda7 	bl	800270c <update_cache>
	__asm__ volatile(
 8002bbe:	f385 8811 	msr	BASEPRI, r5
 8002bc2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8002bc6:	f04f 0310 	mov.w	r3, #16
 8002bca:	f3ef 8011 	mrs	r0, BASEPRI
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
}
 8002bd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002bda:	f7fe ba41 	b.w	8001060 <arch_swap>
	node->prev = list->tail;
 8002bde:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
 8002be2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002be4:	601a      	str	r2, [r3, #0]
	list->tail = node;
 8002be6:	62a2      	str	r2, [r4, #40]	; 0x28
}
 8002be8:	e7e2      	b.n	8002bb0 <z_impl_k_yield+0x58>
 8002bea:	bf00      	nop
 8002bec:	200002a0 	.word	0x200002a0
 8002bf0:	200001b8 	.word	0x200001b8

08002bf4 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
 8002bf4:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	bf08      	it	eq
 8002bfa:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8002bfe:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002c00:	d106      	bne.n	8002c10 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <z_impl_k_sleep+0x3c>)
 8002c04:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8002c06:	f7ff fe8f 	bl	8002928 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
 8002c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
 8002c0e:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
 8002c10:	4604      	mov	r4, r0
	if (ticks == 0) {
 8002c12:	b940      	cbnz	r0, 8002c26 <z_impl_k_sleep+0x32>
	z_impl_k_yield();
 8002c14:	f7ff ffa0 	bl	8002b58 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 8002c18:	220a      	movs	r2, #10
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	17e1      	asrs	r1, r4, #31
 8002c20:	f7fd fab2 	bl	8000188 <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(ticks);
 8002c24:	e7f3      	b.n	8002c0e <z_impl_k_sleep+0x1a>
 8002c26:	f7ff ff23 	bl	8002a70 <z_tick_sleep.part.0>
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	e7f4      	b.n	8002c18 <z_impl_k_sleep+0x24>
 8002c2e:	bf00      	nop
 8002c30:	200002a0 	.word	0x200002a0

08002c34 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002c34:	4b01      	ldr	r3, [pc, #4]	; (8002c3c <z_impl_k_current_get+0x8>)
 8002c36:	6898      	ldr	r0, [r3, #8]
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	200002a0 	.word	0x200002a0

08002c40 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8002c40:	b538      	push	{r3, r4, r5, lr}
 8002c42:	4604      	mov	r4, r0
 8002c44:	f04f 0310 	mov.w	r3, #16
 8002c48:	f3ef 8511 	mrs	r5, BASEPRI
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
 8002c54:	f001 f857 	bl	8003d06 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
 8002c58:	b148      	cbz	r0, 8002c6e <z_impl_k_sem_give+0x2e>
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8002c5e:	f000 ffdc 	bl	8003c1a <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
 8002c62:	4629      	mov	r1, r5
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <z_impl_k_sem_give+0x3c>)
}
 8002c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8002c6a:	f000 bfab 	b.w	8003bc4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8002c6e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	bf18      	it	ne
 8002c76:	3301      	addne	r3, #1
 8002c78:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
 8002c7a:	e7f2      	b.n	8002c62 <z_impl_k_sem_give+0x22>
 8002c7c:	200002e1 	.word	0x200002e1

08002c80 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8002c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c82:	4614      	mov	r4, r2
 8002c84:	461d      	mov	r5, r3
 8002c86:	f04f 0310 	mov.w	r3, #16
 8002c8a:	f3ef 8111 	mrs	r1, BASEPRI
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
 8002c96:	6883      	ldr	r3, [r0, #8]
 8002c98:	b143      	cbz	r3, 8002cac <z_impl_k_sem_take+0x2c>
		sem->count--;
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 8002c9e:	f381 8811 	msr	BASEPRI, r1
 8002ca2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8002ca6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
 8002ca8:	b003      	add	sp, #12
 8002caa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8002cac:	ea54 0305 	orrs.w	r3, r4, r5
 8002cb0:	d106      	bne.n	8002cc0 <z_impl_k_sem_take+0x40>
 8002cb2:	f381 8811 	msr	BASEPRI, r1
 8002cb6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8002cba:	f06f 000f 	mvn.w	r0, #15
 8002cbe:	e7f3      	b.n	8002ca8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	e9cd 4500 	strd	r4, r5, [sp]
 8002cc6:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <z_impl_k_sem_take+0x50>)
 8002cc8:	f7ff ff26 	bl	8002b18 <z_pend_curr>
	return ret;
 8002ccc:	e7ec      	b.n	8002ca8 <z_impl_k_sem_take+0x28>
 8002cce:	bf00      	nop
 8002cd0:	200002e1 	.word	0x200002e1

08002cd4 <z_impl_k_busy_wait>:
{
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
		(u64_t)sys_clock_hw_cycles_per_sec() /
 8002cd4:	4908      	ldr	r1, [pc, #32]	; (8002cf8 <z_impl_k_busy_wait+0x24>)
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <z_impl_k_busy_wait+0x28>)
{
 8002cd8:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec() /
 8002cda:	fba0 0101 	umull	r0, r1, r0, r1
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f7fd fa52 	bl	8000188 <__aeabi_uldivmod>
 8002ce4:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
 8002ce6:	f7fe f9a5 	bl	8001034 <z_timer_cycle_get_32>
 8002cea:	4605      	mov	r5, r0
 8002cec:	f7fe f9a2 	bl	8001034 <z_timer_cycle_get_32>

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8002cf0:	1b43      	subs	r3, r0, r5
 8002cf2:	42a3      	cmp	r3, r4
 8002cf4:	d3fa      	bcc.n	8002cec <z_impl_k_busy_wait+0x18>
		}
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	0a037a00 	.word	0x0a037a00
 8002cfc:	000f4240 	.word	0x000f4240

08002d00 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	b087      	sub	sp, #28
 8002d04:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
 8002d08:	f100 0528 	add.w	r5, r0, #40	; 0x28
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002d0c:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
 8002d10:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002d12:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002d14:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
 8002d16:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
 8002d1a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002d1c:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (u8_t)initial_state;
 8002d1e:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002d20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (u8_t)initial_state;
 8002d22:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
 8002d24:	2500      	movs	r5, #0
	node->prev = NULL;
 8002d26:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (u8_t)options;
 8002d2a:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
 8002d2c:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002d2e:	9600      	str	r6, [sp, #0]
{
 8002d30:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002d32:	f7fe fa0b 	bl	800114c <arch_new_thread>
	if (!_current) {
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <z_setup_new_thread+0x48>)
 8002d38:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
 8002d3a:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
 8002d3e:	b103      	cbz	r3, 8002d42 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
 8002d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d42:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8002d44:	b007      	add	sp, #28
 8002d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d48:	200002a0 	.word	0x200002a0

08002d4c <z_init_static_threads>:
{
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8002d4e:	4f21      	ldr	r7, [pc, #132]	; (8002dd4 <z_init_static_threads+0x88>)
 8002d50:	4d21      	ldr	r5, [pc, #132]	; (8002dd8 <z_init_static_threads+0x8c>)
{
 8002d52:	b087      	sub	sp, #28
 8002d54:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 8002d56:	42bd      	cmp	r5, r7
 8002d58:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8002d5c:	d30b      	bcc.n	8002d76 <z_init_static_threads+0x2a>
	k_sched_lock();
 8002d5e:	f7ff fcab 	bl	80026b8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002d62:	4c1d      	ldr	r4, [pc, #116]	; (8002dd8 <z_init_static_threads+0x8c>)
 8002d64:	4f1d      	ldr	r7, [pc, #116]	; (8002ddc <z_init_static_threads+0x90>)
			return ((u32_t)t) * (to_hz / from_hz);
 8002d66:	250a      	movs	r5, #10
 8002d68:	42b4      	cmp	r4, r6
 8002d6a:	d321      	bcc.n	8002db0 <z_init_static_threads+0x64>
}
 8002d6c:	b007      	add	sp, #28
 8002d6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8002d72:	f7ff bcef 	b.w	8002754 <k_sched_unlock>
		z_setup_new_thread(
 8002d76:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002d7a:	9305      	str	r3, [sp, #20]
 8002d7c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002d80:	9304      	str	r3, [sp, #16]
 8002d82:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002d86:	9303      	str	r3, [sp, #12]
 8002d88:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002d8c:	9302      	str	r3, [sp, #8]
 8002d8e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8002d9e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8002da2:	f7ff ffad 	bl	8002d00 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002da6:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8002daa:	655d      	str	r5, [r3, #84]	; 0x54
 8002dac:	4625      	mov	r5, r4
 8002dae:	e7d2      	b.n	8002d56 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002db0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002db2:	1c53      	adds	r3, r2, #1
 8002db4:	d006      	beq.n	8002dc4 <z_init_static_threads+0x78>
					    K_MSEC(thread_data->init_delay));
 8002db6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002dba:	436a      	muls	r2, r5
			schedule_new_thread(thread_data->init_thread,
 8002dbc:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002dbe:	d103      	bne.n	8002dc8 <z_init_static_threads+0x7c>
	z_sched_start(thread);
 8002dc0:	f7ff fd18 	bl	80027f4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002dc4:	3430      	adds	r4, #48	; 0x30
 8002dc6:	e7cf      	b.n	8002d68 <z_init_static_threads+0x1c>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	4639      	mov	r1, r7
 8002dcc:	3018      	adds	r0, #24
 8002dce:	f000 f841 	bl	8002e54 <z_add_timeout>
 8002dd2:	e7f7      	b.n	8002dc4 <z_init_static_threads+0x78>
 8002dd4:	20001dc4 	.word	0x20001dc4
 8002dd8:	20001dc4 	.word	0x20001dc4
 8002ddc:	08003c3b 	.word	0x08003c3b

08002de0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <elapsed+0x10>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b90b      	cbnz	r3, 8002dea <elapsed+0xa>
 8002de6:	f7fe b907 	b.w	8000ff8 <z_clock_elapsed>
}
 8002dea:	2000      	movs	r0, #0
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	200002d8 	.word	0x200002d8

08002df4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	b140      	cbz	r0, 8002e0a <remove_timeout+0x16>
 8002df8:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 8002dfa:	6852      	ldr	r2, [r2, #4]
 8002dfc:	4290      	cmp	r0, r2
 8002dfe:	d004      	beq.n	8002e0a <remove_timeout+0x16>
	if (next(t) != NULL) {
 8002e00:	b11b      	cbz	r3, 8002e0a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	6881      	ldr	r1, [r0, #8]
 8002e06:	440a      	add	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 8002e0a:	6842      	ldr	r2, [r0, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8002e0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002e10:	2300      	movs	r3, #0
	node->prev = NULL;
 8002e12:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002e16:	4770      	bx	lr
 8002e18:	20001cbc 	.word	0x20001cbc

08002e1c <next_timeout>:
	return list->head == list;
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
 8002e1e:	b510      	push	{r4, lr}
 8002e20:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002e22:	429c      	cmp	r4, r3
 8002e24:	bf08      	it	eq
 8002e26:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
 8002e28:	f7ff ffda 	bl	8002de0 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8002e2c:	b154      	cbz	r4, 8002e44 <next_timeout+0x28>
 8002e2e:	68a3      	ldr	r3, [r4, #8]
 8002e30:	1a18      	subs	r0, r3, r0
 8002e32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <next_timeout+0x34>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	b113      	cbz	r3, 8002e42 <next_timeout+0x26>
 8002e3c:	4298      	cmp	r0, r3
 8002e3e:	bfa8      	it	ge
 8002e40:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8002e42:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8002e44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002e48:	e7f5      	b.n	8002e36 <next_timeout+0x1a>
 8002e4a:	bf00      	nop
 8002e4c:	20001cbc 	.word	0x20001cbc
 8002e50:	200002a0 	.word	0x200002a0

08002e54 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 8002e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e58:	9101      	str	r1, [sp, #4]
 8002e5a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002e5c:	1c4b      	adds	r3, r1, #1
 8002e5e:	bf08      	it	eq
 8002e60:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8002e64:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002e66:	d061      	beq.n	8002f2c <z_add_timeout+0xd8>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
 8002e68:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8002e6a:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
 8002e6e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8002e72:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002e76:	ebb3 0804 	subs.w	r8, r3, r4
 8002e7a:	eb6b 0905 	sbc.w	r9, fp, r5
 8002e7e:	f1b8 0f00 	cmp.w	r8, #0
 8002e82:	f179 0300 	sbcs.w	r3, r9, #0
 8002e86:	db0f      	blt.n	8002ea8 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 8002e88:	f7ff ffaa 	bl	8002de0 <elapsed>
 8002e8c:	4a2c      	ldr	r2, [pc, #176]	; (8002f40 <z_add_timeout+0xec>)
 8002e8e:	e9d2 1c00 	ldrd	r1, ip, [r2]
 8002e92:	f06f 0301 	mvn.w	r3, #1
 8002e96:	1a5b      	subs	r3, r3, r1
 8002e98:	eb6b 020c 	sbc.w	r2, fp, ip
 8002e9c:	1b1e      	subs	r6, r3, r4
 8002e9e:	eb62 0705 	sbc.w	r7, r2, r5
 8002ea2:	1a34      	subs	r4, r6, r0
 8002ea4:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002ea8:	9b01      	ldr	r3, [sp, #4]
 8002eaa:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
 8002eae:	f04f 0310 	mov.w	r3, #16
 8002eb2:	f3ef 8611 	mrs	r6, BASEPRI
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8002ebe:	f7ff ff8f 	bl	8002de0 <elapsed>
	ticks = MAX(1, ticks);
 8002ec2:	2c01      	cmp	r4, #1
 8002ec4:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <z_add_timeout+0xf0>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	bfb8      	it	lt
 8002ece:	2401      	movlt	r4, #1
		to->dticks = ticks + elapsed();
 8002ed0:	4404      	add	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	f8ca 4008 	str.w	r4, [sl, #8]
 8002ed8:	d001      	beq.n	8002ede <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002eda:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8002edc:	b952      	cbnz	r2, 8002ef4 <z_add_timeout+0xa0>
	node->prev = list->tail;
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
 8002ee4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8002ee6:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
 8002eea:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
 8002eee:	f8c3 a004 	str.w	sl, [r3, #4]
}
 8002ef2:	e00d      	b.n	8002f10 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 8002ef4:	6890      	ldr	r0, [r2, #8]
 8002ef6:	f8da 1008 	ldr.w	r1, [sl, #8]
 8002efa:	4288      	cmp	r0, r1
 8002efc:	dd19      	ble.n	8002f32 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
 8002efe:	1a41      	subs	r1, r0, r1
 8002f00:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 8002f02:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8002f04:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
 8002f08:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
 8002f0c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
 8002f10:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d006      	beq.n	8002f24 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8002f16:	4592      	cmp	sl, r2
 8002f18:	d104      	bne.n	8002f24 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
 8002f1a:	f7ff ff7f 	bl	8002e1c <next_timeout>
 8002f1e:	2100      	movs	r1, #0
 8002f20:	f7fe f806 	bl	8000f30 <z_clock_set_timeout>
	__asm__ volatile(
 8002f24:	f386 8811 	msr	BASEPRI, r6
 8002f28:	f3bf 8f6f 	isb	sy
		}
	}
}
 8002f2c:	b003      	add	sp, #12
 8002f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
 8002f32:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 8002f34:	4294      	cmp	r4, r2
 8002f36:	f8ca 1008 	str.w	r1, [sl, #8]
 8002f3a:	d0d0      	beq.n	8002ede <z_add_timeout+0x8a>
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	e7cd      	b.n	8002edc <z_add_timeout+0x88>
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20001cbc 	.word	0x20001cbc

08002f48 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 8002f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f4c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8002f4e:	f7ff fcb5 	bl	80028bc <z_time_slice>
	__asm__ volatile(
 8002f52:	f04f 0310 	mov.w	r3, #16
 8002f56:	f3ef 8411 	mrs	r4, BASEPRI
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8002f62:	4d20      	ldr	r5, [pc, #128]	; (8002fe4 <z_clock_announce+0x9c>)
 8002f64:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002fe8 <z_clock_announce+0xa0>
	return list->head == list;
 8002f68:	f8df a080 	ldr.w	sl, [pc, #128]	; 8002fec <z_clock_announce+0xa4>
 8002f6c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8002f6e:	46c1      	mov	r9, r8
 8002f70:	f8da 0000 	ldr.w	r0, [sl]
 8002f74:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002f76:	4550      	cmp	r0, sl
 8002f78:	e9d8 6700 	ldrd	r6, r7, [r8]
 8002f7c:	d005      	beq.n	8002f8a <z_clock_announce+0x42>
 8002f7e:	b120      	cbz	r0, 8002f8a <z_clock_announce+0x42>
 8002f80:	6883      	ldr	r3, [r0, #8]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	dd13      	ble.n	8002fae <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
 8002f8a:	18b6      	adds	r6, r6, r2
 8002f8c:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
 8002f90:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
 8002f94:	2600      	movs	r6, #0
 8002f96:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
 8002f98:	f7ff ff40 	bl	8002e1c <next_timeout>
 8002f9c:	4631      	mov	r1, r6
 8002f9e:	f7fd ffc7 	bl	8000f30 <z_clock_set_timeout>
	__asm__ volatile(
 8002fa2:	f384 8811 	msr	BASEPRI, r4
 8002fa6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8002faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
 8002fae:	18f6      	adds	r6, r6, r3
 8002fb0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
 8002fbc:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
 8002fc0:	f7ff ff18 	bl	8002df4 <remove_timeout>
 8002fc4:	f384 8811 	msr	BASEPRI, r4
 8002fc8:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002fcc:	68c3      	ldr	r3, [r0, #12]
 8002fce:	4798      	blx	r3
	__asm__ volatile(
 8002fd0:	f04f 0310 	mov.w	r3, #16
 8002fd4:	f3ef 8411 	mrs	r4, BASEPRI
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8002fe0:	e7c6      	b.n	8002f70 <z_clock_announce+0x28>
 8002fe2:	bf00      	nop
 8002fe4:	200002d8 	.word	0x200002d8
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	20001cbc 	.word	0x20001cbc

08002ff0 <z_tick_get>:

s64_t z_tick_get(void)
{
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	f04f 0310 	mov.w	r3, #16
 8002ff6:	f3ef 8411 	mrs	r4, BASEPRI
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 8003002:	f7fd fff9 	bl	8000ff8 <z_clock_elapsed>
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <z_tick_get+0x30>)
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	1812      	adds	r2, r2, r0
 800300e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 8003012:	f384 8811 	msr	BASEPRI, r4
 8003016:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	bd10      	pop	{r4, pc}
 8003020:	20000000 	.word	0x20000000

08003024 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
 8003024:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8003026:	4c06      	ldr	r4, [pc, #24]	; (8003040 <statics_init+0x1c>)
 8003028:	4d06      	ldr	r5, [pc, #24]	; (8003044 <statics_init+0x20>)
 800302a:	42ac      	cmp	r4, r5
 800302c:	d301      	bcc.n	8003032 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 800302e:	2000      	movs	r0, #0
 8003030:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8003032:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8003036:	4620      	mov	r0, r4
 8003038:	f000 feea 	bl	8003e10 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 800303c:	3414      	adds	r4, #20
 800303e:	e7f4      	b.n	800302a <statics_init+0x6>
 8003040:	20001dc4 	.word	0x20001dc4
 8003044:	20001dc4 	.word	0x20001dc4

08003048 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(struct device *port, gpio_pin_t pin,
 8003048:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
 800304a:	6885      	ldr	r5, [r0, #8]
static inline int gpio_pin_configure(struct device *port, gpio_pin_t pin,
 800304c:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
 800304e:	6843      	ldr	r3, [r0, #4]
 8003050:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4798      	blx	r3
	if (ret != 0) {
 8003058:	b930      	cbnz	r0, 8003068 <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800305a:	2301      	movs	r3, #1
 800305c:	fa03 f104 	lsl.w	r1, r3, r4
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	ea23 0301 	bic.w	r3, r3, r1
 8003066:	602b      	str	r3, [r5, #0]
}
 8003068:	bd38      	pop	{r3, r4, r5, pc}

0800306a <write_register>:
	status = spi_send(W_REGISTER | (REGISTER_MASK & reg));
 800306a:	f000 001f 	and.w	r0, r0, #31
uint8_t write_register(uint8_t reg, uint8_t val){
 800306e:	b538      	push	{r3, r4, r5, lr}
	status = spi_send(W_REGISTER | (REGISTER_MASK & reg));
 8003070:	f040 0020 	orr.w	r0, r0, #32
uint8_t write_register(uint8_t reg, uint8_t val){
 8003074:	460d      	mov	r5, r1
	status = spi_send(W_REGISTER | (REGISTER_MASK & reg));
 8003076:	f7fd fa5b 	bl	8000530 <spi_send>
 800307a:	4604      	mov	r4, r0
	spi_send(val);
 800307c:	4628      	mov	r0, r5
 800307e:	f7fd fa57 	bl	8000530 <spi_send>
}
 8003082:	4620      	mov	r0, r4
 8003084:	bd38      	pop	{r3, r4, r5, pc}

08003086 <read_register>:
uint8_t read_register(uint8_t reg){
 8003086:	b508      	push	{r3, lr}
	spi_send(R_REGISTER | (REGISTER_MASK & reg));
 8003088:	f000 001f 	and.w	r0, r0, #31
 800308c:	f7fd fa50 	bl	8000530 <spi_send>
}
 8003090:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	status = spi_send(0xFF);
 8003094:	20ff      	movs	r0, #255	; 0xff
 8003096:	f7fd ba4b 	b.w	8000530 <spi_send>

0800309a <set_data_rate>:
bool set_data_rate(rf24_datarate_e speed){
 800309a:	b538      	push	{r3, r4, r5, lr}
 800309c:	4605      	mov	r5, r0
    uint8_t setup = read_register(RF_SETUP);
 800309e:	2006      	movs	r0, #6
 80030a0:	f7ff fff1 	bl	8003086 <read_register>
    if (speed == RF24_250KBPS) {
 80030a4:	2d02      	cmp	r5, #2
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 80030a6:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
    if (speed == RF24_250KBPS) {
 80030aa:	d10c      	bne.n	80030c6 <set_data_rate+0x2c>
		setup |= _BV(RF_DR_LOW);
 80030ac:	f044 0420 	orr.w	r4, r4, #32
	write_register(RF_SETUP, setup);
 80030b0:	4621      	mov	r1, r4
 80030b2:	2006      	movs	r0, #6
 80030b4:	f7ff ffd9 	bl	800306a <write_register>
	if (read_register(RF_SETUP) == setup) {
 80030b8:	2006      	movs	r0, #6
 80030ba:	f7ff ffe4 	bl	8003086 <read_register>
}
 80030be:	1b03      	subs	r3, r0, r4
 80030c0:	4258      	negs	r0, r3
 80030c2:	4158      	adcs	r0, r3
 80030c4:	bd38      	pop	{r3, r4, r5, pc}
		if (speed == RF24_2MBPS) {
 80030c6:	2d01      	cmp	r5, #1
            setup |= _BV(RF_DR_HIGH);
 80030c8:	bf08      	it	eq
 80030ca:	f044 0408 	orreq.w	r4, r4, #8
 80030ce:	e7ef      	b.n	80030b0 <set_data_rate+0x16>

080030d0 <toggle_features>:
void toggle_features(void){
 80030d0:	b508      	push	{r3, lr}
	spi_send(ACTIVATE);
 80030d2:	2050      	movs	r0, #80	; 0x50
 80030d4:	f7fd fa2c 	bl	8000530 <spi_send>
}
 80030d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spi_send(0x73);
 80030dc:	2073      	movs	r0, #115	; 0x73
 80030de:	f7fd ba27 	b.w	8000530 <spi_send>

080030e2 <set_channel>:
	write_register(RF_CH, min(channel, max_channel));
 80030e2:	287d      	cmp	r0, #125	; 0x7d
 80030e4:	4601      	mov	r1, r0
 80030e6:	bf28      	it	cs
 80030e8:	217d      	movcs	r1, #125	; 0x7d
 80030ea:	2005      	movs	r0, #5
 80030ec:	f7ff bfbd 	b.w	800306a <write_register>

080030f0 <flush_rx>:
	spi_send(FLUSH_RX);
 80030f0:	20e2      	movs	r0, #226	; 0xe2
 80030f2:	f7fd ba1d 	b.w	8000530 <spi_send>

080030f6 <flush_tx>:
	spi_send(FLUSH_TX);
 80030f6:	20e1      	movs	r0, #225	; 0xe1
 80030f8:	f7fd ba1a 	b.w	8000530 <spi_send>

080030fc <power_up>:
void power_up(){
 80030fc:	b508      	push	{r3, lr}
	cfg = read_register(NRF_CONFIG);
 80030fe:	2000      	movs	r0, #0
 8003100:	f7ff ffc1 	bl	8003086 <read_register>
 8003104:	4601      	mov	r1, r0
	if (!(cfg & _BV(PWR_UP))) {
 8003106:	f010 0002 	ands.w	r0, r0, #2
 800310a:	d10a      	bne.n	8003122 <power_up+0x26>
		write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
 800310c:	f041 0102 	orr.w	r1, r1, #2
 8003110:	b2c9      	uxtb	r1, r1
 8003112:	f7ff ffaa 	bl	800306a <write_register>
	return z_impl_k_sleep(timeout);
 8003116:	2032      	movs	r0, #50	; 0x32
}
 8003118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800311c:	2100      	movs	r1, #0
 800311e:	f7ff bd69 	b.w	8002bf4 <z_impl_k_sleep>
 8003122:	bd08      	pop	{r3, pc}

08003124 <arch_printk_char_out>:
}
 8003124:	2000      	movs	r0, #0
 8003126:	4770      	bx	lr

08003128 <print_err>:
{
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	4604      	mov	r4, r0
 800312c:	460d      	mov	r5, r1
	out('E', ctx);
 800312e:	2045      	movs	r0, #69	; 0x45
 8003130:	47a0      	blx	r4
	out('R', ctx);
 8003132:	4629      	mov	r1, r5
 8003134:	2052      	movs	r0, #82	; 0x52
 8003136:	47a0      	blx	r4
	out('R', ctx);
 8003138:	4629      	mov	r1, r5
 800313a:	4623      	mov	r3, r4
 800313c:	2052      	movs	r0, #82	; 0x52
}
 800313e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 8003142:	4718      	bx	r3

08003144 <printk>:
{
 8003144:	b40f      	push	{r0, r1, r2, r3}
 8003146:	b507      	push	{r0, r1, r2, lr}
 8003148:	a904      	add	r1, sp, #16
 800314a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800314e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8003150:	f7fd fca6 	bl	8000aa0 <vprintk>
}
 8003154:	b003      	add	sp, #12
 8003156:	f85d eb04 	ldr.w	lr, [sp], #4
 800315a:	b004      	add	sp, #16
 800315c:	4770      	bx	lr

0800315e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800315e:	4604      	mov	r4, r0
 8003160:	b508      	push	{r3, lr}
 8003162:	4608      	mov	r0, r1
 8003164:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8003166:	461a      	mov	r2, r3
 8003168:	47a0      	blx	r4
	return z_impl_k_current_get();
 800316a:	f7ff fd63 	bl	8002c34 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 800316e:	f7fe f973 	bl	8001458 <z_impl_k_thread_abort>

08003172 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
 8003172:	6803      	ldr	r3, [r0, #0]
 8003174:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
 8003178:	6883      	ldr	r3, [r0, #8]
 800317a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
 800317e:	bf2c      	ite	cs
 8003180:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
 8003184:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 8003188:	4770      	bx	lr

0800318a <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
 800318a:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
 800318c:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
 800318e:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
 8003190:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
 8003194:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
 8003198:	bf2c      	ite	cs
 800319a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
 800319e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 80031a2:	bd10      	pop	{r4, pc}

080031a4 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 80031a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
 80031a8:	2200      	movs	r2, #0
 80031aa:	4604      	mov	r4, r0
 80031ac:	460d      	mov	r5, r1
 80031ae:	f7ff ffe0 	bl	8003172 <chunk_field>
 80031b2:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 80031b4:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
 80031b6:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 80031b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
 80031bc:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 80031c0:	bf34      	ite	cc
 80031c2:	2000      	movcc	r0, #0
 80031c4:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
 80031c6:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
 80031c8:	f1c0 001f 	rsb	r0, r0, #31
 80031cc:	1a80      	subs	r0, r0, r2
 80031ce:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 80031d2:	684a      	ldr	r2, [r1, #4]
 80031d4:	1c56      	adds	r6, r2, #1
 80031d6:	604e      	str	r6, [r1, #4]
 80031d8:	b9a2      	cbnz	r2, 8003204 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
 80031da:	2201      	movs	r2, #1
 80031dc:	fa02 f100 	lsl.w	r1, r2, r0
 80031e0:	6962      	ldr	r2, [r4, #20]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
 80031e6:	4629      	mov	r1, r5
		h->buckets[b].next = c;
 80031e8:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
 80031ec:	2202      	movs	r2, #2
 80031ee:	462b      	mov	r3, r5
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7ff ffca 	bl	800318a <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
 80031f6:	2203      	movs	r2, #3
 80031f8:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
 80031fa:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
 80031fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
 8003200:	f7ff bfc3 	b.w	800318a <chunk_set>
		chunkid_t second = h->buckets[b].next;
 8003204:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
 8003208:	2202      	movs	r2, #2
 800320a:	4639      	mov	r1, r7
 800320c:	4620      	mov	r0, r4
 800320e:	f7ff ffb0 	bl	8003172 <chunk_field>
		chunk_set(h, c, FREE_PREV, first);
 8003212:	2202      	movs	r2, #2
 8003214:	4603      	mov	r3, r0
 8003216:	4606      	mov	r6, r0
 8003218:	4629      	mov	r1, r5
 800321a:	4620      	mov	r0, r4
 800321c:	f7ff ffb5 	bl	800318a <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
 8003220:	463b      	mov	r3, r7
 8003222:	2203      	movs	r2, #3
 8003224:	4629      	mov	r1, r5
 8003226:	4620      	mov	r0, r4
 8003228:	f7ff ffaf 	bl	800318a <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
 800322c:	2203      	movs	r2, #3
 800322e:	4631      	mov	r1, r6
 8003230:	462b      	mov	r3, r5
 8003232:	4620      	mov	r0, r4
 8003234:	f7ff ffa9 	bl	800318a <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
 8003238:	2202      	movs	r2, #2
 800323a:	4639      	mov	r1, r7
 800323c:	e7dd      	b.n	80031fa <free_list_add+0x56>

0800323e <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800323e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
 8003240:	188b      	adds	r3, r1, r2
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
 8003242:	1dcc      	adds	r4, r1, #7
 8003244:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
 8003248:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 800324c:	1b1b      	subs	r3, r3, r4
 800324e:	08db      	lsrs	r3, r3, #3

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
 8003250:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003258:	bf2c      	ite	cs
 800325a:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
 800325e:	4611      	movcc	r1, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 8003260:	4293      	cmp	r3, r2
	heap->heap = (struct z_heap *)addr;
 8003262:	6004      	str	r4, [r0, #0]
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
 8003264:	60e1      	str	r1, [r4, #12]
 8003266:	bf94      	ite	ls
 8003268:	2100      	movls	r1, #0
 800326a:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
 800326c:	fab3 f683 	clz	r6, r3
	h->avail_buckets = 0;

	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
 8003270:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
 8003274:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
 8003278:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 800327a:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
 800327e:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->avail_buckets = 0;
 8003282:	2000      	movs	r0, #0
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
 8003284:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
 8003286:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
 8003288:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
 800328a:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
 800328c:	4617      	mov	r7, r2

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
 800328e:	4684      	mov	ip, r0
 8003290:	68a2      	ldr	r2, [r4, #8]
 8003292:	42ba      	cmp	r2, r7
 8003294:	bf94      	ite	ls
 8003296:	2200      	movls	r2, #0
 8003298:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
 800329a:	f1c2 021f 	rsb	r2, r2, #31
 800329e:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
 80032a0:	4290      	cmp	r0, r2
 80032a2:	dd0a      	ble.n	80032ba <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
 80032a4:	1a5b      	subs	r3, r3, r1
 80032a6:	4620      	mov	r0, r4
 80032a8:	2200      	movs	r2, #0
 80032aa:	f7ff ff6e 	bl	800318a <chunk_set>
	free_list_add(h, h->chunk0);
 80032ae:	6921      	ldr	r1, [r4, #16]
 80032b0:	4620      	mov	r0, r4
}
 80032b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
 80032b6:	f7ff bf75 	b.w	80031a4 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
 80032ba:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
 80032be:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
 80032c0:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
 80032c4:	e7e4      	b.n	8003290 <sys_heap_init+0x52>

080032c6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_LEGACY_DEVICETREE_MACROS, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80032c6:	4770      	bx	lr

080032c8 <__stm32_exti_isr_0>:
{
 80032c8:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 80032ca:	2101      	movs	r1, #1
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fd bc35 	b.w	8000b3c <__stm32_exti_isr>

080032d2 <__stm32_exti_isr_1>:
{
 80032d2:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 80032d4:	2102      	movs	r1, #2
 80032d6:	2001      	movs	r0, #1
 80032d8:	f7fd bc30 	b.w	8000b3c <__stm32_exti_isr>

080032dc <__stm32_exti_isr_2>:
{
 80032dc:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 80032de:	2103      	movs	r1, #3
 80032e0:	2002      	movs	r0, #2
 80032e2:	f7fd bc2b 	b.w	8000b3c <__stm32_exti_isr>

080032e6 <__stm32_exti_isr_3>:
{
 80032e6:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 80032e8:	2104      	movs	r1, #4
 80032ea:	2003      	movs	r0, #3
 80032ec:	f7fd bc26 	b.w	8000b3c <__stm32_exti_isr>

080032f0 <__stm32_exti_isr_4>:
{
 80032f0:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 80032f2:	2105      	movs	r1, #5
 80032f4:	2004      	movs	r0, #4
 80032f6:	f7fd bc21 	b.w	8000b3c <__stm32_exti_isr>

080032fa <__stm32_exti_isr_9_5>:
{
 80032fa:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 80032fc:	210a      	movs	r1, #10
 80032fe:	2005      	movs	r0, #5
 8003300:	f7fd bc1c 	b.w	8000b3c <__stm32_exti_isr>

08003304 <__stm32_exti_isr_15_10>:
{
 8003304:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 8003306:	2110      	movs	r1, #16
 8003308:	200a      	movs	r0, #10
 800330a:	f7fd bc17 	b.w	8000b3c <__stm32_exti_isr>

0800330e <__stm32_exti_isr_16>:
{
 800330e:	4602      	mov	r2, r0
	__stm32_exti_isr(16, 17, arg);
 8003310:	2111      	movs	r1, #17
 8003312:	2010      	movs	r0, #16
 8003314:	f7fd bc12 	b.w	8000b3c <__stm32_exti_isr>

08003318 <__stm32_exti_isr_18>:
{
 8003318:	4602      	mov	r2, r0
	__stm32_exti_isr(18, 19, arg);
 800331a:	2113      	movs	r1, #19
 800331c:	2012      	movs	r0, #18
 800331e:	f7fd bc0d 	b.w	8000b3c <__stm32_exti_isr>

08003322 <__stm32_exti_isr_21>:
{
 8003322:	4602      	mov	r2, r0
	__stm32_exti_isr(21, 22, arg);
 8003324:	2116      	movs	r1, #22
 8003326:	2015      	movs	r0, #21
 8003328:	f7fd bc08 	b.w	8000b3c <__stm32_exti_isr>

0800332c <__stm32_exti_isr_22>:
{
 800332c:	4602      	mov	r2, r0
	__stm32_exti_isr(22, 23, arg);
 800332e:	2117      	movs	r1, #23
 8003330:	2016      	movs	r0, #22
 8003332:	f7fd bc03 	b.w	8000b3c <__stm32_exti_isr>

08003336 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8003336:	2200      	movs	r2, #0
{
 8003338:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 800333a:	4611      	mov	r1, r2
 800333c:	2006      	movs	r0, #6
 800333e:	f7fd feed 	bl	800111c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8003342:	2200      	movs	r2, #0
 8003344:	4611      	mov	r1, r2
 8003346:	2007      	movs	r0, #7
 8003348:	f7fd fee8 	bl	800111c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800334c:	2200      	movs	r2, #0
 800334e:	4611      	mov	r1, r2
 8003350:	2008      	movs	r0, #8
 8003352:	f7fd fee3 	bl	800111c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8003356:	2200      	movs	r2, #0
 8003358:	4611      	mov	r1, r2
 800335a:	2009      	movs	r0, #9
 800335c:	f7fd fede 	bl	800111c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8003360:	2200      	movs	r2, #0
 8003362:	4611      	mov	r1, r2
 8003364:	200a      	movs	r0, #10
 8003366:	f7fd fed9 	bl	800111c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 800336a:	2200      	movs	r2, #0
 800336c:	4611      	mov	r1, r2
 800336e:	2017      	movs	r0, #23
 8003370:	f7fd fed4 	bl	800111c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8003374:	2200      	movs	r2, #0
 8003376:	4611      	mov	r1, r2
 8003378:	2028      	movs	r0, #40	; 0x28
 800337a:	f7fd fecf 	bl	800111c <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 800337e:	2200      	movs	r2, #0
 8003380:	4611      	mov	r1, r2
 8003382:	2001      	movs	r0, #1
 8003384:	f7fd feca 	bl	800111c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8003388:	2200      	movs	r2, #0
 800338a:	4611      	mov	r1, r2
 800338c:	202a      	movs	r0, #42	; 0x2a
 800338e:	f7fd fec5 	bl	800111c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8003392:	2200      	movs	r2, #0
 8003394:	4611      	mov	r1, r2
 8003396:	2002      	movs	r0, #2
 8003398:	f7fd fec0 	bl	800111c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 800339c:	2200      	movs	r2, #0
 800339e:	4611      	mov	r1, r2
 80033a0:	2003      	movs	r0, #3
 80033a2:	f7fd febb 	bl	800111c <z_arm_irq_priority_set>
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	bd08      	pop	{r3, pc}

080033aa <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 80033aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80033ae:	2208      	movs	r2, #8
 80033b0:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 80033b4:	2300      	movs	r3, #0
 80033b6:	6083      	str	r3, [r0, #8]
}
 80033b8:	4770      	bx	lr

080033ba <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 80033ba:	4770      	bx	lr

080033bc <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80033bc:	2100      	movs	r1, #0
 80033be:	2001      	movs	r0, #1
 80033c0:	f000 b800 	b.w	80033c4 <z_arm_fatal_error>

080033c4 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 80033c4:	f000 bbe3 	b.w	8003b8e <z_fatal_error>

080033c8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80033c8:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 80033ca:	6800      	ldr	r0, [r0, #0]
 80033cc:	f000 bbdf 	b.w	8003b8e <z_fatal_error>

080033d0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 80033d0:	b508      	push	{r3, lr}
	handler();
 80033d2:	f7fd ff05 	bl	80011e0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80033d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80033da:	f7fe b823 	b.w	8001424 <z_arm_exc_exit>

080033de <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 80033de:	1e43      	subs	r3, r0, #1
 80033e0:	3901      	subs	r1, #1
 80033e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80033e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80033ea:	4282      	cmp	r2, r0
 80033ec:	d101      	bne.n	80033f2 <strcmp+0x14>
 80033ee:	2a00      	cmp	r2, #0
 80033f0:	d1f7      	bne.n	80033e2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 80033f2:	1a10      	subs	r0, r2, r0
 80033f4:	4770      	bx	lr

080033f6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 80033f6:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 80033f8:	ea81 0400 	eor.w	r4, r1, r0
 80033fc:	07a5      	lsls	r5, r4, #30
 80033fe:	4603      	mov	r3, r0
 8003400:	d00b      	beq.n	800341a <memcpy+0x24>
 8003402:	3b01      	subs	r3, #1
 8003404:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8003406:	4291      	cmp	r1, r2
 8003408:	d11b      	bne.n	8003442 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 800340a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 800340c:	2a00      	cmp	r2, #0
 800340e:	d0fc      	beq.n	800340a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 8003410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003414:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8003418:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 800341a:	079c      	lsls	r4, r3, #30
 800341c:	d1f6      	bne.n	800340c <memcpy+0x16>
 800341e:	f022 0403 	bic.w	r4, r2, #3
 8003422:	1f1d      	subs	r5, r3, #4
 8003424:	0896      	lsrs	r6, r2, #2
 8003426:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8003428:	42b9      	cmp	r1, r7
 800342a:	d105      	bne.n	8003438 <memcpy+0x42>
 800342c:	f06f 0503 	mvn.w	r5, #3
 8003430:	fb05 2206 	mla	r2, r5, r6, r2
 8003434:	4423      	add	r3, r4
 8003436:	e7e4      	b.n	8003402 <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8003438:	f851 cb04 	ldr.w	ip, [r1], #4
 800343c:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
 8003440:	e7f2      	b.n	8003428 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
 8003442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003446:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 800344a:	e7dc      	b.n	8003406 <memcpy+0x10>

0800344c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 800344c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 800344e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8003450:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8003452:	079c      	lsls	r4, r3, #30
 8003454:	d111      	bne.n	800347a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 8003456:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 800345a:	f022 0603 	bic.w	r6, r2, #3
 800345e:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8003462:	441e      	add	r6, r3
 8003464:	0894      	lsrs	r4, r2, #2
 8003466:	42b3      	cmp	r3, r6
 8003468:	d10d      	bne.n	8003486 <memset+0x3a>
 800346a:	f06f 0503 	mvn.w	r5, #3
 800346e:	fb05 2204 	mla	r2, r5, r4, r2
 8003472:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8003474:	4293      	cmp	r3, r2
 8003476:	d109      	bne.n	800348c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8003478:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 800347a:	2a00      	cmp	r2, #0
 800347c:	d0fc      	beq.n	8003478 <memset+0x2c>
		*(d_byte++) = c_byte;
 800347e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8003482:	3a01      	subs	r2, #1
 8003484:	e7e5      	b.n	8003452 <memset+0x6>
		*(d_word++) = c_word;
 8003486:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 800348a:	e7ec      	b.n	8003466 <memset+0x1a>
		*(d_byte++) = c_byte;
 800348c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8003490:	e7f0      	b.n	8003474 <memset+0x28>

08003492 <_stdout_hook_default>:
}
 8003492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003496:	4770      	bx	lr

08003498 <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 8003498:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 800349a:	6853      	ldr	r3, [r2, #4]
 800349c:	40c3      	lsrs	r3, r0
 800349e:	07db      	lsls	r3, r3, #31
{
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 80034a4:	d515      	bpl.n	80034d2 <gpio_stm32_isr+0x3a>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80034a6:	6891      	ldr	r1, [r2, #8]
 80034a8:	b199      	cbz	r1, 80034d2 <gpio_stm32_isr+0x3a>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 80034aa:	680c      	ldr	r4, [r1, #0]
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 80034ac:	2501      	movs	r5, #1
 80034ae:	2c00      	cmp	r4, #0
 80034b0:	bf38      	it	cc
 80034b2:	2400      	movcc	r4, #0
 80034b4:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 80034b6:	688a      	ldr	r2, [r1, #8]
 80034b8:	402a      	ands	r2, r5
 80034ba:	d002      	beq.n	80034c2 <gpio_stm32_isr+0x2a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 80034bc:	684b      	ldr	r3, [r1, #4]
 80034be:	4630      	mov	r0, r6
 80034c0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80034c2:	b134      	cbz	r4, 80034d2 <gpio_stm32_isr+0x3a>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf38      	it	cc
 80034ca:	2300      	movcc	r3, #0
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80034cc:	4621      	mov	r1, r4
 80034ce:	461c      	mov	r4, r3
 80034d0:	e7f1      	b.n	80034b6 <gpio_stm32_isr+0x1e>
}
 80034d2:	bd70      	pop	{r4, r5, r6, pc}

080034d4 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80034d4:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80034da:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 80034dc:	600b      	str	r3, [r1, #0]
}
 80034de:	2000      	movs	r0, #0
 80034e0:	4770      	bx	lr

080034e2 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80034e2:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 80034e8:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 80034ea:	4042      	eors	r2, r0
 80034ec:	400a      	ands	r2, r1
 80034ee:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 80034f0:	615a      	str	r2, [r3, #20]
}
 80034f2:	2000      	movs	r0, #0
 80034f4:	4770      	bx	lr

080034f6 <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80034f6:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	685b      	ldr	r3, [r3, #4]
}
 80034fc:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 80034fe:	6199      	str	r1, [r3, #24]
}
 8003500:	4770      	bx	lr

08003502 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003502:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003508:	0409      	lsls	r1, r1, #16
 800350a:	6199      	str	r1, [r3, #24]
}
 800350c:	2000      	movs	r0, #0
 800350e:	4770      	bx	lr

08003510 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003510:	6803      	ldr	r3, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8003516:	6953      	ldr	r3, [r2, #20]
 8003518:	404b      	eors	r3, r1
 800351a:	6153      	str	r3, [r2, #20]
}
 800351c:	2000      	movs	r0, #0
 800351e:	4770      	bx	lr

08003520 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8003520:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 8003522:	6898      	ldr	r0, [r3, #8]
{
 8003524:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8003526:	b158      	cbz	r0, 8003540 <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003528:	2400      	movs	r4, #0
 800352a:	4281      	cmp	r1, r0
 800352c:	d113      	bne.n	8003556 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 800352e:	6808      	ldr	r0, [r1, #0]
 8003530:	b95c      	cbnz	r4, 800354a <gpio_stm32_manage_callback+0x2a>
 8003532:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 8003534:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8003536:	42a1      	cmp	r1, r4
 8003538:	d100      	bne.n	800353c <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 800353a:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 800353c:	2000      	movs	r0, #0
 800353e:	6008      	str	r0, [r1, #0]
	if (set) {
 8003540:	b972      	cbnz	r2, 8003560 <gpio_stm32_manage_callback+0x40>
	return 0;
 8003542:	2000      	movs	r0, #0
}
 8003544:	bd30      	pop	{r4, r5, pc}
 8003546:	4628      	mov	r0, r5
 8003548:	e7ef      	b.n	800352a <gpio_stm32_manage_callback+0xa>
 800354a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 800354c:	68d8      	ldr	r0, [r3, #12]
 800354e:	4281      	cmp	r1, r0
	list->tail = node;
 8003550:	bf08      	it	eq
 8003552:	60dc      	streq	r4, [r3, #12]
}
 8003554:	e7f2      	b.n	800353c <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8003556:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003558:	4604      	mov	r4, r0
 800355a:	2d00      	cmp	r5, #0
 800355c:	d1f3      	bne.n	8003546 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 800355e:	b13a      	cbz	r2, 8003570 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8003560:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8003562:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8003564:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 8003566:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8003568:	2800      	cmp	r0, #0
 800356a:	d1ea      	bne.n	8003542 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 800356c:	60d9      	str	r1, [r3, #12]
}
 800356e:	e7e9      	b.n	8003544 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8003570:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8003574:	e7e6      	b.n	8003544 <gpio_stm32_manage_callback+0x24>

08003576 <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8003576:	6882      	ldr	r2, [r0, #8]
	data->cb_pins |= BIT(pin);
 8003578:	2301      	movs	r3, #1
 800357a:	fa03 f101 	lsl.w	r1, r3, r1
 800357e:	6853      	ldr	r3, [r2, #4]
 8003580:	430b      	orrs	r3, r1
 8003582:	6053      	str	r3, [r2, #4]
}
 8003584:	2000      	movs	r0, #0
 8003586:	4770      	bx	lr

08003588 <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8003588:	6882      	ldr	r2, [r0, #8]
	data->cb_pins &= ~BIT(pin);
 800358a:	2301      	movs	r3, #1
 800358c:	fa03 f101 	lsl.w	r1, r3, r1
 8003590:	6853      	ldr	r3, [r2, #4]
 8003592:	ea23 0301 	bic.w	r3, r3, r1
 8003596:	6053      	str	r3, [r2, #4]
}
 8003598:	2000      	movs	r0, #0
 800359a:	4770      	bx	lr

0800359c <gpio_stm32_configure>:
{
 800359c:	b5f0      	push	{r4, r5, r6, r7, lr}
	pinval = 1 << pin;
 800359e:	2401      	movs	r4, #1
 80035a0:	408c      	lsls	r4, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 80035a6:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80035aa:	f8d0 c000 	ldr.w	ip, [r0]
 80035ae:	007f      	lsls	r7, r7, #1
 80035b0:	f04f 0e03 	mov.w	lr, #3
 80035b4:	fa0e f707 	lsl.w	r7, lr, r7
 80035b8:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 80035c0:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 80035c4:	f3c2 1501 	ubfx	r5, r2, #4, #2
 80035c8:	007f      	lsls	r7, r7, #1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80035ca:	f002 0630 	and.w	r6, r2, #48	; 0x30
 80035ce:	40bd      	lsls	r5, r7
 80035d0:	ea45 050c 	orr.w	r5, r5, ip
	if (STM32_MODER_ALT_MODE == mode) {
 80035d4:	2e20      	cmp	r6, #32
 80035d6:	6005      	str	r5, [r0, #0]
 80035d8:	d115      	bne.n	8003606 <gpio_stm32_configure+0x6a>
		if (pin < 8) {
 80035da:	2907      	cmp	r1, #7
 80035dc:	dc48      	bgt.n	8003670 <gpio_stm32_configure+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	fa94 f5a4 	rbit	r5, r4
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80035e2:	6a07      	ldr	r7, [r0, #32]
  if (value == 0U)
 80035e4:	b10d      	cbz	r5, 80035ea <gpio_stm32_configure+0x4e>
  return __builtin_clz(value);
 80035e6:	fab5 f685 	clz	r6, r5
 80035ea:	250f      	movs	r5, #15
 80035ec:	00b6      	lsls	r6, r6, #2
 80035ee:	fa05 f606 	lsl.w	r6, r5, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 80035f6:	fab5 f585 	clz	r5, r5
 80035fa:	00ad      	lsls	r5, r5, #2
 80035fc:	ea27 0606 	bic.w	r6, r7, r6
 8003600:	40ab      	lsls	r3, r5
 8003602:	4333      	orrs	r3, r6
 8003604:	6203      	str	r3, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003606:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8003608:	f3c2 1380 	ubfx	r3, r2, #6, #1
 800360c:	fa03 f101 	lsl.w	r1, r3, r1
 8003610:	ea25 0304 	bic.w	r3, r5, r4
 8003614:	4319      	orrs	r1, r3
 8003616:	6041      	str	r1, [r0, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 800361c:	fab1 f181 	clz	r1, r1
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003620:	6885      	ldr	r5, [r0, #8]
 8003622:	2603      	movs	r6, #3
 8003624:	0049      	lsls	r1, r1, #1
 8003626:	fa06 f101 	lsl.w	r1, r6, r1
 800362a:	ea25 0501 	bic.w	r5, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8003632:	fab1 f181 	clz	r1, r1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8003636:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 800363a:	0049      	lsls	r1, r1, #1
 800363c:	408b      	lsls	r3, r1
 800363e:	432b      	orrs	r3, r5
 8003640:	6083      	str	r3, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 8003646:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800364a:	68c1      	ldr	r1, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	fa94 f4a4 	rbit	r4, r4
 8003650:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8003652:	fab4 f484 	clz	r4, r4
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8003656:	f3c2 2241 	ubfx	r2, r2, #9, #2
 800365a:	fa06 f303 	lsl.w	r3, r6, r3
 800365e:	0064      	lsls	r4, r4, #1
 8003660:	ea21 0303 	bic.w	r3, r1, r3
 8003664:	fa02 f404 	lsl.w	r4, r2, r4
 8003668:	431c      	orrs	r4, r3
 800366a:	60c4      	str	r4, [r0, #12]
}
 800366c:	2000      	movs	r0, #0
 800366e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003670:	0a25      	lsrs	r5, r4, #8
 8003672:	6a47      	ldr	r7, [r0, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	fa95 fca5 	rbit	ip, r5
  if (value == 0U)
 8003678:	f1bc 0f00 	cmp.w	ip, #0
 800367c:	d001      	beq.n	8003682 <gpio_stm32_configure+0xe6>
  return __builtin_clz(value);
 800367e:	fabc f68c 	clz	r6, ip
 8003682:	00b6      	lsls	r6, r6, #2
 8003684:	f04f 0c0f 	mov.w	ip, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	fa95 f5a5 	rbit	r5, r5
  return __builtin_clz(value);
 800368c:	fab5 f585 	clz	r5, r5
 8003690:	fa0c f606 	lsl.w	r6, ip, r6
 8003694:	00ad      	lsls	r5, r5, #2
 8003696:	ea27 0606 	bic.w	r6, r7, r6
 800369a:	40ab      	lsls	r3, r5
 800369c:	4333      	orrs	r3, r6
 800369e:	6243      	str	r3, [r0, #36]	; 0x24
}
 80036a0:	e7b1      	b.n	8003606 <gpio_stm32_configure+0x6a>

080036a2 <gpio_stm32_config>:
{
 80036a2:	b538      	push	{r3, r4, r5, lr}
 80036a4:	4613      	mov	r3, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 80036a6:	6802      	ldr	r2, [r0, #0]
 80036a8:	6895      	ldr	r5, [r2, #8]
	if ((flags & GPIO_OUTPUT) != 0) {
 80036aa:	059a      	lsls	r2, r3, #22
{
 80036ac:	460c      	mov	r4, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 80036ae:	d516      	bpl.n	80036de <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80036b0:	0799      	lsls	r1, r3, #30
 80036b2:	d50d      	bpl.n	80036d0 <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80036b4:	075a      	lsls	r2, r3, #29
 80036b6:	d52e      	bpl.n	8003716 <gpio_stm32_config+0x74>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80036b8:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80036ba:	06d9      	lsls	r1, r3, #27
 80036bc:	d50a      	bpl.n	80036d4 <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80036be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80036c2:	0519      	lsls	r1, r3, #20
 80036c4:	d51b      	bpl.n	80036fe <gpio_stm32_config+0x5c>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80036c6:	2101      	movs	r1, #1
 80036c8:	40a1      	lsls	r1, r4
 80036ca:	f7ff ff14 	bl	80034f6 <gpio_stm32_port_set_bits_raw>
 80036ce:	e00f      	b.n	80036f0 <gpio_stm32_config+0x4e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80036d0:	2210      	movs	r2, #16
 80036d2:	e7f2      	b.n	80036ba <gpio_stm32_config+0x18>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80036d4:	0699      	lsls	r1, r3, #26
 80036d6:	d5f4      	bpl.n	80036c2 <gpio_stm32_config+0x20>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80036d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 80036dc:	e7f1      	b.n	80036c2 <gpio_stm32_config+0x20>
	} else if  ((flags & GPIO_INPUT) != 0) {
 80036de:	05d9      	lsls	r1, r3, #23
 80036e0:	d514      	bpl.n	800370c <gpio_stm32_config+0x6a>
		if ((flags & GPIO_PULL_UP) != 0) {
 80036e2:	06da      	lsls	r2, r3, #27
 80036e4:	d414      	bmi.n	8003710 <gpio_stm32_config+0x6e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80036e6:	f013 0220 	ands.w	r2, r3, #32
 80036ea:	bf18      	it	ne
 80036ec:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 80036f0:	6868      	ldr	r0, [r5, #4]
 80036f2:	2300      	movs	r3, #0
 80036f4:	4621      	mov	r1, r4
 80036f6:	f7ff ff51 	bl	800359c <gpio_stm32_configure>
 80036fa:	2000      	movs	r0, #0
}
 80036fc:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 80036fe:	055b      	lsls	r3, r3, #21
 8003700:	d5f6      	bpl.n	80036f0 <gpio_stm32_config+0x4e>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8003702:	2101      	movs	r1, #1
 8003704:	40a1      	lsls	r1, r4
 8003706:	f7ff fefc 	bl	8003502 <gpio_stm32_port_clear_bits_raw>
 800370a:	e7f1      	b.n	80036f0 <gpio_stm32_config+0x4e>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800370c:	2230      	movs	r2, #48	; 0x30
 800370e:	e7ef      	b.n	80036f0 <gpio_stm32_config+0x4e>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003714:	e7ec      	b.n	80036f0 <gpio_stm32_config+0x4e>
				return -ENOTSUP;
 8003716:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return err;
 800371a:	e7ef      	b.n	80036fc <gpio_stm32_config+0x5a>

0800371c <pwm_stm32_get_cycles_per_sec>:
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 800371c:	6803      	ldr	r3, [r0, #0]
{
 800371e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 8003720:	6899      	ldr	r1, [r3, #8]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8003722:	6885      	ldr	r5, [r0, #8]
	if (cycles == NULL) {
 8003724:	4614      	mov	r4, r2
 8003726:	b192      	cbz	r2, 800374e <pwm_stm32_get_cycles_per_sec+0x32>
	if (clock_control_get_rate(data->clock,
 8003728:	6c68      	ldr	r0, [r5, #68]	; 0x44
	return api->get_rate(dev, sys, rate);
 800372a:	6843      	ldr	r3, [r0, #4]
 800372c:	aa01      	add	r2, sp, #4
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	3104      	adds	r1, #4
 8003732:	4798      	blx	r3
 8003734:	2800      	cmp	r0, #0
 8003736:	db0d      	blt.n	8003754 <pwm_stm32_get_cycles_per_sec+0x38>
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8003738:	6c2a      	ldr	r2, [r5, #64]	; 0x40
		tim_clk = bus_clk * 2U;
 800373a:	9b01      	ldr	r3, [sp, #4]
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 800373c:	2000      	movs	r0, #0
		tim_clk = bus_clk * 2U;
 800373e:	005b      	lsls	r3, r3, #1
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8003740:	3201      	adds	r2, #1
 8003742:	fbb3 f3f2 	udiv	r3, r3, r2
 8003746:	e9c4 3000 	strd	r3, r0, [r4]
}
 800374a:	b003      	add	sp, #12
 800374c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
 800374e:	f06f 0015 	mvn.w	r0, #21
 8003752:	e7fa      	b.n	800374a <pwm_stm32_get_cycles_per_sec+0x2e>
		return -EIO;
 8003754:	f06f 0004 	mvn.w	r0, #4
 8003758:	e7f7      	b.n	800374a <pwm_stm32_get_cycles_per_sec+0x2e>

0800375a <gpio_pin_set>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800375a:	2301      	movs	r3, #1
 800375c:	fa03 f101 	lsl.w	r1, r3, r1
 8003760:	6883      	ldr	r3, [r0, #8]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8003766:	bf18      	it	ne
 8003768:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 800376c:	b112      	cbz	r2, 8003774 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
 800376e:	6843      	ldr	r3, [r0, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8003772:	4718      	bx	r3
 8003774:	6843      	ldr	r3, [r0, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	e7fb      	b.n	8003772 <gpio_pin_set+0x18>

0800377a <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
 800377a:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800377c:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
 800377e:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8003780:	b325      	cbz	r5, 80037cc <_spi_context_cs_control.isra.0+0x52>
 8003782:	68ab      	ldr	r3, [r5, #8]
 8003784:	b313      	cbz	r3, 80037cc <_spi_context_cs_control.isra.0+0x52>
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	b300      	cbz	r0, 80037cc <_spi_context_cs_control.isra.0+0x52>
		if (on) {
 800378a:	b161      	cbz	r1, 80037a6 <_spi_context_cs_control.isra.0+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
 800378c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8003790:	7919      	ldrb	r1, [r3, #4]
 8003792:	0fd2      	lsrs	r2, r2, #31
 8003794:	f7ff ffe1 	bl	800375a <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	6898      	ldr	r0, [r3, #8]
}
 800379e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 80037a2:	f7ff ba97 	b.w	8002cd4 <z_impl_k_busy_wait>
			if (!force_off &&
 80037a6:	b912      	cbnz	r2, 80037ae <_spi_context_cs_control.isra.0+0x34>
 80037a8:	88aa      	ldrh	r2, [r5, #4]
 80037aa:	0492      	lsls	r2, r2, #18
 80037ac:	d40e      	bmi.n	80037cc <_spi_context_cs_control.isra.0+0x52>
			k_busy_wait(ctx->config->cs->delay);
 80037ae:	6898      	ldr	r0, [r3, #8]
 80037b0:	f7ff fa90 	bl	8002cd4 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
 80037b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
 80037bc:	7919      	ldrb	r1, [r3, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	43d2      	mvns	r2, r2
}
 80037c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
 80037c6:	0fd2      	lsrs	r2, r2, #31
 80037c8:	f7ff bfc7 	b.w	800375a <gpio_pin_set>
}
 80037cc:	bd38      	pop	{r3, r4, r5, pc}

080037ce <spi_context_unlock_unconditionally>:
{
 80037ce:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 80037d0:	2201      	movs	r2, #1
 80037d2:	2100      	movs	r1, #0
{
 80037d4:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 80037d6:	f7ff ffd0 	bl	800377a <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	b923      	cbnz	r3, 80037e8 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
 80037de:	1d20      	adds	r0, r4, #4
}
 80037e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037e4:	f7ff ba2c 	b.w	8002c40 <z_impl_k_sem_give>
 80037e8:	bd10      	pop	{r4, pc}

080037ea <spi_stm32_release>:
{
 80037ea:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80037ec:	6880      	ldr	r0, [r0, #8]
 80037ee:	f7ff ffee 	bl	80037ce <spi_context_unlock_unconditionally>
}
 80037f2:	2000      	movs	r0, #0
 80037f4:	bd08      	pop	{r3, pc}

080037f6 <LL_USART_ClearFlag_FE>:
{
 80037f6:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 80037f8:	6803      	ldr	r3, [r0, #0]
 80037fa:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80037fc:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 80037fe:	6843      	ldr	r3, [r0, #4]
 8003800:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003802:	9b01      	ldr	r3, [sp, #4]
}
 8003804:	b002      	add	sp, #8
 8003806:	4770      	bx	lr

08003808 <uart_stm32_poll_in>:
{
 8003808:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800380a:	6803      	ldr	r3, [r0, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003810:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8003812:	071a      	lsls	r2, r3, #28
 8003814:	d501      	bpl.n	800381a <uart_stm32_poll_in+0x12>
		LL_USART_ClearFlag_ORE(UartInstance);
 8003816:	f7ff ffee 	bl	80037f6 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800381a:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800381c:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800381e:	bf43      	ittte	mi
 8003820:	6843      	ldrmi	r3, [r0, #4]
 8003822:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8003824:	2000      	movmi	r0, #0
		return -1;
 8003826:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 800382a:	bd08      	pop	{r3, pc}

0800382c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800382c:	6803      	ldr	r3, [r0, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003832:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8003834:	0612      	lsls	r2, r2, #24
 8003836:	d5fc      	bpl.n	8003832 <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800383c:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800383e:	6059      	str	r1, [r3, #4]
}
 8003840:	4770      	bx	lr

08003842 <uart_stm32_err_check>:
{
 8003842:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003844:	6803      	ldr	r3, [r0, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800384a:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 800384c:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 800384e:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003850:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8003852:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8003856:	bf48      	it	mi
 8003858:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 800385c:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 800385e:	bf48      	it	mi
 8003860:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 8003864:	07d3      	lsls	r3, r2, #31
 8003866:	d501      	bpl.n	800386c <uart_stm32_err_check+0x2a>
		LL_USART_ClearFlag_ORE(UartInstance);
 8003868:	f7ff ffc5 	bl	80037f6 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 800386c:	0791      	lsls	r1, r2, #30
 800386e:	d501      	bpl.n	8003874 <uart_stm32_err_check+0x32>
		LL_USART_ClearFlag_PE(UartInstance);
 8003870:	f7ff ffc1 	bl	80037f6 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8003874:	0753      	lsls	r3, r2, #29
 8003876:	d501      	bpl.n	800387c <uart_stm32_err_check+0x3a>
		LL_USART_ClearFlag_FE(UartInstance);
 8003878:	f7ff ffbd 	bl	80037f6 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 800387c:	f7ff ffbb 	bl	80037f6 <LL_USART_ClearFlag_FE>
}
 8003880:	4610      	mov	r0, r2
 8003882:	bd08      	pop	{r3, pc}

08003884 <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003884:	6803      	ldr	r3, [r0, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
{
 8003888:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800388a:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 800388c:	2300      	movs	r3, #0
 800388e:	b2d8      	uxtb	r0, r3
 8003890:	1a15      	subs	r5, r2, r0
 8003892:	2d00      	cmp	r5, #0
 8003894:	dd04      	ble.n	80038a0 <uart_stm32_fifo_fill+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003896:	6825      	ldr	r5, [r4, #0]
 8003898:	062d      	lsls	r5, r5, #24
 800389a:	f103 0301 	add.w	r3, r3, #1
 800389e:	d400      	bmi.n	80038a2 <uart_stm32_fifo_fill+0x1e>
}
 80038a0:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 80038a2:	5c08      	ldrb	r0, [r1, r0]
 80038a4:	6060      	str	r0, [r4, #4]
}
 80038a6:	e7f2      	b.n	800388e <uart_stm32_fifo_fill+0xa>

080038a8 <uart_stm32_fifo_read>:
{
 80038a8:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80038aa:	6803      	ldr	r3, [r0, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 80038b0:	2500      	movs	r5, #0
 80038b2:	b2e8      	uxtb	r0, r5
 80038b4:	1a13      	subs	r3, r2, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	dd02      	ble.n	80038c0 <uart_stm32_fifo_read+0x18>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	069b      	lsls	r3, r3, #26
 80038be:	d400      	bmi.n	80038c2 <uart_stm32_fifo_read+0x1a>
}
 80038c0:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80038c2:	6863      	ldr	r3, [r4, #4]
 80038c4:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80038c6:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80038c8:	0718      	lsls	r0, r3, #28
 80038ca:	d502      	bpl.n	80038d2 <uart_stm32_fifo_read+0x2a>
			LL_USART_ClearFlag_ORE(UartInstance);
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7ff ff92 	bl	80037f6 <LL_USART_ClearFlag_FE>
 80038d2:	3501      	adds	r5, #1
 80038d4:	e7ed      	b.n	80038b2 <uart_stm32_fifo_read+0xa>

080038d6 <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80038d6:	6803      	ldr	r3, [r0, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80038dc:	68d3      	ldr	r3, [r2, #12]
 80038de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e2:	60d3      	str	r3, [r2, #12]
}
 80038e4:	4770      	bx	lr

080038e6 <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80038e6:	6803      	ldr	r3, [r0, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80038ec:	68d3      	ldr	r3, [r2, #12]
 80038ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f2:	60d3      	str	r3, [r2, #12]
}
 80038f4:	4770      	bx	lr

080038f6 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80038f6:	6803      	ldr	r3, [r0, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80038fc:	6818      	ldr	r0, [r3, #0]
}
 80038fe:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8003902:	4770      	bx	lr

08003904 <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003904:	6803      	ldr	r3, [r0, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800390a:	6818      	ldr	r0, [r3, #0]
}
 800390c:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8003910:	4770      	bx	lr

08003912 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003912:	6803      	ldr	r3, [r0, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003918:	68d3      	ldr	r3, [r2, #12]
 800391a:	f043 0320 	orr.w	r3, r3, #32
 800391e:	60d3      	str	r3, [r2, #12]
}
 8003920:	4770      	bx	lr

08003922 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003922:	6803      	ldr	r3, [r0, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003928:	68d3      	ldr	r3, [r2, #12]
 800392a:	f023 0320 	bic.w	r3, r3, #32
 800392e:	60d3      	str	r3, [r2, #12]
}
 8003930:	4770      	bx	lr

08003932 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003932:	6803      	ldr	r3, [r0, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003938:	6818      	ldr	r0, [r3, #0]
}
 800393a:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800393e:	4770      	bx	lr

08003940 <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003940:	6803      	ldr	r3, [r0, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8003948:	0691      	lsls	r1, r2, #26
 800394a:	d502      	bpl.n	8003952 <uart_stm32_irq_is_pending+0x12>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 800394c:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 800394e:	0692      	lsls	r2, r2, #26
 8003950:	d407      	bmi.n	8003962 <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003952:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8003954:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003958:	d004      	beq.n	8003964 <uart_stm32_irq_is_pending+0x24>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 800395a:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 800395c:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8003960:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8003962:	2001      	movs	r0, #1
}
 8003964:	4770      	bx	lr

08003966 <uart_stm32_irq_update>:
}
 8003966:	2001      	movs	r0, #1
 8003968:	4770      	bx	lr

0800396a <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800396a:	6883      	ldr	r3, [r0, #8]
	data->user_data = cb_data;
 800396c:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 8003970:	4770      	bx	lr

08003972 <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8003972:	6882      	ldr	r2, [r0, #8]
	if (data->user_cb) {
 8003974:	6893      	ldr	r3, [r2, #8]
 8003976:	b10b      	cbz	r3, 800397c <uart_stm32_isr+0xa>
		data->user_cb(data->user_data);
 8003978:	68d0      	ldr	r0, [r2, #12]
 800397a:	4718      	bx	r3
}
 800397c:	4770      	bx	lr

0800397e <uart_stm32_irq_config_func_0>:
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

#if DT_HAS_DRV_INST(0)
STM32_UART_INIT(0)
 800397e:	b508      	push	{r3, lr}
 8003980:	2200      	movs	r2, #0
 8003982:	2025      	movs	r0, #37	; 0x25
 8003984:	4611      	mov	r1, r2
 8003986:	f7fd fbc9 	bl	800111c <z_arm_irq_priority_set>
 800398a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800398e:	2025      	movs	r0, #37	; 0x25
 8003990:	f7fd bbb4 	b.w	80010fc <arch_irq_enable>

08003994 <uart_stm32_irq_config_func_1>:
#endif	/* DT_HAS_DRV_INST(0) */

#if DT_HAS_DRV_INST(1)
STM32_UART_INIT(1)
 8003994:	b508      	push	{r3, lr}
 8003996:	2200      	movs	r2, #0
 8003998:	2026      	movs	r0, #38	; 0x26
 800399a:	4611      	mov	r1, r2
 800399c:	f7fd fbbe 	bl	800111c <z_arm_irq_priority_set>
 80039a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80039a4:	2026      	movs	r0, #38	; 0x26
 80039a6:	f7fd bba9 	b.w	80010fc <arch_irq_enable>

080039aa <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80039aa:	6803      	ldr	r3, [r0, #0]
{
 80039ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ae:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80039b0:	6899      	ldr	r1, [r3, #8]
	if (clock_control_get_rate(data->clock,
 80039b2:	6883      	ldr	r3, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80039b4:	f851 4b0c 	ldr.w	r4, [r1], #12
	if (clock_control_get_rate(data->clock,
 80039b8:	6858      	ldr	r0, [r3, #4]
 80039ba:	6843      	ldr	r3, [r0, #4]
 80039bc:	aa01      	add	r2, sp, #4
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4798      	blx	r3
 80039c2:	2800      	cmp	r0, #0
 80039c4:	db14      	blt.n	80039f0 <uart_stm32_set_baudrate+0x46>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80039c6:	9801      	ldr	r0, [sp, #4]
 80039c8:	2119      	movs	r1, #25
 80039ca:	00aa      	lsls	r2, r5, #2
 80039cc:	0fab      	lsrs	r3, r5, #30
 80039ce:	fba0 0101 	umull	r0, r1, r0, r1
 80039d2:	f7fc fbd9 	bl	8000188 <__aeabi_uldivmod>
 80039d6:	2264      	movs	r2, #100	; 0x64
 80039d8:	fbb0 f1f2 	udiv	r1, r0, r2
 80039dc:	fb02 0311 	mls	r3, r2, r1, r0
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	3332      	adds	r3, #50	; 0x32
 80039e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80039e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	60a3      	str	r3, [r4, #8]
}
 80039f0:	b003      	add	sp, #12
 80039f2:	bd30      	pop	{r4, r5, pc}

080039f4 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80039f4:	6883      	ldr	r3, [r0, #8]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80039fa:	6803      	ldr	r3, [r0, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003a00:	68d3      	ldr	r3, [r2, #12]
 8003a02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0a:	d023      	beq.n	8003a54 <uart_stm32_config_get+0x60>
		return UART_CFG_PARITY_NONE;
 8003a0c:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8003a10:	4243      	negs	r3, r0
 8003a12:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8003a14:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8003a16:	6913      	ldr	r3, [r2, #16]
 8003a18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8003a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a20:	d01a      	beq.n	8003a58 <uart_stm32_config_get+0x64>
 8003a22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a26:	d019      	beq.n	8003a5c <uart_stm32_config_get+0x68>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2303      	movne	r3, #3
 8003a2e:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8003a30:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003a32:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8003a34:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 8003a38:	bf14      	ite	ne
 8003a3a:	2304      	movne	r3, #4
 8003a3c:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8003a3e:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003a40:	6953      	ldr	r3, [r2, #20]
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8003a46:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8003a4a:	4253      	negs	r3, r2
 8003a4c:	4153      	adcs	r3, r2
 8003a4e:	71cb      	strb	r3, [r1, #7]
}
 8003a50:	2000      	movs	r0, #0
 8003a52:	4770      	bx	lr
	switch (parity) {
 8003a54:	2302      	movs	r3, #2
 8003a56:	e7dd      	b.n	8003a14 <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e7e9      	b.n	8003a30 <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e7e7      	b.n	8003a30 <uart_stm32_config_get+0x3c>

08003a60 <HAL_TIM_PWM_MspInit>:
 8003a60:	4770      	bx	lr

08003a62 <HAL_TIM_PWM_Init>:
{
 8003a62:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003a64:	4604      	mov	r4, r0
 8003a66:	b1a0      	cbz	r0, 8003a92 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a70:	b91b      	cbnz	r3, 8003a7a <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003a72:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003a76:	f7ff fff3 	bl	8003a60 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a82:	1d21      	adds	r1, r4, #4
 8003a84:	f7fe fb04 	bl	8002090 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003a8e:	2000      	movs	r0, #0
}
 8003a90:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a92:	2001      	movs	r0, #1
 8003a94:	e7fc      	b.n	8003a90 <HAL_TIM_PWM_Init+0x2e>

08003a96 <HAL_TIM_PWM_ConfigChannel>:
{
 8003a96:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003a98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
{
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003aa4:	d010      	beq.n	8003ac8 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003aa6:	2301      	movs	r3, #1
  switch (Channel)
 8003aa8:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003aaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003aae:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8003ab2:	d03f      	beq.n	8003b34 <HAL_TIM_PWM_ConfigChannel+0x9e>
 8003ab4:	d809      	bhi.n	8003aca <HAL_TIM_PWM_ConfigChannel+0x34>
 8003ab6:	b1da      	cbz	r2, 8003af0 <HAL_TIM_PWM_ConfigChannel+0x5a>
 8003ab8:	2a04      	cmp	r2, #4
 8003aba:	d02a      	beq.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x7c>
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003abe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003ac4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003ac8:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003aca:	2a0c      	cmp	r2, #12
 8003acc:	d1f6      	bne.n	8003abc <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	f7fe fab8 	bl	8002044 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ad4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ad6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ade:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003aee:	e030      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0xbc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	f7fe fa3f 	bl	8001f74 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003af8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	f042 0208 	orr.w	r2, r2, #8
 8003b00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	f022 0204 	bic.w	r2, r2, #4
 8003b08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b0e:	619a      	str	r2, [r3, #24]
      break;
 8003b10:	e7d4      	b.n	8003abc <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b12:	6820      	ldr	r0, [r4, #0]
 8003b14:	f7fe fb22 	bl	800215c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b18:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b1a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b32:	e7ec      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x78>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	f7fe fa4f 	bl	8001fd8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b3a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b3c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	f042 0208 	orr.w	r2, r2, #8
 8003b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	f022 0204 	bic.w	r2, r2, #4
 8003b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b52:	61da      	str	r2, [r3, #28]
      break;
 8003b54:	e7b2      	b.n	8003abc <HAL_TIM_PWM_ConfigChannel+0x26>

08003b56 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b56:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b58:	f001 011f 	and.w	r1, r1, #31
{
 8003b5c:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b5e:	2401      	movs	r4, #1
 8003b60:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003b62:	ea23 0304 	bic.w	r3, r3, r4
 8003b66:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b68:	6a03      	ldr	r3, [r0, #32]
 8003b6a:	408a      	lsls	r2, r1
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	6202      	str	r2, [r0, #32]
}
 8003b70:	bd10      	pop	{r4, pc}

08003b72 <HAL_TIM_PWM_Start>:
 8003b72:	f7fe bb29 	b.w	80021c8 <HAL_TIM_OC_Start>

08003b76 <arch_system_halt>:
	__asm__ volatile(
 8003b76:	f04f 0210 	mov.w	r2, #16
 8003b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b7e:	f382 8811 	msr	BASEPRI, r2
 8003b82:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8003b86:	e7fe      	b.n	8003b86 <arch_system_halt+0x10>

08003b88 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8003b88:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8003b8a:	f7ff fff4 	bl	8003b76 <arch_system_halt>

08003b8e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b90:	4605      	mov	r5, r0
 8003b92:	460e      	mov	r6, r1
 8003b94:	f04f 0310 	mov.w	r3, #16
 8003b98:	f3ef 8711 	mrs	r7, BASEPRI
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 8003ba4:	f7ff f846 	bl	8002c34 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
 8003ba8:	4631      	mov	r1, r6
 8003baa:	4604      	mov	r4, r0
 8003bac:	4628      	mov	r0, r5
 8003bae:	f7ff ffeb 	bl	8003b88 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8003bb2:	f387 8811 	msr	BASEPRI, r7
 8003bb6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8003bba:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 8003bbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bc0:	f7fd bc4a 	b.w	8001458 <z_impl_k_thread_abort>

08003bc4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003bc4:	b921      	cbnz	r1, 8003bd0 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc6:	f3ef 8005 	mrs	r0, IPSR
 8003bca:	b908      	cbnz	r0, 8003bd0 <z_reschedule+0xc>
 8003bcc:	f7fd ba48 	b.w	8001060 <arch_swap>
 8003bd0:	f381 8811 	msr	BASEPRI, r1
 8003bd4:	f3bf 8f6f 	isb	sy
}
 8003bd8:	4770      	bx	lr

08003bda <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003bda:	4603      	mov	r3, r0
 8003bdc:	b920      	cbnz	r0, 8003be8 <z_reschedule_irqlock+0xe>
 8003bde:	f3ef 8205 	mrs	r2, IPSR
 8003be2:	b90a      	cbnz	r2, 8003be8 <z_reschedule_irqlock+0xe>
 8003be4:	f7fd ba3c 	b.w	8001060 <arch_swap>
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
}
 8003bf0:	4770      	bx	lr

08003bf2 <z_reschedule_unlocked>:
	__asm__ volatile(
 8003bf2:	f04f 0310 	mov.w	r3, #16
 8003bf6:	f3ef 8011 	mrs	r0, BASEPRI
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8003c02:	f7ff bfea 	b.w	8003bda <z_reschedule_irqlock>

08003c06 <z_priq_dumb_best>:
{
 8003c06:	4603      	mov	r3, r0
	return list->head == list;
 8003c08:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003c0a:	4283      	cmp	r3, r0
 8003c0c:	d003      	beq.n	8003c16 <z_priq_dumb_best+0x10>
	if (n != NULL) {
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	bf38      	it	cc
 8003c12:	2000      	movcc	r0, #0
 8003c14:	4770      	bx	lr
	struct k_thread *thread = NULL;
 8003c16:	2000      	movs	r0, #0
}
 8003c18:	4770      	bx	lr

08003c1a <z_ready_thread>:
{
 8003c1a:	b510      	push	{r4, lr}
 8003c1c:	f04f 0310 	mov.w	r3, #16
 8003c20:	f3ef 8411 	mrs	r4, BASEPRI
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
 8003c2c:	f7fe fdae 	bl	800278c <ready_thread>
	__asm__ volatile(
 8003c30:	f384 8811 	msr	BASEPRI, r4
 8003c34:	f3bf 8f6f 	isb	sy
}
 8003c38:	bd10      	pop	{r4, pc}

08003c3a <z_thread_timeout>:
{
 8003c3a:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
 8003c3c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 8003c40:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 8003c42:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
 8003c46:	b1c3      	cbz	r3, 8003c7a <z_thread_timeout+0x40>
	__asm__ volatile(
 8003c48:	f04f 0310 	mov.w	r3, #16
 8003c4c:	f3ef 8511 	mrs	r5, BASEPRI
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8003c58:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8003c5c:	f7fe fd40 	bl	80026e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8003c60:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8003c64:	f023 0302 	bic.w	r3, r3, #2
 8003c68:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
 8003c72:	f385 8811 	msr	BASEPRI, r5
 8003c76:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8003c7a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8003c7e:	f023 0314 	bic.w	r3, r3, #20
 8003c82:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
 8003c86:	4608      	mov	r0, r1
}
 8003c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
 8003c8c:	f7ff bfc5 	b.w	8003c1a <z_ready_thread>

08003c90 <z_remove_thread_from_ready_q>:
{
 8003c90:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003c92:	f04f 0310 	mov.w	r3, #16
 8003c96:	f3ef 8411 	mrs	r4, BASEPRI
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
 8003ca2:	f7fe fecb 	bl	8002a3c <unready_thread>
	__asm__ volatile(
 8003ca6:	f384 8811 	msr	BASEPRI, r4
 8003caa:	f3bf 8f6f 	isb	sy
}
 8003cae:	bd10      	pop	{r4, pc}

08003cb0 <add_to_waitq_locked>:
{
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	460d      	mov	r5, r1
	unready_thread(thread);
 8003cb6:	f7fe fec1 	bl	8002a3c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8003cba:	7b63      	ldrb	r3, [r4, #13]
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8003cc2:	b1c5      	cbz	r5, 8003cf6 <add_to_waitq_locked+0x46>
	return list->head == list;
 8003cc4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8003cc6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003cc8:	429d      	cmp	r5, r3
 8003cca:	bf08      	it	eq
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bf38      	it	cc
 8003cd2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8003cd4:	b183      	cbz	r3, 8003cf8 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
 8003cd6:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8003cda:	f993 200e 	ldrsb.w	r2, [r3, #14]
 8003cde:	4291      	cmp	r1, r2
 8003ce0:	db04      	blt.n	8003cec <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
 8003ce2:	686a      	ldr	r2, [r5, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d007      	beq.n	8003cf8 <add_to_waitq_locked+0x48>
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	e7f3      	b.n	8003cd4 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
 8003cec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8003cee:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 8003cf2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8003cf4:	605c      	str	r4, [r3, #4]
}
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
 8003cf8:	686b      	ldr	r3, [r5, #4]
 8003cfa:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8003cfc:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 8003cfe:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
 8003d00:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8003d02:	606c      	str	r4, [r5, #4]
 8003d04:	e7f7      	b.n	8003cf6 <add_to_waitq_locked+0x46>

08003d06 <z_unpend_first_thread>:
{
 8003d06:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8003d08:	f04f 0310 	mov.w	r3, #16
 8003d0c:	f3ef 8211 	mrs	r2, BASEPRI
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 8003d18:	f7ff ff75 	bl	8003c06 <z_priq_dumb_best>
 8003d1c:	4604      	mov	r4, r0
	__asm__ volatile(
 8003d1e:	f382 8811 	msr	BASEPRI, r2
 8003d22:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 8003d26:	b1c8      	cbz	r0, 8003d5c <z_unpend_first_thread+0x56>
	__asm__ volatile(
 8003d28:	f04f 0310 	mov.w	r3, #16
 8003d2c:	f3ef 8511 	mrs	r5, BASEPRI
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8003d38:	4601      	mov	r1, r0
 8003d3a:	6880      	ldr	r0, [r0, #8]
 8003d3c:	f7fe fcd0 	bl	80026e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8003d40:	7b63      	ldrb	r3, [r4, #13]
 8003d42:	f023 0302 	bic.w	r3, r3, #2
 8003d46:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8003d4c:	f385 8811 	msr	BASEPRI, r5
 8003d50:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
 8003d54:	f104 0018 	add.w	r0, r4, #24
 8003d58:	f000 f802 	bl	8003d60 <z_abort_timeout>
}
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}

08003d60 <z_abort_timeout>:
{
 8003d60:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003d62:	f04f 0210 	mov.w	r2, #16
 8003d66:	f3ef 8411 	mrs	r4, BASEPRI
 8003d6a:	f382 8811 	msr	BASEPRI, r2
 8003d6e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8003d72:	6803      	ldr	r3, [r0, #0]
 8003d74:	b13b      	cbz	r3, 8003d86 <z_abort_timeout+0x26>
			remove_timeout(to);
 8003d76:	f7ff f83d 	bl	8002df4 <remove_timeout>
			ret = 0;
 8003d7a:	2000      	movs	r0, #0
	__asm__ volatile(
 8003d7c:	f384 8811 	msr	BASEPRI, r4
 8003d80:	f3bf 8f6f 	isb	sy
}
 8003d84:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8003d86:	f06f 0015 	mvn.w	r0, #21
 8003d8a:	e7f7      	b.n	8003d7c <z_abort_timeout+0x1c>

08003d8c <z_get_next_timeout_expiry>:
{
 8003d8c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003d8e:	f04f 0310 	mov.w	r3, #16
 8003d92:	f3ef 8411 	mrs	r4, BASEPRI
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8003d9e:	f7ff f83d 	bl	8002e1c <next_timeout>
	__asm__ volatile(
 8003da2:	f384 8811 	msr	BASEPRI, r4
 8003da6:	f3bf 8f6f 	isb	sy
}
 8003daa:	bd10      	pop	{r4, pc}

08003dac <z_set_timeout_expiry>:
{
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	4604      	mov	r4, r0
 8003db0:	460d      	mov	r5, r1
	__asm__ volatile(
 8003db2:	f04f 0310 	mov.w	r3, #16
 8003db6:	f3ef 8611 	mrs	r6, BASEPRI
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 8003dc2:	f7ff f82b 	bl	8002e1c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8003dc6:	2801      	cmp	r0, #1
 8003dc8:	dd05      	ble.n	8003dd6 <z_set_timeout_expiry+0x2a>
 8003dca:	42a0      	cmp	r0, r4
 8003dcc:	dd03      	ble.n	8003dd6 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 8003dce:	4629      	mov	r1, r5
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7fd f8ad 	bl	8000f30 <z_clock_set_timeout>
	__asm__ volatile(
 8003dd6:	f386 8811 	msr	BASEPRI, r6
 8003dda:	f3bf 8f6f 	isb	sy
}
 8003dde:	bd70      	pop	{r4, r5, r6, pc}

08003de0 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8003de0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 8003de2:	f7ff f905 	bl	8002ff0 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 8003de6:	bd08      	pop	{r3, pc}

08003de8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8003de8:	b508      	push	{r3, lr}
	__asm__ volatile(
 8003dea:	f04f 0210 	mov.w	r2, #16
 8003dee:	f3ef 8311 	mrs	r3, BASEPRI
 8003df2:	f382 8811 	msr	BASEPRI, r2
 8003df6:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8003dfa:	f7ff ffc7 	bl	8003d8c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8003dfe:	2101      	movs	r1, #1
 8003e00:	2802      	cmp	r0, #2
 8003e02:	bfd8      	it	le
 8003e04:	4608      	movle	r0, r1
 8003e06:	f7ff ffd1 	bl	8003dac <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8003e0a:	f7fd f9db 	bl	80011c4 <arch_cpu_idle>
}
 8003e0e:	e7ec      	b.n	8003dea <idle+0x2>

08003e10 <k_heap_init>:
{
 8003e10:	b410      	push	{r4}
 8003e12:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8003e16:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8003e1a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8003e1c:	f7ff ba0f 	b.w	800323e <sys_heap_init>

08003e20 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 8003e20:	4770      	bx	lr
